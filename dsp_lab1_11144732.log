Generated notebook dsp_lab1_11144732.ipynb for matriculation number 11144732 on: 2021-10-23 22:09:35.901297
# iPython magic command to load the matplotlib library and
# select the notebook graphics frontend
%matplotlib inline
# import necessary functions from the thkdss library
from thkdsp import *
from dsplab import *
# import audio related functions from the audio submodule
from thkdsp.audio import play_signal, wav2dtsignal
# import some definitions and functions from numpy, the python library for Matlab-like array processing
from numpy import arange, shape, array, zeros, size, ones, isscalar
# set font for Matplotlib to 'Times New Roman' if that is available
set_mpl_font()
# set default font size for Matplotlib, change to different value if labels are too large or too small
set_mpl_fontsize(16)
Info: 2562463468
Lab 1: Probability and Random Variables for matriculation number 11144732 started at: 2021-10-23 22:10:11.856159
# Sat, 23 Oct 2021 22:11:03
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame# Sat, 23 Oct 2021 22:11:41
gen_probs??# Sat, 23 Oct 2021 22:11:50
P0, Pe = gen_probs()# Sat, 23 Oct 2021 22:12:06
Pe#[Out]# 0.019999999999999997
# Sat, 23 Oct 2021 22:12:17
P0#[Out]# 0.8
# Sat, 23 Oct 2021 22:13:06
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Sat, 23 Oct 2021 22:13:19
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Sat, 23 Oct 2021 22:14:02
M = 100# Sat, 23 Oct 2021 22:14:44
random_binary??# Sat, 23 Oct 2021 22:14:54
tx = random_binary(M, P0)
tx#[Out]# array([1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
# Sun, 24 Oct 2021 10:04:19
rx = bsc(tx, Pe)
rx#[Out]# array([1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1])
# Sun, 24 Oct 2021 10:05:51
f0, f1 = rates(rx)# Sun, 24 Oct 2021 10:06:06
f1#[Out]# 0.14
# Sun, 24 Oct 2021 10:06:11
f0#[Out]# 0.86
# Sun, 24 Oct 2021 10:06:30
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Sun, 24 Oct 2021 10:06:52
rx_a = bsc(tx_a, Pe)
#rx_a# Sun, 24 Oct 2021 10:07:08
f0_a, f1_a = rates(rx_a)# Sun, 24 Oct 2021 10:07:24
f1_a#[Out]# 0.208
# Sun, 24 Oct 2021 10:07:36
f0_a#[Out]# 0.792
# Sun, 24 Oct 2021 10:07:56
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:08:14
f0_b, f1_b = rates(rx_b)# Sun, 24 Oct 2021 10:09:00
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:09:01
f0_b, f1_b = rates(rx_b)# Sun, 24 Oct 2021 10:09:17
f1_b#[Out]# 0.1995
# Sun, 24 Oct 2021 10:09:25
f0_b#[Out]# 0.8005
# Sun, 24 Oct 2021 10:09:41
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:09:56
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:10:11
f0_c, f1_c = rates(rx_c)# Sun, 24 Oct 2021 10:10:26
f1_c#[Out]# 0.2124
# Sun, 24 Oct 2021 10:10:46
f0_c#[Out]# 0.7876
# Sun, 24 Oct 2021 10:11:15
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:11:30
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 10:11:43
f0_d, f1_d = rates(rx_d)# Sun, 24 Oct 2021 10:11:55
f1_d#[Out]# 0.21213
# Sun, 24 Oct 2021 10:12:08
f0_d#[Out]# 0.78787
# Sun, 24 Oct 2021 10:12:47
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Sun, 24 Oct 2021 10:13:00
prob_table_1 = pd.DataFrame(dict_table)
prob_table_1.style.hide_index()# Sun, 24 Oct 2021 10:13:34
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a7680df10>
# Sun, 24 Oct 2021 10:13:52
### To get an idea on how much the estimates still vary even though you repeated the experiment for a largenumber of times, repeat the experiment for M = 1000 trials **FIVE TIMES**:# Sun, 24 Oct 2021 10:14:14
tx_u = random_binary(1000, P0)
tx_u#[Out]# array([0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 1, 0, 0])
# Sun, 24 Oct 2021 10:14:22
tx_u = random_binary(1000, P0)
#tx_u# Sun, 24 Oct 2021 10:14:43
rx_u = bsc(tx_u, Pe)
rx_u#[Out]# array([0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
#[Out]#        1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 0, 0, 1, 0])
# Sun, 24 Oct 2021 10:14:48
rx_u = bsc(tx_u, Pe)
#rx_u# Sun, 24 Oct 2021 10:15:02
f0_u, f1_u = rates(rx_u)# Sun, 24 Oct 2021 10:15:24
f1_u#[Out]# 0.217
# Sun, 24 Oct 2021 10:15:39
f0_u#[Out]# 0.783
# Sun, 24 Oct 2021 10:15:55
tx_v = random_binary(1000, P0)
tx_v#[Out]# array([1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 0, 1, 0, 0])
# Sun, 24 Oct 2021 10:16:00
tx_v = random_binary(1000, P0)
#tx_v# Sun, 24 Oct 2021 10:16:13
rx_v = bsc(tx_v, Pe)
#rx_v# Sun, 24 Oct 2021 10:16:18
rx_v = bsc(tx_v, Pe)
rx_v#[Out]# array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
#[Out]#        0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0])
# Sun, 24 Oct 2021 10:16:22
rx_v = bsc(tx_v, Pe)
#rx_v# Sun, 24 Oct 2021 10:16:34
f0_v, f1_v = rates(rx_v)# Sun, 24 Oct 2021 10:17:22
f1_v#[Out]# 0.198
# Sun, 24 Oct 2021 10:17:35
f0_v#[Out]# 0.802
# Sun, 24 Oct 2021 10:18:10
tx_w = random_binary(1000, P0)
tx_w#[Out]# array([0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1])
# Sun, 24 Oct 2021 10:18:15
tx_w = random_binary(1000, P0)
#tx_w# Sun, 24 Oct 2021 10:18:29
rx_w = bsc(tx_w, Pe)
#rx_w# Sun, 24 Oct 2021 10:18:42
f0_w, f1_w = rates(rx_w)# Sun, 24 Oct 2021 10:18:55
f1_w#[Out]# 0.194
# Sun, 24 Oct 2021 10:19:07
f0_w#[Out]# 0.806
# Sun, 24 Oct 2021 10:19:27
tx_y = random_binary(1000, P0)
#tx_y# Sun, 24 Oct 2021 10:19:39
rx_y = bsc(tx_y, Pe)
#rx_y# Sun, 24 Oct 2021 10:19:52
f0_y, f1_y = rates(rx_y)# Sun, 24 Oct 2021 10:20:04
f1_y#[Out]# 0.201
# Sun, 24 Oct 2021 10:20:17
f0_y#[Out]# 0.799
# Sun, 24 Oct 2021 10:20:29
tx_z = random_binary(1000, P0)
#tx_z# Sun, 24 Oct 2021 10:20:43
rx_z = bsc(tx_z, Pe)
#rx_z# Sun, 24 Oct 2021 10:20:54
f0_z, f1_z = rates(rx_z)# Sun, 24 Oct 2021 10:21:05
f1_z#[Out]# 0.224
# Sun, 24 Oct 2021 10:21:17
f0_z#[Out]# 0.776
# Sun, 24 Oct 2021 10:21:31
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Sun, 24 Oct 2021 10:21:53
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a76c280d0>
# Sun, 24 Oct 2021 10:22:43
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0])
# Sun, 24 Oct 2021 10:22:55
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0])
# Sun, 24 Oct 2021 10:23:09
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.8421052631578947
# Sun, 24 Oct 2021 10:23:57
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Sun, 24 Oct 2021 10:24:10
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2# Sun, 24 Oct 2021 10:24:36
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Sun, 24 Oct 2021 10:24:39
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9368421052631579
# Sun, 24 Oct 2021 10:24:59
#For M = 1000
tx_m2 = random_binary(1000, P0)
tx_m2#[Out]# array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,
#[Out]#        1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,
#[Out]#        1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,
#[Out]#        1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 1, 1, 0])
# Sun, 24 Oct 2021 10:25:04
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Sun, 24 Oct 2021 10:25:08
rx_m2 = bsc(tx_m2, Pe)
rx_m2#[Out]# array([0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
#[Out]#        0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 1, 0])
# Sun, 24 Oct 2021 10:25:13
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Sun, 24 Oct 2021 10:25:30
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Sun, 24 Oct 2021 10:25:47
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Sun, 24 Oct 2021 10:25:59
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9244917715392061
# Sun, 24 Oct 2021 10:26:10
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Sun, 24 Oct 2021 10:26:35
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Sun, 24 Oct 2021 10:26:49
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9256609494930351
# Sun, 24 Oct 2021 10:27:06
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
#tx_m5# Sun, 24 Oct 2021 10:27:31
rx_m5 = bsc(tx_m5, Pe)
#rx_m5# Sun, 24 Oct 2021 10:27:45
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.925181146593028
# Sun, 24 Oct 2021 10:28:17
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Sun, 24 Oct 2021 10:28:30
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a76c1ca30>
# Sun, 24 Oct 2021 10:43:54
rv1??# Sun, 24 Oct 2021 10:45:28
rv2??# Sun, 24 Oct 2021 10:45:31
rv2??# Sun, 24 Oct 2021 10:45:46
rv2??# Sun, 24 Oct 2021 10:46:12
rv2??# Sun, 24 Oct 2021 10:47:07
sample_1 = rv1(10000)# Sun, 24 Oct 2021 10:47:16
sample_1 = rv1(10000)
sample_1#[Out]# array([ 1.13589761,  2.37435394, -1.0002416 , ..., -0.01000545,
#[Out]#         0.24902568,  1.26979681])
# Sun, 24 Oct 2021 10:47:45
sample_2 = rv2(10000)
sample_2#[Out]# array([7.5, 3.5, 6.5, ..., 6.5, 7.5, 3.5])
# Sun, 24 Oct 2021 10:48:03
sample_3 = rv3(10000)
sample_3#[Out]# array([0.55761544, 0.07794236, 0.54311194, ..., 0.45561138, 0.8922481 ,
#[Out]#        0.62867476])
# Sun, 24 Oct 2021 10:48:31
plot_scatter??# Sun, 24 Oct 2021 10:49:39
plot_scatter(sample_1)# Sun, 24 Oct 2021 10:50:01
plot_scatter(sample_2)# Sun, 24 Oct 2021 10:50:11
plot_scatter(sample_3)# Sun, 24 Oct 2021 11:10:06
P0, Pe = gen_probs()# Sun, 24 Oct 2021 11:10:07
Pe#[Out]# 0.019999999999999997
# Sun, 24 Oct 2021 11:10:07
P0#[Out]# 0.8
# Sun, 24 Oct 2021 11:10:08
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Sun, 24 Oct 2021 11:10:09
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Sun, 24 Oct 2021 11:10:10
M = 100# Sun, 24 Oct 2021 11:10:10
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0])
# Sun, 24 Oct 2021 11:10:11
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
# Sun, 24 Oct 2021 11:10:12
f0, f1 = rates(rx)# Sun, 24 Oct 2021 11:10:12
f1#[Out]# 0.18
# Sun, 24 Oct 2021 11:10:13
f0#[Out]# 0.82
# Sun, 24 Oct 2021 11:10:13
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Sun, 24 Oct 2021 11:10:13
rx_a = bsc(tx_a, Pe)
#rx_a# Sun, 24 Oct 2021 11:10:14
f0_a, f1_a = rates(rx_a)# Sun, 24 Oct 2021 11:10:14
f1_a#[Out]# 0.214
# Sun, 24 Oct 2021 11:10:14
f0_a#[Out]# 0.786
# Sun, 24 Oct 2021 11:10:15
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 11:10:15
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 11:10:15
f0_b, f1_b = rates(rx_b)# Sun, 24 Oct 2021 11:10:16
f1_b#[Out]# 0.2131
# Sun, 24 Oct 2021 11:10:16
f0_b#[Out]# 0.7869
# Sun, 24 Oct 2021 11:10:16
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 11:10:16
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 11:10:17
f0_c, f1_c = rates(rx_c)# Sun, 24 Oct 2021 11:10:17
f1_c#[Out]# 0.2203
# Sun, 24 Oct 2021 11:10:17
f0_c#[Out]# 0.7797
# Sun, 24 Oct 2021 11:10:18
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 0, 0, ..., 0, 0, 1])
# Sun, 24 Oct 2021 11:10:23
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([1, 0, 0, ..., 0, 0, 1])
# Sun, 24 Oct 2021 11:10:24
f0_d, f1_d = rates(rx_d)# Sun, 24 Oct 2021 11:10:26
f1_d#[Out]# 0.21353
# Sun, 24 Oct 2021 11:10:26
f0_d#[Out]# 0.78647
# Sun, 24 Oct 2021 11:10:28
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Sun, 24 Oct 2021 11:10:33
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a7839c5e0>
# Sun, 24 Oct 2021 11:10:34
tx_u = random_binary(1000, P0)
#tx_u# Sun, 24 Oct 2021 11:10:35
rx_u = bsc(tx_u, Pe)
#rx_u# Sun, 24 Oct 2021 11:10:35
f0_u, f1_u = rates(rx_u)# Sun, 24 Oct 2021 11:10:36
f1_u#[Out]# 0.201
# Sun, 24 Oct 2021 11:10:36
f0_u#[Out]# 0.799
# Sun, 24 Oct 2021 11:10:36
tx_v = random_binary(1000, P0)
#tx_v# Sun, 24 Oct 2021 11:10:37
rx_v = bsc(tx_v, Pe)
#rx_v# Sun, 24 Oct 2021 11:10:37
f0_v, f1_v = rates(rx_v)# Sun, 24 Oct 2021 11:10:38
f1_v#[Out]# 0.224
# Sun, 24 Oct 2021 11:10:38
f0_v#[Out]# 0.776
# Sun, 24 Oct 2021 11:10:38
tx_w = random_binary(1000, P0)
#tx_w# Sun, 24 Oct 2021 11:10:39
rx_w = bsc(tx_w, Pe)
#rx_w# Sun, 24 Oct 2021 11:10:39
f0_w, f1_w = rates(rx_w)# Sun, 24 Oct 2021 11:10:39
f1_w#[Out]# 0.22
# Sun, 24 Oct 2021 11:10:40
f0_w#[Out]# 0.78
# Sun, 24 Oct 2021 11:10:40
tx_y = random_binary(1000, P0)
#tx_y# Sun, 24 Oct 2021 11:10:41
rx_y = bsc(tx_y, Pe)
#rx_y# Sun, 24 Oct 2021 11:10:41
f0_y, f1_y = rates(rx_y)# Sun, 24 Oct 2021 11:10:41
f1_y#[Out]# 0.206
# Sun, 24 Oct 2021 11:10:42
f0_y#[Out]# 0.794
# Sun, 24 Oct 2021 11:10:42
tx_z = random_binary(1000, P0)
#tx_z# Sun, 24 Oct 2021 11:10:43
rx_z = bsc(tx_z, Pe)
#rx_z# Sun, 24 Oct 2021 11:10:43
f0_z, f1_z = rates(rx_z)# Sun, 24 Oct 2021 11:10:44
f1_z#[Out]# 0.215
# Sun, 24 Oct 2021 11:10:45
f0_z#[Out]# 0.785
# Sun, 24 Oct 2021 11:10:45
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Sun, 24 Oct 2021 11:10:45
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a783acf40>
# Sun, 24 Oct 2021 11:10:46
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
# Sun, 24 Oct 2021 11:10:47
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0])
# Sun, 24 Oct 2021 11:10:48
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.8571428571428571
# Sun, 24 Oct 2021 11:10:48
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Sun, 24 Oct 2021 11:10:49
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Sun, 24 Oct 2021 11:10:49
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9343434343434344
# Sun, 24 Oct 2021 11:10:49
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Sun, 24 Oct 2021 11:10:50
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Sun, 24 Oct 2021 11:10:50
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9166666666666666
# Sun, 24 Oct 2021 11:10:51
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Sun, 24 Oct 2021 11:10:51
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Sun, 24 Oct 2021 11:10:52
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9235449485897557
# Sun, 24 Oct 2021 11:10:52
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
#tx_m5# Sun, 24 Oct 2021 11:10:53
rx_m5 = bsc(tx_m5, Pe)
#rx_m5# Sun, 24 Oct 2021 11:10:53
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9238113685324464
# Sun, 24 Oct 2021 11:10:55
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Sun, 24 Oct 2021 11:10:55
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77c70160>
# Sun, 24 Oct 2021 11:11:01
sample_1 = rv1(10000)
sample_1#[Out]# array([ 2.30849771, -1.48685674, -0.4927897 , ...,  1.69636738,
#[Out]#         0.7336486 , -0.01660453])
# Sun, 24 Oct 2021 11:11:02
sample_2 = rv2(10000)
sample_2#[Out]# array([7.5, 6.5, 6.5, ..., 4.5, 6.5, 3.5])
# Sun, 24 Oct 2021 11:11:02
sample_3 = rv3(10000)
sample_3#[Out]# array([0.469864  , 0.45723181, 0.71124614, ..., 0.42111908, 0.09502129,
#[Out]#        0.31126511])
# Sun, 24 Oct 2021 11:11:04
plot_scatter(sample_1)# Sun, 24 Oct 2021 11:11:07
plot_scatter(sample_2)# Sun, 24 Oct 2021 11:11:12
plot_scatter(sample_3)# Sun, 24 Oct 2021 11:11:28
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':[rv2]
}# Sun, 24 Oct 2021 17:52:33
P0, Pe = gen_probs()# Sun, 24 Oct 2021 21:44:57
# P_m1 = P(S1|R1) for M = 100
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9343434343434344
# Sun, 24 Oct 2021 21:45:04
# P_m1 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9343434343434344
# Sun, 24 Oct 2021 21:45:25
# P_m1 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9166666666666666
# Sun, 24 Oct 2021 21:46:03
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9343434343434344
# Sun, 24 Oct 2021 21:46:12
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9166666666666666
# Sun, 24 Oct 2021 21:46:47
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9235449485897557
# Sun, 24 Oct 2021 21:47:38
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
#tx_m5# Sun, 24 Oct 2021 21:47:41
rx_m5 = bsc(tx_m5, Pe)
#rx_m5# Sun, 24 Oct 2021 21:47:46
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 21:47:55
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 21:48:14
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 21:48:14
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.926063639276895
# Sun, 24 Oct 2021 21:48:15
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Sun, 24 Oct 2021 21:48:16
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77d4b8e0>
# Sun, 24 Oct 2021 21:48:20
sample_1 = rv1(10000)
sample_1#[Out]# array([-1.1048445 , -0.51742665,  2.12333842, ...,  0.64298587,
#[Out]#         3.37041806,  1.20959768])
# Sun, 24 Oct 2021 21:48:20
sample_2 = rv2(10000)
sample_2#[Out]# array([7.5, 5.5, 7.5, ..., 3.5, 7.5, 5.5])
# Sun, 24 Oct 2021 21:48:21
sample_3 = rv3(10000)
sample_3#[Out]# array([0.39411003, 0.54418203, 0.17963499, ..., 0.40713033, 0.08285166,
#[Out]#        0.72145962])
# Sun, 24 Oct 2021 21:48:21
plot_scatter(sample_1)# Sun, 24 Oct 2021 21:48:22
plot_scatter(sample_2)# Sun, 24 Oct 2021 21:48:23
plot_scatter(sample_3)# Sun, 24 Oct 2021 21:48:29
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':[rv2]
}# Sun, 24 Oct 2021 21:48:30
scatter_table = pd.DataFrame(dict_scatterTable)# Sun, 24 Oct 2021 21:48:56
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table#[Out]#       Distribution Uniform Guassian                              Discrete
#[Out]# 0  Random Variable     rv3      rv1  <function rv2 at 0x0000014A7333AEE0>
# Sun, 24 Oct 2021 21:49:57
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77d52490>
# Sun, 24 Oct 2021 21:50:24
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Sun, 24 Oct 2021 21:50:24
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77e5c4c0>
# Sun, 24 Oct 2021 21:52:36
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77e5c520>
# Sun, 24 Oct 2021 21:52:37
 ## Experiment 3: Estimation of the moments
# Sun, 24 Oct 2021 22:23:09
?uniform# Sun, 24 Oct 2021 22:23:19
uniform??# Sun, 24 Oct 2021 22:24:59
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform# Sun, 24 Oct 2021 22:25:38
?uniform# Sun, 24 Oct 2021 22:26:02
uniform??# Sun, 24 Oct 2021 22:35:10
expected_values??# Sun, 24 Oct 2021 22:41:16
?uniform# Sun, 24 Oct 2021 22:43:52
#With M = 100
X = np.random.uniform(0,1,100)# Sun, 24 Oct 2021 22:43:59
#With M = 100
X = np.random.uniform(0,1,100)
X#[Out]# array([0.9500179 , 0.27328129, 0.06306317, 0.71293267, 0.15214585,
#[Out]#        0.87742013, 0.09343012, 0.54388521, 0.53577   , 0.92660814,
#[Out]#        0.89890198, 0.27550299, 0.85755417, 0.45267178, 0.4407863 ,
#[Out]#        0.40506121, 0.58052652, 0.07279387, 0.1614454 , 0.53871818,
#[Out]#        0.86805419, 0.63663604, 0.76772862, 0.29195946, 0.96169913,
#[Out]#        0.8857424 , 0.33587512, 0.0869522 , 0.36522164, 0.4120513 ,
#[Out]#        0.98505912, 0.9329014 , 0.96193011, 0.79473272, 0.2643983 ,
#[Out]#        0.6116091 , 0.14359096, 0.94537108, 0.56379098, 0.70334122,
#[Out]#        0.69696654, 0.80209755, 0.43942448, 0.28331527, 0.67356003,
#[Out]#        0.99888365, 0.55038949, 0.35333188, 0.29749629, 0.7739873 ,
#[Out]#        0.19370223, 0.40321555, 0.18137586, 0.67162611, 0.21023706,
#[Out]#        0.70751497, 0.80498776, 0.9686327 , 0.28028176, 0.51713503,
#[Out]#        0.09543947, 0.59025474, 0.31673255, 0.31163036, 0.52787595,
#[Out]#        0.61071645, 0.8976896 , 0.17016986, 0.44578077, 0.87884149,
#[Out]#        0.48783416, 0.16780433, 0.34284141, 0.32493533, 0.87805109,
#[Out]#        0.24990863, 0.81238683, 0.49326948, 0.05737671, 0.24896369,
#[Out]#        0.68954354, 0.71228149, 0.91849922, 0.70091489, 0.99163522,
#[Out]#        0.9791505 , 0.56821093, 0.57525017, 0.92527581, 0.7068221 ,
#[Out]#        0.45624943, 0.42458545, 0.59126084, 0.11243062, 0.34199814,
#[Out]#        0.97494482, 0.04320782, 0.19774391, 0.19487825, 0.31866771])
# Sun, 24 Oct 2021 22:44:54
#With M = 100
X = np.random.uniform(0,1,100)
#X# Sun, 24 Oct 2021 22:46:06
expected_values??# Sun, 24 Oct 2021 22:52:20
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Sun, 24 Oct 2021 22:52:39
m1#[Out]# 0.4660904196455743
# Sun, 24 Oct 2021 22:52:43
mm1#[Out]# 0.31733200989386534
# Sun, 24 Oct 2021 22:52:57
v1#[Out]# 0.10110275819038153
# Sun, 24 Oct 2021 22:53:28
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Sun, 24 Oct 2021 22:53:49
#With M = 1000
X = np.random.uniform(0,1,1000)
X#[Out]# array([0.79114054, 0.42246327, 0.96192271, 0.00588599, 0.89587211,
#[Out]#        0.533943  , 0.6779295 , 0.92707337, 0.41172482, 0.63861838,
#[Out]#        0.7023055 , 0.44960504, 0.88051168, 0.96341437, 0.42241734,
#[Out]#        0.79289699, 0.43828788, 0.33595776, 0.07743218, 0.31010264,
#[Out]#        0.42470902, 0.46680538, 0.63320931, 0.12561898, 0.49036746,
#[Out]#        0.42148266, 0.18803684, 0.56545781, 0.10047   , 0.45996845,
#[Out]#        0.87727424, 0.58403815, 0.12141468, 0.2378746 , 0.8818529 ,
#[Out]#        0.62805193, 0.04212639, 0.59550377, 0.37469507, 0.43944457,
#[Out]#        0.75229133, 0.1596976 , 0.18285325, 0.47886986, 0.52340548,
#[Out]#        0.24653324, 0.95084433, 0.78456221, 0.15766738, 0.38352714,
#[Out]#        0.29892536, 0.29775066, 0.77665293, 0.73128175, 0.3445048 ,
#[Out]#        0.11187058, 0.29036621, 0.79127225, 0.06847569, 0.14185555,
#[Out]#        0.33474333, 0.77536599, 0.15353243, 0.99765941, 0.19898471,
#[Out]#        0.32949493, 0.75188281, 0.57707737, 0.11160823, 0.47902747,
#[Out]#        0.5563059 , 0.48537813, 0.51733726, 0.51708885, 0.83264388,
#[Out]#        0.66875481, 0.35039874, 0.73058276, 0.81032069, 0.4370323 ,
#[Out]#        0.14332504, 0.85639815, 0.51693203, 0.47255939, 0.67373733,
#[Out]#        0.03836755, 0.43858586, 0.34913598, 0.16458988, 0.87800705,
#[Out]#        0.89444796, 0.08828303, 0.61632982, 0.79870251, 0.74419433,
#[Out]#        0.30666977, 0.09671002, 0.09056652, 0.737729  , 0.63076549,
#[Out]#        0.28400695, 0.29447281, 0.78740543, 0.04859156, 0.32245594,
#[Out]#        0.64450342, 0.99738023, 0.11438104, 0.91526253, 0.28743807,
#[Out]#        0.95151635, 0.27782646, 0.7273657 , 0.82613006, 0.11818077,
#[Out]#        0.66205477, 0.7552074 , 0.45770184, 0.19693192, 0.95818154,
#[Out]#        0.2203593 , 0.64671064, 0.07992656, 0.88648816, 0.04081914,
#[Out]#        0.18979513, 0.8926619 , 0.83634969, 0.01547249, 0.48607198,
#[Out]#        0.08552605, 0.65523387, 0.71957222, 0.98940395, 0.42889663,
#[Out]#        0.29389043, 0.58309853, 0.90325469, 0.56241014, 0.42723226,
#[Out]#        0.03398125, 0.5451535 , 0.97667756, 0.91858837, 0.52022356,
#[Out]#        0.71172898, 0.23667694, 0.96458959, 0.08700784, 0.19024152,
#[Out]#        0.5201464 , 0.11242971, 0.32431242, 0.97603949, 0.8198011 ,
#[Out]#        0.84607253, 0.00810901, 0.12470508, 0.42862834, 0.69374066,
#[Out]#        0.30603462, 0.52641627, 0.76115521, 0.62129948, 0.73553717,
#[Out]#        0.76197841, 0.79481073, 0.40884664, 0.73225971, 0.01813697,
#[Out]#        0.02762931, 0.31909236, 0.22438335, 0.14382718, 0.4323962 ,
#[Out]#        0.69650288, 0.24154882, 0.0607163 , 0.99951259, 0.05033138,
#[Out]#        0.84943581, 0.80267075, 0.46013603, 0.47292576, 0.04318778,
#[Out]#        0.87071161, 0.2898197 , 0.29934006, 0.56672976, 0.94681715,
#[Out]#        0.16218482, 0.13673699, 0.04855662, 0.13788884, 0.28165666,
#[Out]#        0.81668069, 0.95395854, 0.53683958, 0.61174678, 0.98993942,
#[Out]#        0.78262383, 0.92480941, 0.47893181, 0.68526346, 0.93643089,
#[Out]#        0.45239232, 0.55888813, 0.1914522 , 0.39491869, 0.19798949,
#[Out]#        0.74168648, 0.12122093, 0.69894598, 0.68166777, 0.64708394,
#[Out]#        0.13404933, 0.88385627, 0.62944184, 0.61876812, 0.80082524,
#[Out]#        0.48243899, 0.17964246, 0.2118497 , 0.60780841, 0.96870793,
#[Out]#        0.82979848, 0.52287295, 0.57680503, 0.13031313, 0.30249706,
#[Out]#        0.23330125, 0.47977946, 0.34497222, 0.61984247, 0.36730568,
#[Out]#        0.91934854, 0.790796  , 0.28077274, 0.13153104, 0.62892875,
#[Out]#        0.89744153, 0.42279271, 0.06112141, 0.71613177, 0.13204312,
#[Out]#        0.24660723, 0.82189413, 0.58266472, 0.84243162, 0.96393382,
#[Out]#        0.83420824, 0.31350533, 0.59260182, 0.95783083, 0.48859363,
#[Out]#        0.61081506, 0.48967976, 0.34593842, 0.09462926, 0.04309012,
#[Out]#        0.19571649, 0.0337833 , 0.12911185, 0.97138035, 0.53492094,
#[Out]#        0.10329566, 0.69157615, 0.31317553, 0.43645047, 0.77560096,
#[Out]#        0.18555964, 0.68479963, 0.786319  , 0.55145333, 0.1790403 ,
#[Out]#        0.23525228, 0.32632095, 0.46730677, 0.9434964 , 0.09462116,
#[Out]#        0.5445833 , 0.45394351, 0.20116995, 0.13607301, 0.82981976,
#[Out]#        0.92358335, 0.70432223, 0.16506275, 0.25904579, 0.91572107,
#[Out]#        0.58386355, 0.75803481, 0.33567053, 0.63204026, 0.68418025,
#[Out]#        0.00954597, 0.36403119, 0.75580404, 0.71847237, 0.87345033,
#[Out]#        0.42065569, 0.81227686, 0.03833551, 0.79784812, 0.81472395,
#[Out]#        0.13146777, 0.50356043, 0.31057315, 0.23353092, 0.5379489 ,
#[Out]#        0.9348257 , 0.10523749, 0.25793373, 0.13734324, 0.79429034,
#[Out]#        0.34751194, 0.15279673, 0.39336507, 0.31865506, 0.53057598,
#[Out]#        0.34953138, 0.07580426, 0.32455547, 0.72892422, 0.70655622,
#[Out]#        0.92046465, 0.42081818, 0.39879388, 0.06256201, 0.66081463,
#[Out]#        0.93178529, 0.79678257, 0.0279749 , 0.3372908 , 0.54588674,
#[Out]#        0.45928329, 0.27929524, 0.5202152 , 0.08149137, 0.93802709,
#[Out]#        0.91506926, 0.02076003, 0.66275646, 0.03304374, 0.52973853,
#[Out]#        0.9253604 , 0.78358147, 0.24049632, 0.40150541, 0.59145641,
#[Out]#        0.7837663 , 0.60361099, 0.45929727, 0.4615954 , 0.71329319,
#[Out]#        0.78484185, 0.49820732, 0.5859926 , 0.97197325, 0.06090751,
#[Out]#        0.22546366, 0.47960907, 0.31571558, 0.32988131, 0.22646213,
#[Out]#        0.95397054, 0.42959508, 0.29060485, 0.76987686, 0.49520609,
#[Out]#        0.72556931, 0.12518689, 0.10396038, 0.32437576, 0.72854362,
#[Out]#        0.30346652, 0.44227905, 0.5189038 , 0.78027828, 0.96025044,
#[Out]#        0.01464609, 0.05239804, 0.83107789, 0.20411017, 0.09921459,
#[Out]#        0.29738412, 0.07188118, 0.30444371, 0.24588811, 0.9566505 ,
#[Out]#        0.98638084, 0.7818185 , 0.70434186, 0.17443656, 0.73309259,
#[Out]#        0.44824908, 0.84985888, 0.38050682, 0.16020555, 0.45192502,
#[Out]#        0.24806055, 0.37855975, 0.8654731 , 0.88697872, 0.81769613,
#[Out]#        0.56256848, 0.34147934, 0.59566895, 0.52428762, 0.40748624,
#[Out]#        0.6167865 , 0.29199951, 0.2938633 , 0.95583057, 0.07546054,
#[Out]#        0.33433398, 0.44158151, 0.00130491, 0.73191294, 0.48503963,
#[Out]#        0.52153535, 0.95214799, 0.67156826, 0.72393382, 0.90657991,
#[Out]#        0.25596296, 0.55221184, 0.8672338 , 0.38040437, 0.14555698,
#[Out]#        0.83648117, 0.33365567, 0.62742594, 0.55263244, 0.68337296,
#[Out]#        0.09321544, 0.77177465, 0.02125246, 0.96708303, 0.01209555,
#[Out]#        0.822435  , 0.87512055, 0.38526641, 0.74100704, 0.87731272,
#[Out]#        0.39156835, 0.31491872, 0.6604852 , 0.01322536, 0.51351446,
#[Out]#        0.29937743, 0.31805593, 0.9245601 , 0.84481907, 0.16456619,
#[Out]#        0.69909338, 0.60567169, 0.36954402, 0.20519142, 0.00329657,
#[Out]#        0.88674033, 0.50347046, 0.79041762, 0.95155097, 0.25944102,
#[Out]#        0.68344899, 0.58011448, 0.22230356, 0.98500696, 0.6085051 ,
#[Out]#        0.02598924, 0.7709139 , 0.43089245, 0.92778062, 0.24555317,
#[Out]#        0.02722241, 0.16016993, 0.27724732, 0.56557834, 0.34450393,
#[Out]#        0.79027517, 0.8147942 , 0.97335506, 0.49687177, 0.3163637 ,
#[Out]#        0.49513204, 0.95011633, 0.08792945, 0.93761475, 0.16169024,
#[Out]#        0.23941725, 0.25398776, 0.80781725, 0.57028615, 0.1533452 ,
#[Out]#        0.83756724, 0.45449861, 0.30810276, 0.76624524, 0.30808266,
#[Out]#        0.89854377, 0.76299922, 0.63414667, 0.92108378, 0.53639333,
#[Out]#        0.80958102, 0.44160089, 0.69390297, 0.79392683, 0.81341692,
#[Out]#        0.92857343, 0.55239743, 0.48727812, 0.41958779, 0.17315582,
#[Out]#        0.33046201, 0.14819995, 0.37660376, 0.06368646, 0.65108124,
#[Out]#        0.31094257, 0.14293371, 0.1537974 , 0.43950698, 0.22249227,
#[Out]#        0.63074202, 0.61097361, 0.87611575, 0.19176286, 0.21144319,
#[Out]#        0.2667075 , 0.44532259, 0.93601536, 0.79799022, 0.91743462,
#[Out]#        0.55771603, 0.14998524, 0.41950652, 0.5727898 , 0.44610311,
#[Out]#        0.65877256, 0.9300398 , 0.44529711, 0.62093077, 0.46521965,
#[Out]#        0.5031731 , 0.99027729, 0.85933575, 0.49904217, 0.59415455,
#[Out]#        0.65222756, 0.95350852, 0.23301593, 0.82251879, 0.70302375,
#[Out]#        0.94143408, 0.78310446, 0.18639854, 0.50350135, 0.6529222 ,
#[Out]#        0.60823314, 0.70073036, 0.67565865, 0.5860441 , 0.13343707,
#[Out]#        0.24554356, 0.20285048, 0.64907201, 0.55566921, 0.89313761,
#[Out]#        0.52440649, 0.56840932, 0.74832824, 0.56747005, 0.01068114,
#[Out]#        0.1390289 , 0.81632023, 0.34600349, 0.29789257, 0.02502799,
#[Out]#        0.69175887, 0.32331884, 0.57968863, 0.68327943, 0.06988583,
#[Out]#        0.5012602 , 0.44005897, 0.15397504, 0.16013478, 0.47306354,
#[Out]#        0.57542712, 0.84109607, 0.38108427, 0.02043288, 0.0266377 ,
#[Out]#        0.35953014, 0.78548549, 0.31031479, 0.90031442, 0.58342588,
#[Out]#        0.34688761, 0.56605437, 0.56502252, 0.15412393, 0.99167479,
#[Out]#        0.37353061, 0.08303099, 0.35476531, 0.71111605, 0.23086848,
#[Out]#        0.33934745, 0.8645526 , 0.77236806, 0.54054777, 0.80929137,
#[Out]#        0.97786117, 0.97888799, 0.34486305, 0.54743151, 0.99926183,
#[Out]#        0.15029008, 0.5947045 , 0.79628069, 0.81270655, 0.56879724,
#[Out]#        0.76828686, 0.44619318, 0.56555074, 0.87184369, 0.14223042,
#[Out]#        0.55207401, 0.09238937, 0.99565763, 0.00631245, 0.77722358,
#[Out]#        0.74412363, 0.91179266, 0.91529615, 0.56393097, 0.76941356,
#[Out]#        0.85223164, 0.31688395, 0.21086659, 0.06688451, 0.95121817,
#[Out]#        0.28860207, 0.80306805, 0.86005235, 0.77014361, 0.83165342,
#[Out]#        0.30018433, 0.93017263, 0.45993089, 0.33913623, 0.79557255,
#[Out]#        0.72352747, 0.3725648 , 0.76595506, 0.03588397, 0.37360644,
#[Out]#        0.99548198, 0.63729978, 0.01671902, 0.90504505, 0.28152412,
#[Out]#        0.73915938, 0.17576066, 0.50448595, 0.83579649, 0.40262069,
#[Out]#        0.29972532, 0.46502686, 0.50981594, 0.5780659 , 0.38931603,
#[Out]#        0.40335184, 0.27014258, 0.32224592, 0.31700423, 0.70732049,
#[Out]#        0.32988089, 0.3420825 , 0.62962571, 0.92549727, 0.93456287,
#[Out]#        0.43776728, 0.81140191, 0.14881357, 0.65147875, 0.43194197,
#[Out]#        0.18318778, 0.20267739, 0.4480227 , 0.0979731 , 0.21682796,
#[Out]#        0.54553858, 0.10273951, 0.86121797, 0.82044064, 0.66863916,
#[Out]#        0.97458668, 0.91842614, 0.17218482, 0.63436086, 0.36431221,
#[Out]#        0.64672502, 0.1264115 , 0.0859659 , 0.12175579, 0.31191447,
#[Out]#        0.71151704, 0.38199689, 0.65198549, 0.27556419, 0.47509367,
#[Out]#        0.63916657, 0.11296044, 0.64164612, 0.37651336, 0.30045102,
#[Out]#        0.78146914, 0.73119336, 0.40675002, 0.86547112, 0.70609022,
#[Out]#        0.69844258, 0.4720653 , 0.47051805, 0.29618879, 0.01719788,
#[Out]#        0.37682501, 0.92486023, 0.71465022, 0.42453971, 0.11717513,
#[Out]#        0.18464771, 0.25955908, 0.00745913, 0.33350114, 0.74789695,
#[Out]#        0.63251143, 0.19169845, 0.72363067, 0.85669468, 0.59967061,
#[Out]#        0.12949785, 0.16132428, 0.12549577, 0.61619122, 0.20805025,
#[Out]#        0.66733398, 0.49440443, 0.78931847, 0.84869899, 0.8667958 ,
#[Out]#        0.37475796, 0.84930689, 0.98937408, 0.52199744, 0.26975458,
#[Out]#        0.79237262, 0.05601562, 0.21347555, 0.54237722, 0.45893873,
#[Out]#        0.81430044, 0.8524875 , 0.7990659 , 0.37162463, 0.95187376,
#[Out]#        0.60352427, 0.28629985, 0.47853454, 0.50429211, 0.96303172,
#[Out]#        0.35316449, 0.77958654, 0.96720807, 0.29845938, 0.77683431,
#[Out]#        0.62539882, 0.47974524, 0.16163662, 0.75700164, 0.19839541,
#[Out]#        0.41192313, 0.86896022, 0.4480684 , 0.66012195, 0.23919164,
#[Out]#        0.72328139, 0.12374112, 0.57093041, 0.70527741, 0.30646494,
#[Out]#        0.83904703, 0.31384263, 0.73724603, 0.05390846, 0.70203986,
#[Out]#        0.12759839, 0.70332753, 0.65375438, 0.13697119, 0.09191616,
#[Out]#        0.73077778, 0.94807708, 0.80431894, 0.02399327, 0.49249912,
#[Out]#        0.4815007 , 0.58216297, 0.69447189, 0.09527624, 0.98165952,
#[Out]#        0.62747143, 0.65727137, 0.64171645, 0.18932507, 0.99230417,
#[Out]#        0.21134597, 0.50193832, 0.99697488, 0.62516576, 0.44914752,
#[Out]#        0.01192785, 0.10880755, 0.67420837, 0.20836466, 0.14218745,
#[Out]#        0.26474297, 0.80434387, 0.79072679, 0.81575275, 0.761274  ,
#[Out]#        0.67207984, 0.22413368, 0.91054551, 0.49710276, 0.37384155,
#[Out]#        0.61953778, 0.17336164, 0.46389806, 0.4482279 , 0.13442951,
#[Out]#        0.18952807, 0.32164311, 0.61267885, 0.10866594, 0.25157014,
#[Out]#        0.2521131 , 0.5670763 , 0.12089276, 0.15352695, 0.69038471,
#[Out]#        0.67855775, 0.31002824, 0.12089442, 0.63376133, 0.4172285 ,
#[Out]#        0.71431562, 0.96495173, 0.30627886, 0.36505353, 0.31539435,
#[Out]#        0.63070574, 0.45820962, 0.27354596, 0.74939139, 0.50764577,
#[Out]#        0.55338444, 0.68808359, 0.57493129, 0.57932611, 0.88806535,
#[Out]#        0.44793638, 0.2006008 , 0.92591525, 0.90659076, 0.19093903,
#[Out]#        0.42874025, 0.76167311, 0.52464926, 0.77249263, 0.80491079,
#[Out]#        0.19389549, 0.53458132, 0.07046738, 0.91871858, 0.29709977,
#[Out]#        0.16764384, 0.87067175, 0.76274073, 0.39826334, 0.17055177,
#[Out]#        0.16218814, 0.71868269, 0.1047126 , 0.45555936, 0.9596588 ,
#[Out]#        0.0796252 , 0.80036753, 0.12483325, 0.17074112, 0.94896152,
#[Out]#        0.15795217, 0.38011153, 0.54758787, 0.6868397 , 0.54608425,
#[Out]#        0.722059  , 0.61717932, 0.76673308, 0.63778359, 0.96759005,
#[Out]#        0.01238033, 0.86444182, 0.9833349 , 0.447335  , 0.18070252,
#[Out]#        0.12253955, 0.66463983, 0.39526883, 0.68499469, 0.03409946,
#[Out]#        0.60441549, 0.99568216, 0.58656513, 0.32163965, 0.29231814,
#[Out]#        0.50502933, 0.99450371, 0.99164741, 0.2927692 , 0.53590938,
#[Out]#        0.45939327, 0.83531112, 0.37057039, 0.94203272, 0.11627597,
#[Out]#        0.8545278 , 0.96487824, 0.65671611, 0.20249327, 0.25989367,
#[Out]#        0.68804671, 0.90340451, 0.73677435, 0.21215791, 0.42715017,
#[Out]#        0.41157391, 0.66790552, 0.75570513, 0.00619689, 0.89954932,
#[Out]#        0.61423802, 0.13140065, 0.2542815 , 0.79326726, 0.21427935,
#[Out]#        0.10169722, 0.90581386, 0.70173415, 0.7663536 , 0.0482784 ,
#[Out]#        0.30484396, 0.39314549, 0.61470661, 0.71441379, 0.17128815,
#[Out]#        0.99526306, 0.57299525, 0.6558119 , 0.70100191, 0.77453009,
#[Out]#        0.70945062, 0.5532863 , 0.29206109, 0.25489099, 0.43281603,
#[Out]#        0.29222923, 0.28642562, 0.48957953, 0.51086484, 0.66746359,
#[Out]#        0.2668125 , 0.91484947, 0.35159034, 0.73835243, 0.52378614,
#[Out]#        0.51141245, 0.38404669, 0.88299722, 0.86682854, 0.48764689,
#[Out]#        0.3716828 , 0.32919779, 0.7454364 , 0.50664454, 0.58108599])
# Sun, 24 Oct 2021 22:54:03
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Sun, 24 Oct 2021 22:54:55
#With M = 100, let m2 = mean, mm2 = mean square and v2 = variance
m1, mm1, v1 = expected_values(X)# Sun, 24 Oct 2021 22:55:13
#With M = 100, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Sun, 24 Oct 2021 22:55:23
m2#[Out]# 0.513902886549279
# Sun, 24 Oct 2021 22:55:37
mm2#[Out]# 0.3442298983069534
# Sun, 24 Oct 2021 22:55:42
v2#[Out]# 0.08021393543871097
# Sun, 24 Oct 2021 22:59:27
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Sun, 24 Oct 2021 23:01:23
#With M = 1000
X = np.random.uniform(0,1,1000)# Sun, 24 Oct 2021 23:01:23
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Sun, 24 Oct 2021 23:01:43
#With M = 10000
X = np.random.uniform(0,1,10000)# Sun, 24 Oct 2021 23:01:45
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Sun, 24 Oct 2021 23:02:04
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.0562333 , 0.85263815, 0.03870681, ..., 0.26246413, 0.37625369,
#[Out]#        0.07275224])
# Sun, 24 Oct 2021 23:02:42
m3#[Out]# 0.4981545707345168
# Sun, 24 Oct 2021 23:03:07
mm3#[Out]# 0.332470642758631
# Sun, 24 Oct 2021 23:03:15
mm3#[Out]# 0.332470642758631
# Sun, 24 Oct 2021 23:03:29
v3#[Out]# 0.08432109852479269
# Sun, 24 Oct 2021 23:03:56
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.33120522, 0.41833799, 0.97207306, ..., 0.30505789, 0.84477148,
#[Out]#        0.20812671])
# Sun, 24 Oct 2021 23:04:40
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m3, mm3, v3 = expected_values(X)# Sun, 24 Oct 2021 23:04:52
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Sun, 24 Oct 2021 23:04:59
#With M = 100
X = np.random.uniform(0,1,100)
#X# Sun, 24 Oct 2021 23:04:59
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Sun, 24 Oct 2021 23:04:59
m1#[Out]# 0.45513702541825934
# Sun, 24 Oct 2021 23:05:00
mm1#[Out]# 0.27405201734710566
# Sun, 24 Oct 2021 23:05:00
v1#[Out]# 0.06757808630356009
# Sun, 24 Oct 2021 23:05:00
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Sun, 24 Oct 2021 23:05:00
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Sun, 24 Oct 2021 23:05:00
m2#[Out]# 0.5086899032734857
# Sun, 24 Oct 2021 23:05:01
mm2#[Out]# 0.33934421641084933
# Sun, 24 Oct 2021 23:05:01
v2#[Out]# 0.0806594581766377
# Sun, 24 Oct 2021 23:05:01
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.44468634, 0.73692956, 0.41007241, ..., 0.2284614 , 0.18872996,
#[Out]#        0.38557713])
# Sun, 24 Oct 2021 23:05:01
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Sun, 24 Oct 2021 23:05:02
m3#[Out]# 0.49934845217515433
# Sun, 24 Oct 2021 23:05:02
mm3#[Out]# 0.3330989104751373
# Sun, 24 Oct 2021 23:05:02
v3#[Out]# 0.08375840962637757
# Sun, 24 Oct 2021 23:05:02
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.29098778, 0.56993023, 0.88636954, ..., 0.59603716, 0.21297217,
#[Out]#        0.65984255])
# Sun, 24 Oct 2021 23:05:03
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Sun, 24 Oct 2021 23:05:36
m4#[Out]# 0.4975728268183101
# Sun, 24 Oct 2021 23:06:24
mm4#[Out]# 0.33060536296520615
# Sun, 24 Oct 2021 23:06:39
v4#[Out]# 0.08302747525199454
# Sun, 24 Oct 2021 23:06:51
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.98463312, 0.82381358, 0.757126  , ..., 0.5387998 , 0.32760412,
#[Out]#        0.45417187])
# Sun, 24 Oct 2021 23:07:04
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.42888874, 0.00728359, 0.33131876, ..., 0.48325732, 0.74191266,
#[Out]#        0.49531998])
# Sun, 24 Oct 2021 23:07:23
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Sun, 24 Oct 2021 23:07:55
m4#[Out]# 0.5000663278778993
# Sun, 24 Oct 2021 23:08:09
mm4#[Out]# 0.3333273498144355
# Sun, 24 Oct 2021 23:08:37
mm5# Sun, 24 Oct 2021 23:08:41
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.31917503, 0.10546266, 0.15064477, ..., 0.89347109, 0.53868719,
#[Out]#        0.81206838])
# Sun, 24 Oct 2021 23:08:41
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Sun, 24 Oct 2021 23:08:41
m5#[Out]# 0.4999555649456694
# Sun, 24 Oct 2021 23:08:41
mm5#[Out]# 0.3332732776709403
# Sun, 24 Oct 2021 23:08:50
v5 #[Out]# 0.0833177940685907
# Sun, 24 Oct 2021 23:16:07
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
       
    
}# Sun, 24 Oct 2021 23:18:54
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
       
    
}# Sun, 24 Oct 2021 23:19:16
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
       
    
}# Sun, 24 Oct 2021 23:19:32
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Sun, 24 Oct 2021 23:19:33
m4#[Out]# 0.4999555649456694
# Sun, 24 Oct 2021 23:19:33
mm4#[Out]# 0.3332732776709403
# Sun, 24 Oct 2021 23:19:34
v4#[Out]# 0.0833177940685907
# Sun, 24 Oct 2021 23:19:34
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.28001115, 0.86034124, 0.53436097, ..., 0.22849349, 0.07496305,
#[Out]#        0.23694624])
# Sun, 24 Oct 2021 23:19:34
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Sun, 24 Oct 2021 23:19:34
m5#[Out]# 0.5002451497804458
# Sun, 24 Oct 2021 23:19:35
mm5#[Out]# 0.33361855585111155
# Sun, 24 Oct 2021 23:19:35
v5 #[Out]# 0.08337342934567996
# Sun, 24 Oct 2021 23:19:36
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
       
    
}# Sun, 24 Oct 2021 23:20:57
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform# Sun, 24 Oct 2021 23:20:58
P0, Pe = gen_probs()# Sun, 24 Oct 2021 23:20:58
Pe#[Out]# 0.019999999999999997
# Sun, 24 Oct 2021 23:20:58
P0#[Out]# 0.8
# Sun, 24 Oct 2021 23:20:59
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Sun, 24 Oct 2021 23:20:59
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Sun, 24 Oct 2021 23:21:00
M = 100# Sun, 24 Oct 2021 23:21:00
tx = random_binary(M, P0)
tx#[Out]# array([0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
# Sun, 24 Oct 2021 23:21:01
rx = bsc(tx, Pe)
rx#[Out]# array([0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0])
# Sun, 24 Oct 2021 23:21:01
f0, f1 = rates(rx)# Sun, 24 Oct 2021 23:21:01
f1#[Out]# 0.18
# Sun, 24 Oct 2021 23:21:02
f0#[Out]# 0.82
# Sun, 24 Oct 2021 23:21:02
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Sun, 24 Oct 2021 23:21:02
rx_a = bsc(tx_a, Pe)
#rx_a# Sun, 24 Oct 2021 23:21:02
f0_a, f1_a = rates(rx_a)# Sun, 24 Oct 2021 23:21:02
f1_a#[Out]# 0.224
# Sun, 24 Oct 2021 23:21:03
f0_a#[Out]# 0.776
# Sun, 24 Oct 2021 23:21:03
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 23:21:03
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 23:21:03
f0_b, f1_b = rates(rx_b)# Sun, 24 Oct 2021 23:21:03
f1_b#[Out]# 0.2076
# Sun, 24 Oct 2021 23:21:04
f0_b#[Out]# 0.7924
# Sun, 24 Oct 2021 23:21:04
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([0, 0, 0, ..., 1, 0, 0])
# Sun, 24 Oct 2021 23:21:04
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([0, 0, 0, ..., 1, 0, 0])
# Sun, 24 Oct 2021 23:21:04
f0_c, f1_c = rates(rx_c)# Sun, 24 Oct 2021 23:21:05
f1_c#[Out]# 0.2121
# Sun, 24 Oct 2021 23:21:05
f0_c#[Out]# 0.7879
# Sun, 24 Oct 2021 23:21:05
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 23:21:05
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sun, 24 Oct 2021 23:21:06
f0_d, f1_d = rates(rx_d)# Sun, 24 Oct 2021 23:21:06
f1_d#[Out]# 0.21368
# Sun, 24 Oct 2021 23:21:06
f0_d#[Out]# 0.78632
# Sun, 24 Oct 2021 23:21:07
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Sun, 24 Oct 2021 23:21:07
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77e5cee0>
# Sun, 24 Oct 2021 23:21:07
tx_u = random_binary(1000, P0)
#tx_u# Sun, 24 Oct 2021 23:21:08
rx_u = bsc(tx_u, Pe)
#rx_u# Sun, 24 Oct 2021 23:21:08
f0_u, f1_u = rates(rx_u)# Sun, 24 Oct 2021 23:21:08
f1_u#[Out]# 0.215
# Sun, 24 Oct 2021 23:21:09
f0_u#[Out]# 0.785
# Sun, 24 Oct 2021 23:21:09
tx_v = random_binary(1000, P0)
#tx_v# Sun, 24 Oct 2021 23:21:09
rx_v = bsc(tx_v, Pe)
#rx_v# Sun, 24 Oct 2021 23:21:09
f0_v, f1_v = rates(rx_v)# Sun, 24 Oct 2021 23:21:10
f1_v#[Out]# 0.205
# Sun, 24 Oct 2021 23:21:10
f0_v#[Out]# 0.795
# Sun, 24 Oct 2021 23:21:10
tx_w = random_binary(1000, P0)
#tx_w# Sun, 24 Oct 2021 23:21:10
rx_w = bsc(tx_w, Pe)
#rx_w# Sun, 24 Oct 2021 23:21:11
f0_w, f1_w = rates(rx_w)# Sun, 24 Oct 2021 23:21:11
f1_w#[Out]# 0.225
# Sun, 24 Oct 2021 23:21:11
f0_w#[Out]# 0.775
# Sun, 24 Oct 2021 23:21:11
tx_y = random_binary(1000, P0)
#tx_y# Sun, 24 Oct 2021 23:21:11
rx_y = bsc(tx_y, Pe)
#rx_y# Sun, 24 Oct 2021 23:21:12
f0_y, f1_y = rates(rx_y)# Sun, 24 Oct 2021 23:21:12
f1_y#[Out]# 0.188
# Sun, 24 Oct 2021 23:21:12
f0_y#[Out]# 0.812
# Sun, 24 Oct 2021 23:21:12
tx_z = random_binary(1000, P0)
#tx_z# Sun, 24 Oct 2021 23:21:13
rx_z = bsc(tx_z, Pe)
#rx_z# Sun, 24 Oct 2021 23:21:13
f0_z, f1_z = rates(rx_z)# Sun, 24 Oct 2021 23:21:13
f1_z#[Out]# 0.225
# Sun, 24 Oct 2021 23:21:13
f0_z#[Out]# 0.775
# Sun, 24 Oct 2021 23:21:14
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Sun, 24 Oct 2021 23:21:14
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77e5c880>
# Sun, 24 Oct 2021 23:21:14
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,
#[Out]#        1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
# Sun, 24 Oct 2021 23:21:15
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,
#[Out]#        1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
# Sun, 24 Oct 2021 23:21:35
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5],
    
}# Sun, 24 Oct 2021 23:21:55
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5],
    
# Sun, 24 Oct 2021 23:22:06
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5],
    
# Sun, 24 Oct 2021 23:22:21
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1#[Out]#              M       100      1000     10000    100000   1000000
#[Out]# 0         Mean  0.455137  0.508690  0.499348  0.499956  0.500245
#[Out]# 1     Variance  0.067578  0.080659  0.083758  0.083318  0.083373
#[Out]# 2  Mean Square  0.274052  0.339344  0.333099  0.333273  0.333619
# Sun, 24 Oct 2021 23:22:34
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5],
}
# Sun, 24 Oct 2021 23:22:35
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1#[Out]#              M       100      1000     10000    100000   1000000
#[Out]# 0         Mean  0.455137  0.508690  0.499348  0.499956  0.500245
#[Out]# 1     Variance  0.067578  0.080659  0.083758  0.083318  0.083373
#[Out]# 2  Mean Square  0.274052  0.339344  0.333099  0.333273  0.333619
# Sun, 24 Oct 2021 23:22:39
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Sun, 24 Oct 2021 23:22:40
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1#[Out]#              M       100      1000     10000    100000   1000000
#[Out]# 0         Mean  0.455137  0.508690  0.499348  0.499956  0.500245
#[Out]# 1     Variance  0.067578  0.080659  0.083758  0.083318  0.083373
#[Out]# 2  Mean Square  0.274052  0.339344  0.333099  0.333273  0.333619
# Sun, 24 Oct 2021 23:22:54
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.hide_index()# Sun, 24 Oct 2021 23:23:07
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.stylehide_index()# Sun, 24 Oct 2021 23:23:14
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77e9cb80>
# Sun, 24 Oct 2021 23:44:56
uniform_table_1.iloc[1]#[Out]# M           Variance
#[Out]# 100        0.0675781
#[Out]# 1000       0.0806595
#[Out]# 10000      0.0837584
#[Out]# 100000     0.0833178
#[Out]# 1000000    0.0833734
#[Out]# Name: 1, dtype: object
# Sun, 24 Oct 2021 23:45:38
uniform_table_1.iloc[5]# Sun, 24 Oct 2021 23:45:49
uniform_table_1.iloc[4]# Mon, 25 Oct 2021 00:05:58
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
TEST_VARIANCE = Mean Square - (Mean)**2# Mon, 25 Oct 2021 00:06:07
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
#TEST_VARIANCE = Mean Square - (Mean)**2# Mon, 25 Oct 2021 00:11:29
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1#[Out]#                M       100      1000     10000    100000   1000000
#[Out]# 0           Mean  0.455137  0.508690  0.499348  0.499956  0.500245
#[Out]# 1       Variance  0.067578  0.080659  0.083758  0.083318  0.083373
#[Out]# 2    Mean Square  0.274052  0.339344  0.333099  0.333273  0.333619
#[Out]# 3  TEST_VARIANCE  0.066902  0.080579  0.083750  0.083318  0.083373
# Mon, 25 Oct 2021 00:12:54
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x14a77d21130>
# Mon, 25 Oct 2021 00:21:16
#By obsevation (comparing the row 'Variance' and the row 'TEST_VARIANCE') the values are approximately the same.
# Hence, we can conclude that equation (4.23) also holds for the corresponding estimates# Mon, 25 Oct 2021 00:22:24
*By obsevation (comparing the row 'Variance' and the row 'TEST_VARIANCE') the values are approximately the same. Hence, we can conclude that equation (4.23) also holds for the corresponding estimates# iPython magic command to load the matplotlib library and
# select the notebook graphics frontend
%matplotlib inline
# import necessary functions from the thkdss library
from thkdsp import *
from dsplab import *
# import audio related functions from the audio submodule
from thkdsp.audio import play_signal, wav2dtsignal
# import some definitions and functions from numpy, the python library for Matlab-like array processing
from numpy import arange, shape, array, zeros, size, ones, isscalar
# set font for Matplotlib to 'Times New Roman' if that is available
set_mpl_font()
# set default font size for Matplotlib, change to different value if labels are too large or too small
set_mpl_fontsize(16)
Info: 2562463468
Lab 1: Probability and Random Variables for matriculation number 11144732 continued at: 2021-10-26 12:29:37.343821
# Tue, 26 Oct 2021 12:30:02
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform# Tue, 26 Oct 2021 12:30:03
P0, Pe = gen_probs()# Tue, 26 Oct 2021 12:30:04
Pe#[Out]# 0.019999999999999997
# Tue, 26 Oct 2021 12:30:04
P0#[Out]# 0.8
# Tue, 26 Oct 2021 12:30:06
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Tue, 26 Oct 2021 12:30:07
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Tue, 26 Oct 2021 12:30:08
M = 100# Tue, 26 Oct 2021 12:30:09
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Tue, 26 Oct 2021 12:30:10
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Tue, 26 Oct 2021 12:30:11
f0, f1 = rates(rx)# Tue, 26 Oct 2021 12:30:12
f1#[Out]# 0.19
# Tue, 26 Oct 2021 12:30:12
f0#[Out]# 0.81
# Tue, 26 Oct 2021 12:30:13
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Tue, 26 Oct 2021 12:30:13
rx_a = bsc(tx_a, Pe)
#rx_a# Tue, 26 Oct 2021 12:30:14
f0_a, f1_a = rates(rx_a)# Tue, 26 Oct 2021 12:30:15
f1_a#[Out]# 0.237
# Tue, 26 Oct 2021 12:30:15
f0_a#[Out]# 0.763
# Tue, 26 Oct 2021 12:30:16
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:17
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:17
f0_b, f1_b = rates(rx_b)# Tue, 26 Oct 2021 12:30:18
f1_b#[Out]# 0.2194
# Tue, 26 Oct 2021 12:30:18
f0_b#[Out]# 0.7806
# Tue, 26 Oct 2021 12:30:19
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:19
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:20
f0_c, f1_c = rates(rx_c)# Tue, 26 Oct 2021 12:30:21
f1_c#[Out]# 0.2025
# Tue, 26 Oct 2021 12:30:21
f0_c#[Out]# 0.7975
# Tue, 26 Oct 2021 12:30:22
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([1, 0, 0, ..., 0, 0, 1])
# Tue, 26 Oct 2021 12:30:22
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([1, 0, 0, ..., 0, 0, 1])
# Tue, 26 Oct 2021 12:30:23
f0_d, f1_d = rates(rx_d)# Tue, 26 Oct 2021 12:30:24
f1_d#[Out]# 0.21276
# Tue, 26 Oct 2021 12:30:24
f0_d#[Out]# 0.78724
# Tue, 26 Oct 2021 12:30:26
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Tue, 26 Oct 2021 12:30:26
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679c2de2e0>
# Tue, 26 Oct 2021 12:30:28
tx_u = random_binary(1000, P0)
#tx_u# Tue, 26 Oct 2021 12:30:29
rx_u = bsc(tx_u, Pe)
#rx_u# Tue, 26 Oct 2021 12:30:30
f0_u, f1_u = rates(rx_u)# Tue, 26 Oct 2021 12:30:31
f1_u#[Out]# 0.204
# Tue, 26 Oct 2021 12:30:32
f0_u#[Out]# 0.796
# Tue, 26 Oct 2021 12:30:32
tx_v = random_binary(1000, P0)
#tx_v# Tue, 26 Oct 2021 12:30:33
rx_v = bsc(tx_v, Pe)
#rx_v# Tue, 26 Oct 2021 12:30:33
f0_v, f1_v = rates(rx_v)# Tue, 26 Oct 2021 12:30:34
f1_v#[Out]# 0.232
# Tue, 26 Oct 2021 12:30:35
f0_v#[Out]# 0.768
# Tue, 26 Oct 2021 12:30:35
tx_w = random_binary(1000, P0)
#tx_w# Tue, 26 Oct 2021 12:30:36
rx_w = bsc(tx_w, Pe)
#rx_w# Tue, 26 Oct 2021 12:30:36
f0_w, f1_w = rates(rx_w)# Tue, 26 Oct 2021 12:30:37
f1_w#[Out]# 0.207
# Tue, 26 Oct 2021 12:30:38
f0_w#[Out]# 0.793
# Tue, 26 Oct 2021 12:30:38
tx_y = random_binary(1000, P0)
#tx_y# Tue, 26 Oct 2021 12:30:39
rx_y = bsc(tx_y, Pe)
#rx_y# Tue, 26 Oct 2021 12:30:39
f0_y, f1_y = rates(rx_y)# Tue, 26 Oct 2021 12:30:40
f1_y#[Out]# 0.207
# Tue, 26 Oct 2021 12:30:40
f0_y#[Out]# 0.793
# Tue, 26 Oct 2021 12:30:41
tx_z = random_binary(1000, P0)
#tx_z# Tue, 26 Oct 2021 12:30:42
rx_z = bsc(tx_z, Pe)
#rx_z# Tue, 26 Oct 2021 12:30:42
f0_z, f1_z = rates(rx_z)# Tue, 26 Oct 2021 12:30:43
f1_z#[Out]# 0.214
# Tue, 26 Oct 2021 12:30:43
f0_z#[Out]# 0.786
# Tue, 26 Oct 2021 12:30:44
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Tue, 26 Oct 2021 12:30:45
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679d2227f0>
# Tue, 26 Oct 2021 12:30:46
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0])
# Tue, 26 Oct 2021 12:30:46
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0])
# Tue, 26 Oct 2021 12:30:47
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.9166666666666666
# Tue, 26 Oct 2021 12:30:48
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Tue, 26 Oct 2021 12:30:48
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Tue, 26 Oct 2021 12:30:49
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9061032863849765
# Tue, 26 Oct 2021 12:30:49
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Tue, 26 Oct 2021 12:30:50
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Tue, 26 Oct 2021 12:30:50
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9270207852193996
# Tue, 26 Oct 2021 12:30:51
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Tue, 26 Oct 2021 12:30:51
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Tue, 26 Oct 2021 12:30:52
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9263898662913441
# Tue, 26 Oct 2021 12:30:53
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 0, 1, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:53
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([1, 0, 1, ..., 0, 0, 0])
# Tue, 26 Oct 2021 12:30:54
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9246697507188539
# Tue, 26 Oct 2021 12:30:55
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Tue, 26 Oct 2021 12:30:56
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679d2388e0>
# Tue, 26 Oct 2021 12:30:57
sample_1 = rv1(10000)
sample_1#[Out]# array([-0.47316168, -0.12101416, -0.60233032, ..., -0.0069588 ,
#[Out]#         1.9625901 ,  1.19970942])
# Tue, 26 Oct 2021 12:30:57
sample_2 = rv2(10000)
sample_2#[Out]# array([6.5, 5.5, 5.5, ..., 3.5, 6.5, 3.5])
# Tue, 26 Oct 2021 12:30:58
sample_3 = rv3(10000)
sample_3#[Out]# array([0.31399041, 0.25423507, 0.70989035, ..., 0.44356342, 0.86449109,
#[Out]#        0.75336003])
# Tue, 26 Oct 2021 12:30:59
plot_scatter(sample_1)# Tue, 26 Oct 2021 12:30:59
plot_scatter(sample_2)# Tue, 26 Oct 2021 12:31:00
plot_scatter(sample_3)# Tue, 26 Oct 2021 12:31:01
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Tue, 26 Oct 2021 12:31:02
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679d238100>
# Tue, 26 Oct 2021 12:31:08
#With M = 100
X = np.random.uniform(0,1,100)
#X# Tue, 26 Oct 2021 12:31:09
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Tue, 26 Oct 2021 12:31:10
m1#[Out]# 0.466222495975158
# Tue, 26 Oct 2021 12:31:11
mm1#[Out]# 0.3048928197435077
# Tue, 26 Oct 2021 12:31:11
v1#[Out]# 0.08841353938404183
# Tue, 26 Oct 2021 12:31:12
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Tue, 26 Oct 2021 12:31:13
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Tue, 26 Oct 2021 12:31:14
m2#[Out]# 0.5002326597453541
# Tue, 26 Oct 2021 12:31:14
mm2#[Out]# 0.3325598744186462
# Tue, 26 Oct 2021 12:31:15
v2#[Out]# 0.08240957011284777
# Tue, 26 Oct 2021 12:31:15
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.11561223, 0.83517908, 0.74205553, ..., 0.94502795, 0.23789689,
#[Out]#        0.64629492])
# Tue, 26 Oct 2021 12:31:16
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Tue, 26 Oct 2021 12:31:17
m3#[Out]# 0.5032503936808775
# Tue, 26 Oct 2021 12:31:18
mm3#[Out]# 0.3373899698573484
# Tue, 26 Oct 2021 12:31:19
v3#[Out]# 0.08413742485987616
# Tue, 26 Oct 2021 12:31:19
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.95519657, 0.99301947, 0.36673116, ..., 0.68250166, 0.78558823,
#[Out]#        0.58354854])
# Tue, 26 Oct 2021 12:31:20
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Tue, 26 Oct 2021 12:31:21
m4#[Out]# 0.4997786856741014
# Tue, 26 Oct 2021 12:31:21
mm4#[Out]# 0.33319867254696073
# Tue, 26 Oct 2021 12:31:22
v4#[Out]# 0.08342077210054959
# Tue, 26 Oct 2021 12:31:23
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.66188969, 0.95563964, 0.77053455, ..., 0.49522821, 0.92190608,
#[Out]#        0.22780809])
# Tue, 26 Oct 2021 12:31:23
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Tue, 26 Oct 2021 12:31:24
m5#[Out]# 0.5000204466899213
# Tue, 26 Oct 2021 12:31:25
mm5#[Out]# 0.33331504963732095
# Tue, 26 Oct 2021 12:31:25
v5 #[Out]# 0.08329468582401853
# Tue, 26 Oct 2021 12:31:27
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Tue, 26 Oct 2021 12:31:27
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679e9c70a0>
# Tue, 26 Oct 2021 12:31:29
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Tue, 26 Oct 2021 12:31:32
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x1679e9c7400>
# iPython magic command to load the matplotlib library and
# select the notebook graphics frontend
%matplotlib inline
# import necessary functions from the thkdss library
from thkdsp import *
from dsplab import *
# import audio related functions from the audio submodule
from thkdsp.audio import play_signal, wav2dtsignal
# import some definitions and functions from numpy, the python library for Matlab-like array processing
from numpy import arange, shape, array, zeros, size, ones, isscalar
# set font for Matplotlib to 'Times New Roman' if that is available
set_mpl_font()
# set default font size for Matplotlib, change to different value if labels are too large or too small
set_mpl_fontsize(16)
Info: 2562463468
Lab 1: Probability and Random Variables for matriculation number 11144732 continued at: 2021-10-28 10:14:08.019457
# Thu, 28 Oct 2021 10:14:29
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform# Thu, 28 Oct 2021 10:14:30
P0, Pe = gen_probs()# Thu, 28 Oct 2021 10:14:31
Pe#[Out]# 0.019999999999999997
# Thu, 28 Oct 2021 10:14:31
P0#[Out]# 0.8
# Thu, 28 Oct 2021 10:14:32
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Thu, 28 Oct 2021 10:14:33
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Thu, 28 Oct 2021 10:14:34
M = 100# Thu, 28 Oct 2021 10:14:35
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 10:14:36
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 10:14:37
f0, f1 = rates(rx)# Thu, 28 Oct 2021 10:14:37
f1#[Out]# 0.23
# Thu, 28 Oct 2021 10:14:38
f0#[Out]# 0.77
# Thu, 28 Oct 2021 10:14:38
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Thu, 28 Oct 2021 10:14:39
rx_a = bsc(tx_a, Pe)
#rx_a# Thu, 28 Oct 2021 10:14:39
f0_a, f1_a = rates(rx_a)# Thu, 28 Oct 2021 10:14:40
f1_a#[Out]# 0.206
# Thu, 28 Oct 2021 10:14:40
f0_a#[Out]# 0.794
# Thu, 28 Oct 2021 10:14:41
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 0, 0, ..., 0, 1, 0])
# Thu, 28 Oct 2021 10:14:41
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 0, 0, ..., 0, 1, 0])
# Thu, 28 Oct 2021 10:14:42
f0_b, f1_b = rates(rx_b)# Thu, 28 Oct 2021 10:14:42
f1_b#[Out]# 0.2136
# Thu, 28 Oct 2021 10:14:43
f0_b#[Out]# 0.7864
# Thu, 28 Oct 2021 10:14:43
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 10:14:44
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 10:14:44
f0_c, f1_c = rates(rx_c)# Thu, 28 Oct 2021 10:14:45
f1_c#[Out]# 0.213
# Thu, 28 Oct 2021 10:14:45
f0_c#[Out]# 0.787
# Thu, 28 Oct 2021 10:14:46
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 0, 1, ..., 0, 0, 1])
# Thu, 28 Oct 2021 10:14:47
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 0, 1, ..., 0, 0, 1])
# Thu, 28 Oct 2021 10:14:47
f0_d, f1_d = rates(rx_d)# Thu, 28 Oct 2021 10:14:48
f1_d#[Out]# 0.21072
# Thu, 28 Oct 2021 10:14:48
f0_d#[Out]# 0.78928
# Thu, 28 Oct 2021 10:14:49
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Thu, 28 Oct 2021 10:14:51
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b02221820>
# Thu, 28 Oct 2021 10:14:52
tx_u = random_binary(1000, P0)
#tx_u# Thu, 28 Oct 2021 10:14:53
rx_u = bsc(tx_u, Pe)
#rx_u# Thu, 28 Oct 2021 10:14:53
f0_u, f1_u = rates(rx_u)# Thu, 28 Oct 2021 10:14:54
f1_u#[Out]# 0.214
# Thu, 28 Oct 2021 10:14:55
f0_u#[Out]# 0.786
# Thu, 28 Oct 2021 10:14:55
tx_v = random_binary(1000, P0)
#tx_v# Thu, 28 Oct 2021 10:14:56
rx_v = bsc(tx_v, Pe)
#rx_v# Thu, 28 Oct 2021 10:14:56
f0_v, f1_v = rates(rx_v)# Thu, 28 Oct 2021 10:14:57
f1_v#[Out]# 0.214
# Thu, 28 Oct 2021 10:14:58
f0_v#[Out]# 0.786
# Thu, 28 Oct 2021 10:14:58
tx_w = random_binary(1000, P0)
#tx_w# Thu, 28 Oct 2021 10:14:59
rx_w = bsc(tx_w, Pe)
#rx_w# Thu, 28 Oct 2021 10:15:00
f0_w, f1_w = rates(rx_w)# Thu, 28 Oct 2021 10:15:00
f1_w#[Out]# 0.203
# Thu, 28 Oct 2021 10:15:01
f0_w#[Out]# 0.797
# Thu, 28 Oct 2021 10:15:01
tx_y = random_binary(1000, P0)
#tx_y# Thu, 28 Oct 2021 10:15:02
rx_y = bsc(tx_y, Pe)
#rx_y# Thu, 28 Oct 2021 10:15:03
f0_y, f1_y = rates(rx_y)# Thu, 28 Oct 2021 10:15:03
f1_y#[Out]# 0.191
# Thu, 28 Oct 2021 10:15:04
f0_y#[Out]# 0.809
# Thu, 28 Oct 2021 10:15:04
tx_z = random_binary(1000, P0)
#tx_z# Thu, 28 Oct 2021 10:15:05
rx_z = bsc(tx_z, Pe)
#rx_z# Thu, 28 Oct 2021 10:15:06
f0_z, f1_z = rates(rx_z)# Thu, 28 Oct 2021 10:15:06
f1_z#[Out]# 0.209
# Thu, 28 Oct 2021 10:15:07
f0_z#[Out]# 0.791
# Thu, 28 Oct 2021 10:15:07
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Thu, 28 Oct 2021 10:15:08
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0248b130>
# Thu, 28 Oct 2021 10:15:09
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 10:15:10
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
#[Out]#        1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 10:15:11
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.9583333333333334
# Thu, 28 Oct 2021 10:15:11
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Thu, 28 Oct 2021 10:15:12
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Thu, 28 Oct 2021 10:15:13
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9607843137254902
# Thu, 28 Oct 2021 10:15:13
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Thu, 28 Oct 2021 10:15:14
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Thu, 28 Oct 2021 10:15:14
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9192932187201528
# Thu, 28 Oct 2021 10:15:15
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Thu, 28 Oct 2021 10:15:15
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Thu, 28 Oct 2021 10:15:16
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9219987812309567
# Thu, 28 Oct 2021 10:15:17
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 10:15:17
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 10:15:18
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9255745698123032
# Thu, 28 Oct 2021 10:15:19
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Thu, 28 Oct 2021 10:15:19
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b02568d90>
# Thu, 28 Oct 2021 10:15:21
sample_1 = rv1(10000)
sample_1#[Out]# array([ 0.58944168,  0.26961128,  1.5208614 , ..., -0.7215445 ,
#[Out]#         1.05430279,  0.95376288])
# Thu, 28 Oct 2021 10:15:22
sample_2 = rv2(10000)
sample_2#[Out]# array([4.5, 5.5, 4.5, ..., 7.5, 6.5, 8.5])
# Thu, 28 Oct 2021 10:15:22
sample_3 = rv3(10000)
sample_3#[Out]# array([0.52399256, 0.68325819, 0.60234941, ..., 0.44177041, 0.88450068,
#[Out]#        0.5769627 ])
# Thu, 28 Oct 2021 10:15:24
plot_scatter(sample_1)# Thu, 28 Oct 2021 10:15:24
plot_scatter(sample_2)# Thu, 28 Oct 2021 10:15:25
plot_scatter(sample_3)# Thu, 28 Oct 2021 10:15:26
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Thu, 28 Oct 2021 10:15:27
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03c87c40>
# Thu, 28 Oct 2021 10:15:29
#With M = 100
X = np.random.uniform(0,1,100)
#X# Thu, 28 Oct 2021 10:15:29
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 10:15:30
m1#[Out]# 0.47629377881201884
# Thu, 28 Oct 2021 10:15:31
mm1#[Out]# 0.31560050123832417
# Thu, 28 Oct 2021 10:15:31
v1#[Out]# 0.08964114899322419
# Thu, 28 Oct 2021 10:15:32
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:15:33
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 10:15:33
m2#[Out]# 0.4896688968677454
# Thu, 28 Oct 2021 10:15:34
mm2#[Out]# 0.32381438903649234
# Thu, 28 Oct 2021 10:15:35
v2#[Out]# 0.08412288336017784
# Thu, 28 Oct 2021 10:15:35
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.71075002, 0.32519986, 0.88051212, ..., 0.53362194, 0.03203423,
#[Out]#        0.27832501])
# Thu, 28 Oct 2021 10:15:36
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 10:15:36
m3#[Out]# 0.5042858146853285
# Thu, 28 Oct 2021 10:15:37
mm3#[Out]# 0.3375794979087696
# Thu, 28 Oct 2021 10:15:38
v3#[Out]# 0.08328364338026222
# Thu, 28 Oct 2021 10:15:38
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.48104069, 0.35581413, 0.15313462, ..., 0.43492593, 0.71155822,
#[Out]#        0.43014491])
# Thu, 28 Oct 2021 10:15:39
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 10:15:40
m4#[Out]# 0.5011875945995914
# Thu, 28 Oct 2021 10:15:40
mm4#[Out]# 0.3345349621821755
# Thu, 28 Oct 2021 10:15:41
v4#[Out]# 0.08334679066955773
# Thu, 28 Oct 2021 10:15:41
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.74652942, 0.96269762, 0.39015002, ..., 0.17069505, 0.03192868,
#[Out]#        0.32186655])
# Thu, 28 Oct 2021 10:15:42
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 10:15:42
m5#[Out]# 0.4999296637068084
# Thu, 28 Oct 2021 10:15:43
mm5#[Out]# 0.33315629427088855
# Thu, 28 Oct 2021 10:15:44
v5 #[Out]# 0.08322670884359473
# Thu, 28 Oct 2021 10:15:45
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 10:15:46
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cd6d30>
# Thu, 28 Oct 2021 10:15:47
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Thu, 28 Oct 2021 10:15:48
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b7fee30d0>
# Thu, 28 Oct 2021 10:29:33
#With M = 1000000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 10:29:35
m5#[Out]# 0.4999296637068084
# Thu, 28 Oct 2021 10:29:36
mm5#[Out]# 0.33315629427088855
# Thu, 28 Oct 2021 10:29:36
v5 #[Out]# 0.08322670884359473
# Thu, 28 Oct 2021 10:29:39
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 10:29:41
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cf85e0>
# Thu, 28 Oct 2021 10:30:06
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Thu, 28 Oct 2021 10:30:06
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cd6100>
# Thu, 28 Oct 2021 10:37:50
#With M = 1000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.64712207, 0.02260276, 0.2731834 , ..., 0.29659208, 0.92107066,
#[Out]#        0.9524851 ])
# Thu, 28 Oct 2021 10:38:04
#With M = 1000
X = np.random.uniform(0,1,1000)
X#[Out]# array([2.38357553e-01, 5.29872051e-01, 8.89784681e-02, 7.06967773e-01,
#[Out]#        2.87987519e-01, 1.93534250e-01, 4.86830943e-01, 4.75173233e-01,
#[Out]#        2.61650294e-01, 7.73574928e-02, 5.81716918e-01, 8.30330929e-01,
#[Out]#        7.42996293e-01, 4.35220600e-01, 5.43920385e-02, 2.12561241e-01,
#[Out]#        1.55140429e-01, 4.50334070e-01, 6.15260456e-01, 8.16652330e-01,
#[Out]#        8.35319661e-01, 6.33280660e-01, 1.17148933e-01, 9.79497841e-01,
#[Out]#        1.86643512e-01, 9.20257759e-02, 9.85170096e-01, 3.08017197e-01,
#[Out]#        1.11177395e-01, 5.54346673e-01, 9.55641149e-01, 6.74814021e-01,
#[Out]#        1.15899360e-01, 7.31409031e-01, 1.60515123e-02, 5.57901596e-01,
#[Out]#        2.94628106e-01, 9.69168205e-01, 8.23332396e-01, 5.62904385e-02,
#[Out]#        7.32185541e-01, 3.85153565e-01, 2.94522853e-01, 4.39636217e-01,
#[Out]#        3.00939266e-01, 3.55285451e-01, 4.98021130e-01, 9.97210864e-01,
#[Out]#        3.40393444e-01, 2.21826021e-01, 6.15921128e-01, 2.97464609e-01,
#[Out]#        2.59500265e-02, 7.26145543e-03, 9.08250704e-01, 8.99327452e-02,
#[Out]#        2.91170401e-01, 3.06201603e-01, 6.77861344e-01, 9.28342923e-01,
#[Out]#        8.19153614e-01, 3.53304245e-01, 5.78574917e-01, 1.16494965e-01,
#[Out]#        9.00609484e-01, 1.68483542e-01, 1.39161150e-01, 8.57928021e-01,
#[Out]#        6.54931959e-01, 5.78032912e-01, 5.94007717e-01, 8.43081151e-01,
#[Out]#        1.29411415e-01, 5.95248641e-02, 6.58941477e-01, 8.01044418e-01,
#[Out]#        5.45342217e-01, 2.52773950e-01, 8.87719899e-01, 9.68187014e-02,
#[Out]#        2.89211248e-02, 3.15500421e-03, 1.71902890e-01, 1.78192712e-01,
#[Out]#        3.31889221e-01, 4.46522352e-01, 6.77763444e-01, 5.28928931e-01,
#[Out]#        4.08260891e-01, 9.94885017e-01, 7.71359700e-01, 2.86946654e-01,
#[Out]#        6.18421732e-01, 4.55749777e-01, 3.51769860e-01, 1.72427891e-01,
#[Out]#        4.87623764e-01, 5.82372622e-01, 4.26811029e-01, 5.49551587e-01,
#[Out]#        5.62508939e-01, 1.88238125e-01, 8.97859411e-01, 3.04242817e-01,
#[Out]#        6.02217683e-01, 1.06349332e-01, 2.25676031e-03, 5.28079761e-01,
#[Out]#        7.78829106e-01, 1.72585010e-01, 5.46561559e-01, 3.09544591e-01,
#[Out]#        3.88120093e-01, 9.74752376e-01, 7.23886504e-01, 4.20546019e-01,
#[Out]#        2.07384759e-01, 1.43154011e-01, 1.53477731e-01, 4.61161868e-01,
#[Out]#        4.90442899e-01, 7.39650391e-01, 5.02904716e-02, 8.88769517e-01,
#[Out]#        5.93958943e-02, 7.10062604e-01, 6.53355523e-01, 3.87137453e-01,
#[Out]#        2.06420476e-01, 8.35139132e-01, 9.68992561e-02, 6.40306165e-01,
#[Out]#        3.17042946e-01, 8.13322399e-01, 7.17652777e-01, 6.43139958e-01,
#[Out]#        8.90879612e-01, 6.96419060e-01, 5.84518376e-02, 1.52663060e-01,
#[Out]#        9.32366835e-02, 1.24129311e-01, 4.67495115e-01, 9.25660116e-01,
#[Out]#        1.14290161e-02, 6.71756184e-01, 2.80517484e-01, 6.57102543e-01,
#[Out]#        9.96833410e-01, 7.53955445e-01, 3.06635431e-02, 3.51929173e-01,
#[Out]#        8.66348051e-01, 2.06516931e-01, 3.75819822e-01, 2.99243279e-02,
#[Out]#        4.80618130e-01, 4.85401555e-01, 3.81247414e-01, 3.63270535e-01,
#[Out]#        2.40724764e-01, 2.44418331e-01, 9.54637735e-01, 7.00300254e-01,
#[Out]#        2.23796101e-01, 1.64112815e-01, 2.19704397e-01, 1.70596385e-01,
#[Out]#        1.19838293e-01, 6.01177967e-01, 1.64008749e-01, 6.05897324e-01,
#[Out]#        6.04585848e-01, 3.51154188e-02, 4.97514903e-01, 1.17276743e-01,
#[Out]#        9.44678415e-01, 7.37498423e-01, 5.97331858e-01, 4.01197854e-01,
#[Out]#        7.31287640e-01, 2.65386970e-01, 1.72660343e-01, 3.74169845e-01,
#[Out]#        9.52040095e-02, 5.85118683e-01, 6.86194925e-01, 9.12020561e-01,
#[Out]#        6.96649648e-01, 3.89805759e-01, 5.26181270e-01, 1.22065823e-01,
#[Out]#        5.54666686e-01, 5.17160377e-01, 8.26996575e-01, 7.87116522e-01,
#[Out]#        4.68621586e-01, 9.52419503e-01, 9.42739720e-01, 1.48988557e-01,
#[Out]#        7.84372435e-01, 4.47307475e-02, 1.31111020e-04, 9.66372552e-01,
#[Out]#        3.39521304e-01, 2.14471110e-01, 5.13727174e-02, 4.74132264e-01,
#[Out]#        7.07330270e-01, 4.73070083e-01, 7.91207136e-01, 7.49695969e-01,
#[Out]#        1.87950229e-01, 6.46719210e-01, 5.36354660e-01, 2.76086554e-01,
#[Out]#        7.55145294e-01, 9.76333465e-01, 6.26111574e-02, 4.02013319e-02,
#[Out]#        5.06331927e-01, 7.02057125e-01, 2.52770650e-01, 2.44968599e-02,
#[Out]#        1.29368084e-01, 2.52480575e-01, 7.95608435e-01, 5.74838217e-01,
#[Out]#        8.96513484e-02, 9.63635040e-02, 4.89836311e-02, 5.75752018e-01,
#[Out]#        9.72872603e-01, 7.41331905e-01, 9.05945297e-01, 8.18820808e-01,
#[Out]#        7.51127218e-01, 5.83234909e-01, 8.13350945e-01, 8.62252393e-03,
#[Out]#        9.86578486e-01, 3.49574203e-01, 7.35003667e-01, 5.56759567e-01,
#[Out]#        3.21124794e-01, 6.67052870e-01, 1.64398686e-01, 8.56405260e-01,
#[Out]#        8.27459651e-01, 4.49318659e-01, 5.45834105e-01, 6.50173435e-01,
#[Out]#        9.46342443e-01, 9.29046231e-01, 7.10422208e-01, 2.75241481e-01,
#[Out]#        5.65549481e-01, 4.83966171e-01, 7.36623924e-01, 9.64020567e-01,
#[Out]#        5.49547710e-01, 5.07204353e-01, 4.55148354e-01, 7.85880733e-01,
#[Out]#        5.46901706e-01, 2.87380823e-01, 6.70977262e-01, 3.53015322e-01,
#[Out]#        2.22784533e-01, 2.88234204e-01, 4.83465527e-01, 4.16575698e-01,
#[Out]#        3.70296309e-01, 4.98436772e-01, 6.80954695e-01, 1.57188685e-01,
#[Out]#        7.25885552e-01, 6.66782030e-01, 7.58525325e-01, 3.51525787e-01,
#[Out]#        1.94760896e-01, 4.11377024e-02, 7.37508783e-01, 7.42853950e-01,
#[Out]#        5.69720674e-01, 6.95725159e-01, 9.52931686e-01, 9.46715295e-01,
#[Out]#        1.55436157e-01, 3.92959757e-01, 3.43989362e-01, 3.50486710e-01,
#[Out]#        9.00969825e-02, 8.93204337e-01, 6.33050805e-02, 9.20212742e-01,
#[Out]#        5.58807529e-01, 2.34403339e-01, 1.06716375e-01, 9.21179802e-01,
#[Out]#        7.21425378e-02, 8.45787612e-01, 1.90875785e-02, 9.13054594e-02,
#[Out]#        6.23812505e-01, 6.67924500e-01, 6.79509106e-01, 1.29628439e-01,
#[Out]#        8.94134479e-02, 5.75597797e-01, 1.21917701e-01, 8.83828627e-01,
#[Out]#        4.08114714e-01, 5.14488109e-01, 4.02035470e-01, 5.21314698e-01,
#[Out]#        4.16392990e-01, 2.20952296e-01, 2.29511681e-01, 4.49277709e-01,
#[Out]#        4.00874886e-02, 8.72135825e-01, 9.26614879e-01, 2.79904904e-01,
#[Out]#        2.96131010e-01, 1.76220470e-02, 1.30687332e-01, 5.18445756e-01,
#[Out]#        4.93543965e-02, 6.30101348e-01, 3.42966407e-01, 1.21209162e-01,
#[Out]#        8.93335813e-01, 7.20137047e-01, 7.15464887e-03, 5.85612008e-01,
#[Out]#        8.84357506e-02, 9.16223015e-02, 9.40707696e-01, 7.82301435e-01,
#[Out]#        1.76907852e-01, 3.95377704e-01, 8.46519503e-01, 9.82987594e-01,
#[Out]#        5.22155501e-01, 1.68836893e-01, 8.50740799e-01, 3.44278335e-01,
#[Out]#        2.73905531e-01, 1.85513837e-02, 9.98748611e-01, 8.92483431e-01,
#[Out]#        8.55502105e-01, 5.01743153e-01, 5.96247628e-01, 4.65606639e-01,
#[Out]#        6.43404658e-01, 7.75680735e-01, 8.80047915e-01, 4.95513778e-01,
#[Out]#        2.67708927e-01, 3.01146839e-01, 5.00799650e-01, 9.52203267e-01,
#[Out]#        3.78483171e-03, 4.62167907e-01, 6.90225579e-01, 6.37516362e-01,
#[Out]#        2.73781687e-01, 4.75442368e-01, 6.60837189e-01, 3.28614030e-01,
#[Out]#        5.93301057e-01, 7.40323368e-01, 7.93272062e-01, 6.52907807e-01,
#[Out]#        5.24894916e-01, 7.82379413e-01, 8.37901648e-02, 6.64672409e-01,
#[Out]#        1.80029818e-01, 9.66581098e-01, 3.86927589e-01, 5.35062220e-01,
#[Out]#        7.18721179e-01, 4.10912884e-01, 9.82392378e-01, 7.25616329e-02,
#[Out]#        2.27366995e-01, 2.67644022e-01, 4.39197874e-01, 6.76177530e-01,
#[Out]#        7.35047029e-01, 4.53260439e-01, 1.34085054e-01, 5.29987853e-02,
#[Out]#        8.56737340e-02, 9.35557965e-01, 4.26283029e-01, 8.45621920e-01,
#[Out]#        8.83448956e-01, 7.21316685e-01, 1.15843629e-01, 3.36423894e-01,
#[Out]#        3.70092085e-03, 5.14713257e-01, 8.66730683e-01, 9.83517292e-01,
#[Out]#        4.69127730e-01, 8.63474142e-01, 8.22490880e-01, 9.41126529e-03,
#[Out]#        5.83003401e-01, 7.69395001e-01, 9.64559633e-01, 3.75752305e-01,
#[Out]#        3.68723096e-01, 6.27169207e-01, 6.94423269e-01, 6.05621964e-01,
#[Out]#        8.19939574e-01, 6.53681005e-01, 2.47781222e-01, 6.84641770e-01,
#[Out]#        2.09843733e-01, 9.34326664e-01, 7.74272493e-01, 2.67743129e-01,
#[Out]#        9.64256042e-02, 6.02622169e-01, 8.41860497e-01, 5.33130207e-01,
#[Out]#        5.04330679e-01, 2.31137949e-01, 4.09660199e-01, 9.13558255e-01,
#[Out]#        1.26867189e-01, 7.24061135e-01, 1.50634228e-01, 6.05289696e-01,
#[Out]#        5.48027765e-02, 3.39546161e-01, 2.58521122e-01, 2.80515417e-01,
#[Out]#        4.36903418e-02, 6.62717479e-01, 8.51682152e-01, 5.71495003e-01,
#[Out]#        5.11912317e-01, 1.67995228e-01, 9.11142487e-01, 3.66899004e-01,
#[Out]#        4.86779768e-01, 2.31170513e-01, 1.73513952e-01, 7.00817481e-01,
#[Out]#        8.55118256e-01, 1.18281172e-01, 3.54467636e-01, 5.07789227e-01,
#[Out]#        5.38401966e-01, 3.00966879e-01, 1.75969778e-01, 2.16699212e-01,
#[Out]#        7.73918841e-01, 9.70768686e-01, 5.40650265e-01, 8.59966579e-01,
#[Out]#        3.95296563e-01, 5.01254136e-01, 9.09850415e-01, 6.71769926e-01,
#[Out]#        6.53498646e-01, 7.09058899e-01, 7.35384027e-01, 2.81468659e-01,
#[Out]#        9.74432482e-01, 3.73517037e-01, 1.13572518e-01, 6.26526500e-01,
#[Out]#        9.36534915e-01, 5.68717981e-01, 5.77886228e-02, 9.24695939e-01,
#[Out]#        3.80234277e-01, 3.74162015e-01, 8.42111326e-01, 4.94870951e-01,
#[Out]#        1.79381129e-01, 2.66862527e-01, 8.74410106e-01, 3.92721415e-01,
#[Out]#        1.56934976e-01, 3.35235874e-02, 2.76747990e-01, 8.93864586e-01,
#[Out]#        1.68848989e-01, 3.31597261e-01, 4.43210073e-01, 7.74853318e-01,
#[Out]#        9.56496209e-01, 4.31938790e-01, 1.84175601e-01, 4.67179748e-02,
#[Out]#        1.19816320e-01, 5.31121174e-01, 9.33109910e-01, 8.67244631e-01,
#[Out]#        6.62132186e-01, 1.52237461e-02, 9.57447823e-01, 6.93961042e-01,
#[Out]#        5.09744777e-01, 4.28991648e-02, 8.46622550e-01, 9.82444410e-01,
#[Out]#        7.33768248e-01, 1.71443100e-01, 1.39053490e-01, 3.79646025e-01,
#[Out]#        8.91450298e-01, 2.93465528e-01, 4.50031927e-02, 4.25347686e-01,
#[Out]#        1.64237858e-01, 8.16774135e-01, 7.03655795e-01, 3.60811153e-01,
#[Out]#        6.36437500e-02, 5.42724294e-01, 2.14106682e-01, 2.67521106e-01,
#[Out]#        9.99023287e-01, 4.90160734e-01, 1.50976834e-04, 6.92877684e-01,
#[Out]#        7.76276551e-01, 6.18972887e-02, 6.32890552e-01, 7.39547775e-02,
#[Out]#        1.65121492e-01, 6.37261564e-01, 2.92855167e-01, 5.31162199e-02,
#[Out]#        6.14748292e-01, 7.51612557e-01, 6.90551256e-01, 2.54785772e-01,
#[Out]#        2.22461791e-01, 8.25826219e-01, 6.22932644e-01, 2.63411590e-01,
#[Out]#        7.99232262e-01, 9.15533272e-01, 5.36115856e-02, 6.74244842e-01,
#[Out]#        4.35682190e-01, 3.66775952e-01, 2.55019214e-01, 1.20951030e-01,
#[Out]#        1.32474925e-01, 5.61122741e-01, 9.36549664e-01, 5.40315630e-01,
#[Out]#        5.06972506e-01, 2.98555486e-01, 1.90223504e-01, 5.16320857e-01,
#[Out]#        7.91083315e-01, 2.86091892e-02, 1.36141636e-01, 1.82971475e-01,
#[Out]#        8.66792038e-01, 7.67588876e-01, 3.68262400e-01, 6.48366350e-01,
#[Out]#        8.40066029e-01, 3.20701429e-01, 4.01000528e-01, 1.17406080e-01,
#[Out]#        7.81943415e-01, 2.38771822e-01, 3.41625995e-01, 9.22239581e-01,
#[Out]#        1.65433310e-01, 3.45896307e-01, 7.88692105e-01, 9.53435243e-01,
#[Out]#        8.38815616e-01, 3.08418739e-01, 6.47272621e-01, 3.81426975e-01,
#[Out]#        5.62941369e-01, 6.90800857e-01, 6.49775942e-01, 8.47563546e-01,
#[Out]#        8.36392797e-01, 3.45342095e-01, 4.64977143e-02, 9.36414665e-02,
#[Out]#        5.45076076e-02, 6.62417526e-01, 6.14372459e-01, 2.91778909e-02,
#[Out]#        9.40091291e-01, 4.99950581e-01, 8.14579359e-01, 4.73390174e-01,
#[Out]#        8.56049727e-01, 9.96120131e-01, 6.14871356e-01, 6.45834785e-01,
#[Out]#        3.26102121e-01, 5.59910730e-01, 2.95647070e-01, 1.46973679e-01,
#[Out]#        5.50358490e-01, 1.62010457e-02, 8.51918439e-01, 9.58148032e-01,
#[Out]#        3.09738675e-02, 6.50628429e-01, 8.86660086e-01, 8.34904852e-01,
#[Out]#        3.31331586e-01, 1.05146516e-01, 9.77592487e-01, 6.03806772e-01,
#[Out]#        8.84874910e-01, 4.03300717e-02, 5.82110044e-01, 2.09380494e-01,
#[Out]#        5.52022739e-01, 7.10786752e-01, 9.13694711e-01, 4.01680151e-01,
#[Out]#        8.84923184e-01, 2.29752007e-01, 2.25770744e-01, 9.08435723e-02,
#[Out]#        3.57905956e-01, 4.91968573e-01, 3.53681501e-01, 4.17096409e-01,
#[Out]#        2.97511935e-01, 1.91571952e-01, 5.24617880e-01, 6.53274318e-01,
#[Out]#        4.15085413e-01, 7.19115396e-01, 9.38474982e-01, 3.50625481e-01,
#[Out]#        6.59490818e-01, 1.76244765e-01, 9.99542874e-01, 6.49750788e-01,
#[Out]#        1.31359063e-01, 7.02794594e-01, 1.03285943e-01, 8.26155569e-01,
#[Out]#        4.69712351e-01, 7.02772820e-01, 7.62030158e-02, 3.17911769e-01,
#[Out]#        2.01949388e-01, 5.29043427e-01, 4.77136360e-01, 2.73877648e-01,
#[Out]#        9.35320477e-01, 8.29349858e-02, 3.41255880e-01, 3.98770617e-01,
#[Out]#        4.78920631e-01, 3.69383367e-01, 6.07743992e-01, 4.41977411e-01,
#[Out]#        6.02279642e-02, 9.86269091e-01, 6.17811125e-01, 2.53922712e-01,
#[Out]#        1.01260978e-01, 6.49972432e-01, 5.02742593e-01, 7.98535194e-01,
#[Out]#        5.31445096e-01, 9.46946087e-01, 4.10253892e-01, 4.79539751e-01,
#[Out]#        3.01591073e-01, 7.10008813e-01, 6.20222225e-01, 9.82279308e-01,
#[Out]#        5.92117873e-02, 1.16238459e-01, 9.90732128e-01, 1.00851350e-01,
#[Out]#        6.22713327e-01, 6.04445355e-01, 4.92968776e-01, 9.34410964e-01,
#[Out]#        9.47765792e-01, 5.43908299e-01, 6.56980955e-01, 8.15130953e-01,
#[Out]#        5.00790117e-02, 4.20061583e-01, 4.35652513e-01, 2.89712284e-01,
#[Out]#        1.85965524e-01, 9.29179660e-01, 5.21578666e-01, 9.15329297e-01,
#[Out]#        5.71431774e-01, 6.79319842e-01, 3.75407854e-03, 6.23182373e-01,
#[Out]#        7.61241142e-01, 4.70613288e-01, 9.04202476e-01, 1.12553624e-01,
#[Out]#        8.11938234e-01, 5.73311712e-01, 4.99240597e-01, 2.44643090e-02,
#[Out]#        8.84745563e-01, 9.64910365e-01, 8.90421352e-01, 6.90330955e-01,
#[Out]#        9.38168320e-01, 6.74955514e-01, 8.55588692e-02, 1.02619706e-01,
#[Out]#        7.96862175e-01, 4.65617574e-01, 2.81429628e-01, 9.14838779e-01,
#[Out]#        3.49157465e-01, 2.27299878e-01, 8.97443258e-02, 9.55672577e-01,
#[Out]#        6.52168613e-02, 9.36188693e-01, 6.71642746e-01, 5.81872641e-01,
#[Out]#        9.20375785e-01, 3.80724961e-01, 3.73298112e-01, 5.69690110e-01,
#[Out]#        6.01384498e-01, 6.24762276e-01, 5.15456280e-02, 9.53711922e-01,
#[Out]#        2.18627551e-02, 5.33074110e-01, 8.39633773e-01, 4.61441726e-01,
#[Out]#        4.42808797e-01, 4.47622489e-01, 7.30840135e-01, 1.46399556e-02,
#[Out]#        4.41864755e-02, 2.45060995e-01, 7.38446838e-01, 3.90407385e-01,
#[Out]#        2.39745457e-02, 2.10289173e-01, 7.33124611e-01, 5.69653004e-01,
#[Out]#        8.37765836e-01, 6.81523759e-01, 6.25813164e-01, 5.20293546e-02,
#[Out]#        1.28560391e-01, 9.59538929e-01, 7.31110909e-01, 8.84739646e-02,
#[Out]#        2.70880639e-01, 3.16670928e-01, 2.20168904e-01, 9.56040502e-01,
#[Out]#        4.76823732e-01, 2.77213121e-01, 5.85198286e-01, 9.35518411e-01,
#[Out]#        6.59659633e-01, 6.12289364e-02, 9.30403392e-01, 2.06491242e-01,
#[Out]#        7.88065299e-01, 5.45986612e-02, 9.72735029e-01, 9.45800795e-01,
#[Out]#        3.09116380e-01, 8.58818798e-01, 3.23951208e-01, 2.18231611e-01,
#[Out]#        4.63262906e-01, 6.32968950e-01, 1.88980459e-01, 8.62549403e-01,
#[Out]#        7.97905353e-01, 5.74969039e-01, 3.45587673e-02, 2.94507393e-01,
#[Out]#        8.64293667e-01, 7.38449389e-01, 8.89425029e-01, 3.91071890e-01,
#[Out]#        2.52819129e-02, 5.85120359e-01, 8.53738814e-01, 5.53892075e-01,
#[Out]#        9.83661859e-01, 8.57425815e-01, 1.71048788e-01, 9.05604078e-01,
#[Out]#        7.18304994e-01, 5.56331130e-01, 5.04064033e-01, 2.65360107e-01,
#[Out]#        5.54663953e-01, 9.24239349e-01, 1.07083552e-02, 8.09177140e-01,
#[Out]#        1.74828337e-01, 4.00365968e-01, 4.19287023e-01, 8.02600212e-01,
#[Out]#        8.35903867e-01, 2.03461494e-01, 8.10001192e-01, 5.31814014e-01,
#[Out]#        1.81744855e-01, 2.33173977e-01, 7.73711740e-01, 4.76525902e-01,
#[Out]#        1.65525283e-01, 1.25257865e-01, 4.41271048e-01, 6.89446902e-01,
#[Out]#        3.20087707e-01, 1.01245436e-02, 3.21142804e-02, 9.60913458e-01,
#[Out]#        3.34261190e-02, 6.93033915e-01, 3.13600242e-01, 4.25497811e-01,
#[Out]#        8.88822956e-01, 8.19202600e-01, 4.97703717e-01, 3.37802842e-01,
#[Out]#        7.74315489e-01, 4.31322455e-01, 7.79977272e-01, 9.77069784e-01,
#[Out]#        7.55072207e-02, 5.42537080e-01, 3.17182667e-01, 6.50504753e-01,
#[Out]#        8.99211367e-01, 5.39754612e-01, 3.15190473e-01, 5.20767809e-01,
#[Out]#        5.68917018e-01, 9.48874085e-01, 5.61337812e-01, 9.80855353e-01,
#[Out]#        4.66152683e-01, 5.20193464e-01, 1.74813992e-01, 3.76330252e-01,
#[Out]#        4.38791949e-01, 1.39226165e-01, 5.72896849e-01, 4.37271355e-01,
#[Out]#        3.24629569e-01, 5.10127917e-03, 3.64349965e-01, 3.46445122e-01,
#[Out]#        7.92603068e-01, 3.82563699e-01, 9.31988987e-01, 3.17504342e-01,
#[Out]#        3.82521916e-01, 4.61289620e-01, 1.63162468e-01, 9.96571619e-01,
#[Out]#        1.13275575e-01, 6.61731554e-01, 7.30873915e-01, 4.88231430e-01,
#[Out]#        5.20920884e-02, 1.56983412e-01, 9.20350500e-01, 7.26445473e-01,
#[Out]#        8.81068728e-01, 6.73788556e-01, 5.38057081e-01, 3.43719081e-01,
#[Out]#        8.17409575e-01, 1.53882195e-01, 4.25202391e-01, 4.17792976e-01,
#[Out]#        6.12155238e-01, 7.41501126e-01, 4.84382294e-02, 9.39858211e-01,
#[Out]#        2.10275711e-01, 2.98656139e-02, 2.16423288e-01, 4.64932583e-01,
#[Out]#        8.78373049e-01, 7.11855193e-01, 6.76433968e-02, 6.91575868e-01,
#[Out]#        5.77910435e-01, 1.51331526e-01, 7.35498657e-01, 9.48913340e-02,
#[Out]#        9.91963799e-01, 8.07189233e-01, 3.10881557e-02, 8.58929026e-01,
#[Out]#        8.85754344e-01, 1.16173106e-01, 6.51968174e-01, 9.20659743e-01,
#[Out]#        5.46600702e-01, 9.72105590e-01, 8.48746916e-01, 8.16595468e-01,
#[Out]#        7.54757267e-01, 3.70813319e-01, 3.70115442e-01, 4.63263516e-01,
#[Out]#        7.25038433e-02, 7.09432021e-01, 1.67344215e-01, 5.37645622e-02,
#[Out]#        9.30930534e-01, 5.66427619e-01, 6.71806619e-01, 4.97482398e-01,
#[Out]#        3.05962833e-01, 4.00460134e-01, 3.97640053e-01, 6.15006457e-02,
#[Out]#        5.84494471e-02, 5.82221348e-01, 3.35559472e-01, 7.91117529e-01,
#[Out]#        5.47951431e-01, 4.29243474e-01, 2.66460968e-01, 2.25762710e-01,
#[Out]#        4.61797661e-02, 1.83511467e-01, 1.76341230e-01, 5.39376160e-01,
#[Out]#        4.81526944e-01, 9.21637499e-01, 2.70692427e-01, 1.93069468e-01,
#[Out]#        5.20925816e-01, 7.92117638e-01, 6.40410494e-01, 8.89424531e-01,
#[Out]#        4.43113216e-01, 2.42636769e-01, 3.12081666e-01, 4.17890859e-01,
#[Out]#        8.97375891e-01, 7.00061036e-01, 8.21809489e-01, 6.43288741e-01,
#[Out]#        3.81882871e-01, 4.96940559e-01, 7.02942271e-01, 3.66665646e-01,
#[Out]#        8.90287225e-01, 7.86892995e-02, 7.23157270e-01, 2.04860837e-01,
#[Out]#        1.05102696e-01, 2.45944095e-01, 4.69025843e-01, 7.19833110e-01,
#[Out]#        7.13238462e-01, 3.13053251e-01, 2.49624619e-02, 9.56660430e-01,
#[Out]#        3.47555167e-01, 7.52482624e-01, 7.25113453e-01, 7.28575169e-01,
#[Out]#        1.43482702e-01, 3.92461296e-01, 9.01696366e-01, 2.83091094e-01])
# Thu, 28 Oct 2021 10:38:21
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:41:48
# For the first time let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 10:41:53
m1#[Out]# 0.503778993534281
# Thu, 28 Oct 2021 10:42:05
m1#[Out]# 0.503778993534281
# Thu, 28 Oct 2021 10:42:22
mm1#[Out]# 0.33516216619365424
# Thu, 28 Oct 2021 10:42:31
v1#[Out]# 0.08145034220945048
# Thu, 28 Oct 2021 10:44:41
X = np.random.uniform(0,1,1000)# Thu, 28 Oct 2021 10:45:29
# For the second time let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 10:45:42
m2#[Out]# 0.505545136368337
# Thu, 28 Oct 2021 10:45:50
mm2#[Out]# 0.34239639234765284
# Thu, 28 Oct 2021 10:45:55
v2#[Out]# 0.0869074148568292
# Thu, 28 Oct 2021 10:48:46
#With M = 1000 for the first time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:48:52
# For the first time let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 10:48:52
m1#[Out]# 0.5021467986057966
# Thu, 28 Oct 2021 10:48:53
mm1#[Out]# 0.3321499049540173
# Thu, 28 Oct 2021 10:48:54
v1#[Out]# 0.08007857618014709
# Thu, 28 Oct 2021 10:49:57
#With M = 1000 for the first time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:51:54
#With M = 1000 for the third time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:51:54
# For the third time let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 10:52:00
m3#[Out]# 0.5033903077194843
# Thu, 28 Oct 2021 10:52:03
mm3#[Out]# 0.33334332114507353
# Thu, 28 Oct 2021 10:52:11
v3#[Out]# 0.08002154077993634
# Thu, 28 Oct 2021 10:52:41
#With M = 1000 for the fourth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:53:09
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 10:53:26
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 10:53:30
m4#[Out]# 0.4964395111817413
# Thu, 28 Oct 2021 10:53:35
mm4#[Out]# 0.33336575001030927
# Thu, 28 Oct 2021 10:53:44
v4#[Out]# 0.08700056231025333
# Thu, 28 Oct 2021 10:54:10
#With M = 1000 for the fifth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 10:55:28
# For the fifth time let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 10:55:35
m5#[Out]# 0.4951140416281742
# Thu, 28 Oct 2021 10:55:49
mm5#[Out]# 0.3272475410444865
# Thu, 28 Oct 2021 10:55:53
v5#[Out]# 0.08219181864574689
# Thu, 28 Oct 2021 11:01:19
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1000:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    1000:[m3,v3,mm3],
    1000:[m4,v4,mm4],
    1000:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 11:02:28
uniform_table_2 = pd.DataFrame(dict_uniform_2)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cf8580>
# Thu, 28 Oct 2021 11:05:26
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 11:05:27
uniform_table_2 = pd.DataFrame(dict_uniform_2)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cf8d90>
# Thu, 28 Oct 2021 11:08:43
### (b) Gaussian random variable:
# Thu, 28 Oct 2021 11:13:05
?expected_values# Thu, 28 Oct 2021 11:17:46
?normal# Thu, 28 Oct 2021 11:18:29
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Thu, 28 Oct 2021 11:18:56
?normal# Thu, 28 Oct 2021 11:25:53
?uniform# Thu, 28 Oct 2021 11:26:14
uniform??# Thu, 28 Oct 2021 11:27:57
?normal# Thu, 28 Oct 2021 11:34:48
# We are to generate an array X of M normally distributed random numbers with zero mean and variance 1 (that is the standard deviation is also 1)

# Thu, 28 Oct 2021 11:35:02
# We are to generate an array X of M normally distributed
random numbers with zero mean and variance 1 (that is the standard deviation is also 1)

# Thu, 28 Oct 2021 11:35:35
# We are to generate an array X of M normally distributed random numbers with zero mean and variance 1 
# (that is the standard deviation is also 1)

# Thu, 28 Oct 2021 11:41:26
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100

# Thu, 28 Oct 2021 11:43:19
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
X#[Out]# array([-0.38394327, -1.43600586,  0.02668203,  0.73338954, -0.62294229,
#[Out]#        -1.53735502, -0.18277341,  0.29332905,  0.17521265,  1.7865894 ,
#[Out]#        -0.93409101,  0.31784401, -1.07761026, -1.65810516, -0.50132891,
#[Out]#        -0.91390922, -1.98921051,  0.34474392,  0.85659353, -0.67149912,
#[Out]#        -0.18651977,  0.26087662, -0.55158843, -1.67065551,  1.77802294,
#[Out]#        -0.60904338, -1.00472831,  0.39824746, -0.29142062, -0.47057435,
#[Out]#         0.07813039,  0.94738268,  1.63874252,  1.23579054,  0.34612904,
#[Out]#        -0.68221583, -0.15261001, -0.58400706, -0.17567922, -0.69663648,
#[Out]#         0.3488512 , -1.33317277, -0.45423331, -0.32749362,  0.0045792 ,
#[Out]#         2.05739503,  0.85618158,  0.14242767, -0.62883251, -0.56678248,
#[Out]#         1.15252908,  1.78586073, -0.08594859, -0.65409801,  1.30926769,
#[Out]#         0.6852285 , -0.21310752, -0.94773471, -1.01227747,  0.01448652,
#[Out]#        -1.6994608 , -0.85264884, -0.71282653, -0.00970339,  0.69625287,
#[Out]#        -0.92782726, -0.35520381,  0.72868416,  0.16790093,  0.44787556,
#[Out]#        -1.36519269, -0.51649312,  0.35646832,  0.09109399,  0.19032044,
#[Out]#         0.52520677,  0.75677303,  0.35331143, -0.33162826,  1.37324311,
#[Out]#         1.38158138, -0.02770001,  0.82129883, -0.9926816 , -0.6614013 ,
#[Out]#        -0.72295548, -1.37678387, -0.41292869, -0.58818369, -1.29381194,
#[Out]#         1.93090415,  0.84851813, -0.27000058, -0.39248947,  0.95961525,
#[Out]#        -0.47742795, -0.43865137, -0.56523628, -2.10586926, -1.82021909])
# Thu, 28 Oct 2021 11:43:30
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Thu, 28 Oct 2021 11:45:38
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 11:45:51
m1#[Out]# -0.0073524963511813314
# Thu, 28 Oct 2021 11:45:55
mm1#[Out]# 0.7326577059185776
# Thu, 28 Oct 2021 11:46:00
v1#[Out]# 0.7400036835514985
# Thu, 28 Oct 2021 11:46:57
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Thu, 28 Oct 2021 11:47:32
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 11:47:38
m2#[Out]# -0.005486739900234122
# Thu, 28 Oct 2021 11:47:43
mm2#[Out]# 0.9384277478512018
# Thu, 28 Oct 2021 11:47:52
v2#[Out]# 0.9393369805169859
# Thu, 28 Oct 2021 11:48:21
# With M = 10000
X = np.random.normal(0, 1, 10000)
#X# Thu, 28 Oct 2021 11:48:58
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 11:49:02
m3#[Out]# -0.016499317271842864
# Thu, 28 Oct 2021 11:49:07
mm3#[Out]# 0.989128044753939
# Thu, 28 Oct 2021 11:49:11
v3#[Out]# 0.9889547127547778
# Thu, 28 Oct 2021 11:49:46
# With M = 100000
X = np.random.normal(0, 1, 100000)
#X# Thu, 28 Oct 2021 11:50:29
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 11:50:35
m4#[Out]# 0.0018088007986847682
# Thu, 28 Oct 2021 11:50:38
mm4#[Out]# 0.9968934856496956
# Thu, 28 Oct 2021 11:50:47
v4#[Out]# 0.9969001828911953
# Thu, 28 Oct 2021 11:51:41
# With M = 1000000
X = np.random.normal(0, 1, 1000000)
#X# Thu, 28 Oct 2021 11:52:12
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 11:52:26
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 11:52:32
m5#[Out]# 0.0009227069327703732
# Thu, 28 Oct 2021 11:52:36
mm5#[Out]# 0.9998865865202354
# Thu, 28 Oct 2021 11:52:44
v5#[Out]# 0.9998867350188864
# Thu, 28 Oct 2021 11:55:32
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:56:15
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:56:18
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:57:11
Gaussian_table = pd.DataFrame(dict_Gaussian)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cae790>
# Thu, 28 Oct 2021 11:57:23
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:57:24
Gaussian_table = pd.DataFrame(dict_Gaussian)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cae670>
# Thu, 28 Oct 2021 11:58:05
v5#[Out]# 0.9998867350188864
# Thu, 28 Oct 2021 11:58:06
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:58:07
Gaussian_table = pd.DataFrame(dict_Gaussian)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cd6160>
# Thu, 28 Oct 2021 11:58:17
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Thu, 28 Oct 2021 11:58:17
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 11:58:18
m1#[Out]# -0.14576630586557343
# Thu, 28 Oct 2021 11:58:18
mm1#[Out]# 0.8721041333886451
# Thu, 28 Oct 2021 11:58:19
v1#[Out]# 0.859450825720151
# Thu, 28 Oct 2021 11:58:19
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Thu, 28 Oct 2021 11:58:20
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 11:58:20
m2#[Out]# -0.013257874986264337
# Thu, 28 Oct 2021 11:58:20
mm2#[Out]# 1.0679788382326647
# Thu, 28 Oct 2021 11:58:21
v2#[Out]# 1.068871938922436
# Thu, 28 Oct 2021 11:58:21
# With M = 10000
X = np.random.normal(0, 1, 10000)
#X# Thu, 28 Oct 2021 11:58:22
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 11:58:22
m3#[Out]# -0.0017302835812354402
# Thu, 28 Oct 2021 11:58:23
mm3#[Out]# 1.0154488421972618
# Thu, 28 Oct 2021 11:58:23
v3#[Out]# 1.0155474030562957
# Thu, 28 Oct 2021 11:58:24
# With M = 100000
X = np.random.normal(0, 1, 100000)
#X# Thu, 28 Oct 2021 11:58:24
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 11:58:25
m4#[Out]# -0.0013669376855784151
# Thu, 28 Oct 2021 11:58:25
mm4#[Out]# 1.001770372560682
# Thu, 28 Oct 2021 11:58:25
v4#[Out]# 1.001778521827264
# Thu, 28 Oct 2021 11:58:26
# With M = 1000000
X = np.random.normal(0, 1, 1000000)
#X# Thu, 28 Oct 2021 11:58:26
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 11:58:27
m5#[Out]# 0.0015048309428762495
# Thu, 28 Oct 2021 11:58:27
mm5#[Out]# 1.0012001969595807
# Thu, 28 Oct 2021 11:58:28
v5#[Out]# 1.0011989336423472
# Thu, 28 Oct 2021 11:58:29
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:58:29
Gaussian_table = pd.DataFrame(dict_Gaussian)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b04906910>
# Thu, 28 Oct 2021 11:58:58
dict_Gaussian_ = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:58:59
Gaussian_table = pd.DataFrame(dict_Gaussian_)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b049061f0>
# Thu, 28 Oct 2021 11:59:27
dict_Gaussian_ = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 11:59:27
Gaussian_table = DataFrame(dict_Gaussian_)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b02221790>
# Thu, 28 Oct 2021 12:00:07
dict_Gaussian_ = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    '100':[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 12:00:07
Gaussian_table = DataFrame(dict_Gaussian_)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b04906040>
# Thu, 28 Oct 2021 12:00:11
dict_Gaussian_ = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    '100':[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
} vbbnn# Thu, 28 Oct 2021 12:00:17
dict_Gaussian_ = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    '100':[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 12:00:17
Gaussian_table = DataFrame(dict_Gaussian_)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b049062e0>
# Thu, 28 Oct 2021 12:01:12
Gaussian_table = DataFrame(dict_Gaussian)
Gusassian_table.style.hide_index()# Thu, 28 Oct 2021 12:01:22
Gaussian_table = DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cae550>
# Thu, 28 Oct 2021 12:18:18
?number_hits_interval# Thu, 28 Oct 2021 12:46:57
number_hits_interval??# Thu, 28 Oct 2021 12:49:55
# With M = 100
X = np.random.normal(0, 1, 100)# Thu, 28 Oct 2021 12:55:49
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100 hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Thu, 28 Oct 2021 12:57:29
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100, hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Thu, 28 Oct 2021 12:57:44
# With M = 1000
X = np.random.normal(0, 1, 1000)# Thu, 28 Oct 2021 12:58:19
# For M = 1000, hits = h2

h2 = number_hits_interval(X, 0)
h2
#[Out]# 0
# Thu, 28 Oct 2021 13:01:08
?number_hits_interval# Thu, 28 Oct 2021 13:04:07
# With M = 10000
X = np.random.normal(0, 1, 10000)# Thu, 28 Oct 2021 13:04:38
# For M = 1000, hits = h3

h3 = number_hits_interval(X, 0)
h3
#[Out]# 0
# Thu, 28 Oct 2021 13:05:40
# For M = 1000, hits = h4

h4 = number_hits_interval(X, 0)
h4#[Out]# 0
# Thu, 28 Oct 2021 13:08:03
# For M = 100000, hits = h5

h5 = number_hits_interval(X, 0)
h5#[Out]# 0
# Thu, 28 Oct 2021 13:12:32
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Thu, 28 Oct 2021 13:13:26
Gaussian_table = pd.DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b04906e80>
# Thu, 28 Oct 2021 13:14:07
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b03cf8460>
# Thu, 28 Oct 2021 13:53:05
### b) Change the experiment from the previous section by investigating the number of hits within a small interval
[−∆x/2,∆x/2] around the mean value. Use the same number of trials for each experiment and vary the bin
width ∆x.
# Thu, 28 Oct 2021 13:55:38
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:05:15
delta_x = 0.1
# F1 = absolute frquency
# f1 = relative frequency
fx_0 = the value of the PDF f_${X}$(x) at x = 0# Thu, 28 Oct 2021 14:06:30
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:06:55
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:07:32
delta_x = 0.1# Thu, 28 Oct 2021 14:09:51
delta_x = 0.1
# F1 = absolute frquency

# f1 = relative frequency

# bfx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:09:59
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:09:59
delta_x = 0.1
# F1 = absolute frquency

# f1 = relative frequency

# bfx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:13:07
delta_x = 0.1
# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:14:06
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:16:31
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:16:31
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:16:31
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:16:39
F1#[Out]# 39919
# Thu, 28 Oct 2021 14:18:49
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 14:18:49
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:18:49
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:18:52
F1#[Out]# 39629
# Thu, 28 Oct 2021 14:18:52
f1 = # Thu, 28 Oct 2021 14:19:12
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Thu, 28 Oct 2021 14:19:12
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b051942e0>
# Thu, 28 Oct 2021 14:19:19
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 14:19:19
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:19:20
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:19:22
F1#[Out]# 40121
# Thu, 28 Oct 2021 14:19:22
f1 = # Thu, 28 Oct 2021 14:19:48

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:19:48
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:19:48
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:19:50
F1#[Out]# 39952
# Thu, 28 Oct 2021 14:19:50
f1 = # Thu, 28 Oct 2021 14:20:02

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:03
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:03
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:05
F1#[Out]# 39602
# Thu, 28 Oct 2021 14:20:09

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:09
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:10
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:12
F1#[Out]# 39998
# Thu, 28 Oct 2021 14:20:15

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:15
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:15
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:18
F1#[Out]# 39591
# Thu, 28 Oct 2021 14:20:20

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:21
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:21
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:23
F1#[Out]# 39605
# Thu, 28 Oct 2021 14:20:26

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:26
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:26
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:29
F1#[Out]# 39633
# Thu, 28 Oct 2021 14:20:33

X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 14:20:33
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:20:33
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:20:36
F1#[Out]# 40044
# Thu, 28 Oct 2021 14:20:57
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 14:20:58
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:21:15
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 14:21:15
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0 = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:21:15
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:21:18
F1#[Out]# 39647
# Thu, 28 Oct 2021 14:22:56
f1 = F1^/M
f1# Thu, 28 Oct 2021 14:23:01
f1 = F1/M
f1#[Out]# 0.039647
# Thu, 28 Oct 2021 14:24:46
delta_x = 0.1

# Fror delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:24:46
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:24:48
F1#[Out]# 39647
# Thu, 28 Oct 2021 14:24:48
f1 = F1/M
f1#[Out]# 0.039647
# Thu, 28 Oct 2021 14:26:07
fx_0a = f1/delta_x
fx_0a#[Out]# 0.39647
# Thu, 28 Oct 2021 14:26:53
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:28:11
F2 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:28:41
F2#[Out]# 39647
# Thu, 28 Oct 2021 14:28:56
f2 = F2/M# Thu, 28 Oct 2021 14:29:55
fx_0b = f2/delta_x# Thu, 28 Oct 2021 14:30:09
fx_0b = f2/delta_x
fx_0b#[Out]# 0.39647
# Thu, 28 Oct 2021 14:31:10
delta_x = 0.001

# For delta_x = 0.001

# F3 = absolute frquency

# f3 = relative frequency

# fx_0c = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:31:30
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:31:50
F3#[Out]# 395
# Thu, 28 Oct 2021 14:32:02
f3 = F3/M# Thu, 28 Oct 2021 14:33:05
f3 = F3/M
f3#[Out]# 0.000395
# Thu, 28 Oct 2021 14:33:15
f2 = F2/M
f2#[Out]# 0.039647
# Thu, 28 Oct 2021 14:33:51
fx_0c = f3/delta_x# Thu, 28 Oct 2021 14:34:04
fx_0c = f3/delta_x
fx_0c#[Out]# 0.395
# Thu, 28 Oct 2021 14:35:46
delta_x = 0.0001

# For delta_x = 0.0001

# F4 = absolute frquency

# f4 = relative frequency

# fx_0d = the value of the PDF at x = 0# Thu, 28 Oct 2021 14:36:13
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:36:34
F4 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 14:36:36
F4#[Out]# 41
# Thu, 28 Oct 2021 14:37:00
f4 = F4/M# Thu, 28 Oct 2021 14:37:06
f4 = F4/M
f4#[Out]# 4.1e-05
# Thu, 28 Oct 2021 14:37:41
fx_0d = f4/delta_x
fx_0d#[Out]# 0.41
# Thu, 28 Oct 2021 14:45:59
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Thu, 28 Oct 2021 14:47:22
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b051943a0>
# Thu, 28 Oct 2021 15:00:54
?pdf# Thu, 28 Oct 2021 15:13:15
# size of botzh arrays, M = 1000000
X_uiform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 15:14:28
X_noramal = np.random.normal(o, 1, 1000000)# Thu, 28 Oct 2021 15:14:43
X_noramal = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 15:15:27
# size of botzh arrays, M = 1000000
X_u =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 15:15:34
X_n = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 15:19:12
?pdf# Thu, 28 Oct 2021 15:22:55
# size of botzh arrays, M = 1000000
X_uniform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 15:22:55
X_normal = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 15:24:39
?pdf# Thu, 28 Oct 2021 15:26:32
X_u, f_u = pdf(X_uniform, 100)# Thu, 28 Oct 2021 15:30:36
M = 1000000 #size of both arrays
N = 100 # number of bins for the histogram
X_uniform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 15:30:37
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 15:30:37
X_u, f_u = pdf(X_uniform, N)# Thu, 28 Oct 2021 15:32:08
M = 1000000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 15:32:17
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 15:36:05
?plot_pdf# Thu, 28 Oct 2021 15:40:56
??plot_signal# Thu, 28 Oct 2021 15:42:18
plot_pdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 15:44:01
plot_pdf(X_u, f_u, name = "Uniform random variable (uniform):")#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (uniform):(x)$'>)
# Thu, 28 Oct 2021 15:45:32
?pdf# Thu, 28 Oct 2021 15:46:12
?plot_pdf# Thu, 28 Oct 2021 15:46:38
plot_pdf(X_u, f_u, name ='Uniform random variable (uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (uniform)(x)$'>)
# Thu, 28 Oct 2021 15:48:02
plot_pdf(X_u, f_u, title ='Uniform random variable (uniform)')# Thu, 28 Oct 2021 15:48:15
plot_pdf(X_u, f_u, name ='Uniform random variable (uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (uniform)(x)$'>)
# Thu, 28 Oct 2021 15:48:46
plot_pdf(X_u, f_u, name ='Uniform random variable')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable(x)$'>)
# Thu, 28 Oct 2021 15:49:43
plot_pdf(X_u, f_u,  ylabel='$f_(x)$, name ='Uniform random variable')# Thu, 28 Oct 2021 15:50:08
plot_pdf(X_u, f_u,  ylabel='$f_(x)$', name ='Uniform random variable')# Thu, 28 Oct 2021 15:50:40
plot_pdf(X_u, f_u,  ylabel=$f_(x)$, name ='Uniform random variable')# Thu, 28 Oct 2021 15:50:52
plot_pdf(X_u, f_u,  name ='Uniform random variable')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable(x)$'>)
# Thu, 28 Oct 2021 15:54:23
plot_pdf(X_u, f_u,  name =' Gausssian random variable (normal):')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_ Gausssian random variable (normal):(x)$'>)
# Thu, 28 Oct 2021 15:54:34
plot_pdf(X_n, f_n,  name =' Gausssian random variable (normal):')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_ Gausssian random variable (normal):(x)$'>)
# Thu, 28 Oct 2021 16:15:21
plot_signal??# Thu, 28 Oct 2021 16:20:55
plot_pdf(X_u, f_u, xlabel=None,  name = 'Uniform random variable')# Thu, 28 Oct 2021 16:21:15
plot_pdf(X_u, f_u, name = 'Uniform random variable')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable(x)$'>)
# Thu, 28 Oct 2021 16:22:03
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal):')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal):(x)$'>)
# Thu, 28 Oct 2021 16:22:33
plot_pdf??# Thu, 28 Oct 2021 16:24:47
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:29:25
cdf??# Thu, 28 Oct 2021 16:29:49
?cdf# Thu, 28 Oct 2021 16:32:05
M = 1000000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 16:32:44
M = 1000000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:32:44
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:32:45
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 16:32:45
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 16:32:45
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:32:46
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:32:48
M = 1000000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, 1000000)# Thu, 28 Oct 2021 16:33:07
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:34:01
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:34:01
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:34:02
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 16:34:02
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 16:34:03
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:34:04
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:34:38
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:34:57
cdf??# Thu, 28 Oct 2021 16:36:58
cdf??# Thu, 28 Oct 2021 16:39:10
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:39:10
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:39:10
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 16:39:11
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 16:40:16
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:40:41
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:40:59
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 16:40:59
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:40:59
plot_cdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:41:20
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:41:20
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:41:44
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:41:44
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:41:44
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 16:41:45
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 16:41:45
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:41:45
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:41:46
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:41:47
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:41:47
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 16:41:47
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 16:41:48
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:41:48
plot_cdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:42:18
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:42:20
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:42:27
plot_cdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:42:37
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 16:42:37
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 16:42:38
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 16:42:38
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 16:42:38
plot_cdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 16:42:38
plot_cdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 16:43:56
## Experiment 6: Addition of a constant value# Thu, 28 Oct 2021 17:13:45
gen_b??# Thu, 28 Oct 2021 17:13:55
b = gen_b# Thu, 28 Oct 2021 17:14:02
b = gen_b
b#[Out]# <function dsplab.lab1.gen_b()>
# Thu, 28 Oct 2021 17:14:12
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 17:21:14
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X

#[Out]# array([0.90054669, 0.54112053, 0.09310604, ..., 0.56596364, 0.59512221,
#[Out]#        0.81136359])
# Thu, 28 Oct 2021 17:22:15
Y = X + b
Y#[Out]# array([3.40054669, 3.04112053, 2.59310604, ..., 3.06596364, 3.09512221,
#[Out]#        3.31136359])
# Thu, 28 Oct 2021 17:27:54
# Y_u: bin centers 
# f_u : value of the estimated PDF
Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 17:27:59
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 17:29:37
plot(pdfY_u, f_u)# Thu, 28 Oct 2021 17:29:43
plot_pdf(pdfY_u, f_u)# Thu, 28 Oct 2021 17:30:00
Y = X + b
Y#[Out]# array([3.40054669, 3.04112053, 2.59310604, ..., 3.06596364, 3.09512221,
#[Out]#        3.31136359])
# Thu, 28 Oct 2021 17:30:01
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 17:30:01
plot_pdf(pdfY_u, f_u)# Thu, 28 Oct 2021 17:30:13
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 17:39:04
plot_cdf(X_u, f_u)# Thu, 28 Oct 2021 17:39:16
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Thu, 28 Oct 2021 17:39:16
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0b553dc0>
# Thu, 28 Oct 2021 17:39:17
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 17:39:17
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 17:39:17
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 17:39:17
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 17:39:17
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 17:39:18
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 17:39:19
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 17:39:19
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 17:39:19
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 17:39:19
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 17:39:20
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 17:39:21
plot_cdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 17:39:41
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 17:39:54
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 17:39:54
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 17:39:55
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 17:39:55
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 17:39:55
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 17:39:55
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 17:39:56
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 17:39:56
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.41765649, 0.09893689, 0.34307485, ..., 0.74652968, 0.1478405 ,
#[Out]#        0.82994595])
# Thu, 28 Oct 2021 17:39:56
Y = X + b
Y#[Out]# array([2.91765649, 2.59893689, 2.84307485, ..., 3.24652968, 2.6478405 ,
#[Out]#        3.32994595])
# Thu, 28 Oct 2021 17:39:56
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 17:39:57
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 18:16:37
# For random variable X, let mx = mean, mmx = mean square and vx = variance
mx mmx, vx = expected_values(X)# Thu, 28 Oct 2021 18:16:58
# For random variable X, let mx = mean, mmx = mean square and vx = variance
mx,mmx, vx = expected_values(X)# Thu, 28 Oct 2021 18:17:01
mx#[Out]# 0.5013360962658331
# Thu, 28 Oct 2021 18:17:05
mmx#[Out]# 0.33448015564238875
# Thu, 28 Oct 2021 18:17:09
vx#[Out]# 0.08314310565438071
# Thu, 28 Oct 2021 18:20:23
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y,mm_y, v_y = expected_values(X)# Thu, 28 Oct 2021 18:20:29
m_y#[Out]# 0.5013360962658331
# Thu, 28 Oct 2021 18:20:35
v_y#[Out]# 0.08314310565438071
# Thu, 28 Oct 2021 18:20:52
mm_y#[Out]# 0.33448015564238875
# Thu, 28 Oct 2021 18:20:58
v_y#[Out]# 0.08314310565438071
# Thu, 28 Oct 2021 18:28:58
dict_add = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 18:29:11
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x,mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 18:29:12
m_x#[Out]# 0.5013360962658331
# Thu, 28 Oct 2021 18:29:24
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 18:29:25
m_x#[Out]# 0.5013360962658331
# Thu, 28 Oct 2021 18:29:25
mm_x#[Out]# 0.33448015564238875
# Thu, 28 Oct 2021 18:29:26
v_x#[Out]# 0.08314310565438071
# Thu, 28 Oct 2021 18:29:26
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y,mm_y, v_y = expected_values(X)# Thu, 28 Oct 2021 18:29:27
m_y#[Out]# 0.5013360962658331
# Thu, 28 Oct 2021 18:29:28
mm_y#[Out]# 0.33448015564238875
# Thu, 28 Oct 2021 18:29:28
v_y#[Out]# 0.08314310565438071
# Thu, 28 Oct 2021 18:29:30
dict_add = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 18:30:31
table_add = DataFrame(dict_add)
table_add.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e993490>
# Thu, 28 Oct 2021 18:34:05
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 18:34:06
table_addition = DataFrame(dict_add)
table_add.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e82ce20>
# Thu, 28 Oct 2021 18:44:50
## Experiment 7: Multiplication with a constant facto# Thu, 28 Oct 2021 18:50:00
a = gen_a()# Thu, 28 Oct 2021 18:50:08
a = gen_a()
a#[Out]# 2.0
# Thu, 28 Oct 2021 18:50:50
### a) First, investigate the effect on the PDF.# Thu, 28 Oct 2021 18:56:43
# array of size M = 100000
X = normal(0, 1, 100000)
X#[Out]# array([ 0.63718152, -0.99516104, -0.52049947, ...,  0.98442223,
#[Out]#        -0.19428462,  2.04629805])
# Thu, 28 Oct 2021 19:00:08
Y = a * X
Y#[Out]# array([ 1.27436304, -1.99032207, -1.04099893, ...,  1.96884446,
#[Out]#        -0.38856923,  4.09259611])
# Thu, 28 Oct 2021 19:00:26
Z = X/a
Z#[Out]# array([ 0.31859076, -0.49758052, -0.26024973, ...,  0.49221112,
#[Out]#        -0.09714231,  1.02314903])
# Thu, 28 Oct 2021 19:03:04
pdf??# Thu, 28 Oct 2021 19:15:51
x, fx = pdf(X, 100)# Thu, 28 Oct 2021 19:16:15
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 19:16:39
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 19:17:12
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 19:23:06
x, fx = pdf(X, 100)# Thu, 28 Oct 2021 19:23:07
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 19:23:07
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 19:24:30
fig, ax = plot_pdf(X, fx)# Thu, 28 Oct 2021 19:24:50
fig, ax = plot_pdf(x, fx)# Thu, 28 Oct 2021 19:38:01
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 19:38:02
fig, ax = plot_pdf(x, fx)# Thu, 28 Oct 2021 19:40:20
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 19:42:00
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis(’auto’)

# Thu, 28 Oct 2021 19:42:19
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-9.763889936839742,
#[Out]#  10.257310534624427,
#[Out]#  -0.04062020162872512,
#[Out]#  0.8530242342032275)
# Thu, 28 Oct 2021 20:01:29
### b) Next, investigate the effect on the corresponding moments.# Thu, 28 Oct 2021 20:04:57
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 20:05:39
Y = a * X# Thu, 28 Oct 2021 20:07:33
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 20:07:39
m_x#[Out]# 0.5003996824576856
# Thu, 28 Oct 2021 20:08:14
m_x#[Out]# 0.5003996824576856
# Thu, 28 Oct 2021 20:09:07
mm_x#[Out]# 0.33360076233066577
# Thu, 28 Oct 2021 20:09:13
v_x#[Out]# 0.08320175214443462
# Thu, 28 Oct 2021 20:31:11
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 20:33:56
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 20:33:57
Y = a * X# Thu, 28 Oct 2021 20:33:57
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 20:33:57
m_x#[Out]# 0.4992484309319511
# Thu, 28 Oct 2021 20:33:58
mm_x#[Out]# 0.33263762606271813
# Thu, 28 Oct 2021 20:33:58
v_x#[Out]# 0.08338946416934472
# Thu, 28 Oct 2021 20:33:58
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 20:34:57
# For random variable X, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 20:35:35
m_y#[Out]# 0.9984968618639022
# Thu, 28 Oct 2021 20:35:42
mm_y#[Out]# 1.3305505042508725
# Thu, 28 Oct 2021 20:35:48
v_y#[Out]# 0.33355785667737886
# Thu, 28 Oct 2021 20:39:19
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 20:39:20
table_multiplication = DataFrame(dict_multiplication)
table_multiplicaton.style.hide_index()# Thu, 28 Oct 2021 20:39:43
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 20:39:43
table_multiplication = DataFrame(dict_multiplication)
table_multiplicaton.style.hide_index()# Thu, 28 Oct 2021 20:40:37
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e931c10>
# Thu, 28 Oct 2021 20:48:49
a = gen_a()
a#[Out]# 2.0
# Thu, 28 Oct 2021 20:48:50
# array of size M = 100000
X = normal(0, 1, 100000)
X#[Out]# array([ 0.9209915 , -0.72649404,  1.02881181, ...,  1.08554571,
#[Out]#        -1.97303231, -0.99160757])
# Thu, 28 Oct 2021 20:48:50
Y = a * X
Y#[Out]# array([ 1.84198301, -1.45298809,  2.05762362, ...,  2.17109143,
#[Out]#        -3.94606463, -1.98321515])
# Thu, 28 Oct 2021 20:48:50
Z = X/a
Z#[Out]# array([ 0.46049575, -0.36324702,  0.51440591, ...,  0.54277286,
#[Out]#        -0.98651616, -0.49580379])
# Thu, 28 Oct 2021 20:48:51
x, fx = pdf(X, 100)# Thu, 28 Oct 2021 20:48:51
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 20:48:51
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 20:48:52
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-9.960203390695808,
#[Out]#  9.217441356323546,
#[Out]#  -0.04041946809555303,
#[Out]#  0.8488088300066132)
# Thu, 28 Oct 2021 20:48:53
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 20:48:53
Y = a * X# Thu, 28 Oct 2021 20:48:53
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 20:48:53
m_x#[Out]# 0.5003488297835176
# Thu, 28 Oct 2021 20:48:53
mm_x#[Out]# 0.3334364425384906
# Thu, 28 Oct 2021 20:48:54
v_x#[Out]# 0.08308832195597474
# Thu, 28 Oct 2021 20:48:54
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 20:48:54
m_y#[Out]# 1.0006976595670352
# Thu, 28 Oct 2021 20:48:55
mm_y#[Out]# 1.3337457701539623
# Thu, 28 Oct 2021 20:48:55
v_y#[Out]# 0.33235328782389895
# Thu, 28 Oct 2021 20:48:55
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 20:48:55
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0ef6f2b0>
# Thu, 28 Oct 2021 20:54:48
Mean: # Thu, 28 Oct 2021 21:03:46
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 21:03:46
m_x#[Out]# 0.5003488297835176
# Thu, 28 Oct 2021 21:03:46
mm_x#[Out]# 0.3334364425384906
# Thu, 28 Oct 2021 21:03:46
v_x#[Out]# 0.08308832195597474
# Thu, 28 Oct 2021 21:03:47
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y,mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 21:03:47
m_y#[Out]# 1.0006976595670352
# Thu, 28 Oct 2021 21:03:48
mm_y#[Out]# 1.3337457701539623
# Thu, 28 Oct 2021 21:03:48
v_y#[Out]# 0.33235328782389895
# Thu, 28 Oct 2021 21:03:50
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 21:03:50
table_addition = DataFrame(dict_add)
table_add.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e82c100>
# Thu, 28 Oct 2021 21:36:41
?number_hits_interval# Thu, 28 Oct 2021 21:37:36
number_hits_interval??# Thu, 28 Oct 2021 21:44:12
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 21:44:12
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.98538547, 0.08569569, 0.60857247, ..., 0.73568043, 0.09208525,
#[Out]#        0.93287514])
# Thu, 28 Oct 2021 21:44:13
Y = X + b
Y#[Out]# array([3.48538547, 2.58569569, 3.10857247, ..., 3.23568043, 2.59208525,
#[Out]#        3.43287514])
# Thu, 28 Oct 2021 21:44:13
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 21:44:13
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 21:44:22
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 21:44:22
m_x#[Out]# 0.5016507234157539
# Thu, 28 Oct 2021 21:44:22
mm_x#[Out]# 0.33536552336284753
# Thu, 28 Oct 2021 21:44:23
v_x#[Out]# 0.08371291218842035
# Thu, 28 Oct 2021 21:44:23
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y,mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 21:44:23
m_y#[Out]# 3.0016507234157537
# Thu, 28 Oct 2021 21:44:24
mm_y#[Out]# 9.093619140441618
# Thu, 28 Oct 2021 21:44:24
v_y#[Out]# 0.08371291218842035
# Thu, 28 Oct 2021 21:44:26
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 21:44:27
table_addition = DataFrame(dict_add)
table_add.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0ee67f40>
# Thu, 28 Oct 2021 21:45:24
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Thu, 28 Oct 2021 21:45:25
P0, Pe = gen_probs()# Thu, 28 Oct 2021 21:45:25
Pe#[Out]# 0.019999999999999997
# Thu, 28 Oct 2021 21:45:26
P0#[Out]# 0.8
# Thu, 28 Oct 2021 21:45:26
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Thu, 28 Oct 2021 21:45:27
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Thu, 28 Oct 2021 21:45:27
M = 100# Thu, 28 Oct 2021 21:45:28
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 21:45:28
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
#[Out]#        1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 21:45:28
f0, f1 = rates(rx)# Thu, 28 Oct 2021 21:45:29
f1#[Out]# 0.17
# Thu, 28 Oct 2021 21:45:29
f0#[Out]# 0.83
# Thu, 28 Oct 2021 21:45:29
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Thu, 28 Oct 2021 21:45:29
rx_a = bsc(tx_a, Pe)
#rx_a# Thu, 28 Oct 2021 21:45:29
f0_a, f1_a = rates(rx_a)# Thu, 28 Oct 2021 21:45:30
f1_a#[Out]# 0.22
# Thu, 28 Oct 2021 21:45:30
f0_a#[Out]# 0.78
# Thu, 28 Oct 2021 21:45:30
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 21:45:30
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 1, 0, ..., 1, 0, 0])
# Thu, 28 Oct 2021 21:45:30
f0_b, f1_b = rates(rx_b)# Thu, 28 Oct 2021 21:45:31
f1_b#[Out]# 0.213
# Thu, 28 Oct 2021 21:45:31
f0_b#[Out]# 0.787
# Thu, 28 Oct 2021 21:45:31
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([1, 0, 0, ..., 0, 0, 1])
# Thu, 28 Oct 2021 21:45:31
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([1, 0, 0, ..., 0, 0, 1])
# Thu, 28 Oct 2021 21:45:31
f0_c, f1_c = rates(rx_c)# Thu, 28 Oct 2021 21:45:32
f1_c#[Out]# 0.2191
# Thu, 28 Oct 2021 21:45:32
f0_c#[Out]# 0.7809
# Thu, 28 Oct 2021 21:45:32
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 0, 1, ..., 0, 0, 0])
# Thu, 28 Oct 2021 21:45:32
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 0, 1, ..., 1, 0, 0])
# Thu, 28 Oct 2021 21:45:32
f0_d, f1_d = rates(rx_d)# Thu, 28 Oct 2021 21:45:33
f1_d#[Out]# 0.21377
# Thu, 28 Oct 2021 21:45:33
f0_d#[Out]# 0.78623
# Thu, 28 Oct 2021 21:45:33
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Thu, 28 Oct 2021 21:45:33
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e931430>
# Thu, 28 Oct 2021 21:45:34
tx_u = random_binary(1000, P0)
#tx_u# Thu, 28 Oct 2021 21:45:35
rx_u = bsc(tx_u, Pe)
#rx_u# Thu, 28 Oct 2021 21:45:35
f0_u, f1_u = rates(rx_u)# Thu, 28 Oct 2021 21:45:35
f1_u#[Out]# 0.212
# Thu, 28 Oct 2021 21:45:35
f0_u#[Out]# 0.788
# Thu, 28 Oct 2021 21:45:36
tx_v = random_binary(1000, P0)
#tx_v# Thu, 28 Oct 2021 21:45:36
rx_v = bsc(tx_v, Pe)
#rx_v# Thu, 28 Oct 2021 21:45:36
f0_v, f1_v = rates(rx_v)# Thu, 28 Oct 2021 21:45:36
f1_v#[Out]# 0.245
# Thu, 28 Oct 2021 21:45:37
f0_v#[Out]# 0.755
# Thu, 28 Oct 2021 21:45:37
tx_w = random_binary(1000, P0)
#tx_w# Thu, 28 Oct 2021 21:45:37
rx_w = bsc(tx_w, Pe)
#rx_w# Thu, 28 Oct 2021 21:45:37
f0_w, f1_w = rates(rx_w)# Thu, 28 Oct 2021 21:45:37
f1_w#[Out]# 0.206
# Thu, 28 Oct 2021 21:45:38
f0_w#[Out]# 0.794
# Thu, 28 Oct 2021 21:45:38
tx_y = random_binary(1000, P0)
#tx_y# Thu, 28 Oct 2021 21:45:38
rx_y = bsc(tx_y, Pe)
#rx_y# Thu, 28 Oct 2021 21:45:38
f0_y, f1_y = rates(rx_y)# Thu, 28 Oct 2021 21:45:39
f1_y#[Out]# 0.224
# Thu, 28 Oct 2021 21:45:39
f0_y#[Out]# 0.776
# Thu, 28 Oct 2021 21:45:39
tx_z = random_binary(1000, P0)
#tx_z# Thu, 28 Oct 2021 21:45:39
rx_z = bsc(tx_z, Pe)
#rx_z# Thu, 28 Oct 2021 21:45:40
f0_z, f1_z = rates(rx_z)# Thu, 28 Oct 2021 21:45:40
f1_z#[Out]# 0.197
# Thu, 28 Oct 2021 21:45:40
f0_z#[Out]# 0.803
# Thu, 28 Oct 2021 21:45:40
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Thu, 28 Oct 2021 21:45:40
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e931b80>
# Thu, 28 Oct 2021 21:45:41
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 21:45:42
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# Thu, 28 Oct 2021 21:45:42
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.8636363636363636
# Thu, 28 Oct 2021 21:45:43
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Thu, 28 Oct 2021 21:45:43
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Thu, 28 Oct 2021 21:45:43
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.934010152284264
# Thu, 28 Oct 2021 21:45:43
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Thu, 28 Oct 2021 21:45:44
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Thu, 28 Oct 2021 21:45:44
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9242424242424242
# Thu, 28 Oct 2021 21:45:44
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Thu, 28 Oct 2021 21:45:44
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Thu, 28 Oct 2021 21:45:45
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9227682575650286
# Thu, 28 Oct 2021 21:45:45
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 21:45:45
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 21:45:45
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.924638527822404
# Thu, 28 Oct 2021 21:45:46
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Thu, 28 Oct 2021 21:45:46
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e93c520>
# Thu, 28 Oct 2021 21:45:47
sample_1 = rv1(10000)
sample_1#[Out]# array([ 0.0718031 , -1.64228526, -0.58119827, ...,  1.34894151,
#[Out]#        -1.10741396, -0.66654608])
# Thu, 28 Oct 2021 21:45:48
sample_2 = rv2(10000)
sample_2#[Out]# array([5.5, 7.5, 6.5, ..., 4.5, 3.5, 5.5])
# Thu, 28 Oct 2021 21:45:48
sample_3 = rv3(10000)
sample_3#[Out]# array([0.15510288, 0.79182082, 0.82919003, ..., 0.23521145, 0.56365207,
#[Out]#        0.6774397 ])
# Thu, 28 Oct 2021 21:45:48
plot_scatter(sample_1)# Thu, 28 Oct 2021 21:45:48
plot_scatter(sample_2)# Thu, 28 Oct 2021 21:45:49
plot_scatter(sample_3)# Thu, 28 Oct 2021 21:45:50
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Thu, 28 Oct 2021 21:45:50
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0689deb0>
# Thu, 28 Oct 2021 21:45:54
#With M = 100
X = np.random.uniform(0,1,100)
#X# Thu, 28 Oct 2021 21:45:55
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 21:45:55
m1#[Out]# 0.48551159861837456
# Thu, 28 Oct 2021 21:45:57
mm1#[Out]# 0.3160731792533661
# Thu, 28 Oct 2021 21:45:58
v1#[Out]# 0.08116329985898643
# Thu, 28 Oct 2021 21:45:59
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:45:59
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 21:45:59
m2#[Out]# 0.4942241703042977
# Thu, 28 Oct 2021 21:46:00
mm2#[Out]# 0.3325717055211414
# Thu, 28 Oct 2021 21:46:00
v2#[Out]# 0.0884025775857556
# Thu, 28 Oct 2021 21:46:00
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.7396133 , 0.83415909, 0.49140119, ..., 0.5638953 , 0.16635275,
#[Out]#        0.66769557])
# Thu, 28 Oct 2021 21:46:00
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 21:46:01
m3#[Out]# 0.5037234094222115
# Thu, 28 Oct 2021 21:46:01
mm3#[Out]# 0.33830490727024237
# Thu, 28 Oct 2021 21:46:01
v3#[Out]# 0.08457609167947339
# Thu, 28 Oct 2021 21:46:02
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.51923577, 0.60866164, 0.94974305, ..., 0.50607048, 0.00346399,
#[Out]#        0.90272544])
# Thu, 28 Oct 2021 21:46:02
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 21:46:02
m4#[Out]# 0.4995806777136161
# Thu, 28 Oct 2021 21:46:02
mm4#[Out]# 0.3325938451098833
# Thu, 28 Oct 2021 21:46:03
v4#[Out]# 0.0830138217033045
# Thu, 28 Oct 2021 21:46:03
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.1318121 , 0.41578169, 0.70907663, ..., 0.45766865, 0.24224612,
#[Out]#        0.87713679])
# Thu, 28 Oct 2021 21:46:03
#With M = 1000000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 21:46:03
m5#[Out]# 0.5001222207332022
# Thu, 28 Oct 2021 21:46:03
mm5#[Out]# 0.33345970442522127
# Thu, 28 Oct 2021 21:46:04
v5 #[Out]# 0.0833375520916636
# Thu, 28 Oct 2021 21:46:04
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 21:46:05
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0c491fa0>
# Thu, 28 Oct 2021 21:46:06
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Thu, 28 Oct 2021 21:46:09
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b05928550>
# Thu, 28 Oct 2021 21:47:54
#With M = 1000 for the first time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:47:54
# For the first time let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 21:47:54
m1#[Out]# 0.507552163625021
# Thu, 28 Oct 2021 21:47:55
mm1#[Out]# 0.33875088320037733
# Thu, 28 Oct 2021 21:47:55
v1#[Out]# 0.08122290730724446
# Thu, 28 Oct 2021 21:47:55
#With M = 1000 for the second time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:47:55
# For the second time let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 21:47:56
m2#[Out]# 0.49697357452544305
# Thu, 28 Oct 2021 21:47:56
mm2#[Out]# 0.3294812679096561
# Thu, 28 Oct 2021 21:47:56
v2#[Out]# 0.08258111524830829
# Thu, 28 Oct 2021 21:47:56
#With M = 1000 for the third time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:47:56
# For the third time let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 21:47:57
m3#[Out]# 0.49726574817931724
# Thu, 28 Oct 2021 21:47:57
mm3#[Out]# 0.33026151679037924
# Thu, 28 Oct 2021 21:47:57
v3#[Out]# 0.08307136384188497
# Thu, 28 Oct 2021 21:47:57
#With M = 1000 for the fourth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:47:58
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 21:47:58
m4#[Out]# 0.48323024777816137
# Thu, 28 Oct 2021 21:47:58
mm4#[Out]# 0.3206634680339172
# Thu, 28 Oct 2021 21:47:58
v4#[Out]# 0.08723923490107505
# Thu, 28 Oct 2021 21:47:58
#With M = 1000 for the fifth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 21:47:59
# For the fifth time let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 21:47:59
m5#[Out]# 0.504281622591451
# Thu, 28 Oct 2021 21:47:59
mm5#[Out]# 0.34068940805433406
# Thu, 28 Oct 2021 21:47:59
v5#[Out]# 0.08647592909996743
# Thu, 28 Oct 2021 21:48:00
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 21:48:00
uniform_table_2 = pd.DataFrame(dict_uniform_2)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b06701c70>
# Thu, 28 Oct 2021 21:48:03
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Thu, 28 Oct 2021 21:48:04
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 21:48:04
m1#[Out]# 0.17444831648876138
# Thu, 28 Oct 2021 21:48:04
mm1#[Out]# 1.030926502420476
# Thu, 28 Oct 2021 21:48:04
v1#[Out]# 1.0106002901966797
# Thu, 28 Oct 2021 21:48:05
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Thu, 28 Oct 2021 21:48:05
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 21:48:05
m2#[Out]# -0.008959867738498634
# Thu, 28 Oct 2021 21:48:05
mm2#[Out]# 0.9904293694750389
# Thu, 28 Oct 2021 21:48:06
v2#[Out]# 0.9913404306758233
# Thu, 28 Oct 2021 21:48:06
# With M = 10000
X = np.random.normal(0, 1, 10000)
#X# Thu, 28 Oct 2021 21:48:06
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 21:48:06
m3#[Out]# -0.012911283561105845
# Thu, 28 Oct 2021 21:48:06
mm3#[Out]# 0.9887733362219163
# Thu, 28 Oct 2021 21:48:07
v3#[Out]# 0.9887055055292739
# Thu, 28 Oct 2021 21:48:07
# With M = 100000
X = np.random.normal(0, 1, 100000)
#X# Thu, 28 Oct 2021 21:48:07
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 21:48:07
m4#[Out]# -0.001211058884879334
# Thu, 28 Oct 2021 21:48:08
mm4#[Out]# 0.9976779681031838
# Thu, 28 Oct 2021 21:48:08
v4#[Out]# 0.9976864783043442
# Thu, 28 Oct 2021 21:48:08
# With M = 1000000
X = np.random.normal(0, 1, 1000000)
#X# Thu, 28 Oct 2021 21:48:08
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 21:48:09
m5#[Out]# -0.0011059468181146015
# Thu, 28 Oct 2021 21:48:09
mm5#[Out]# 0.999537785117664
# Thu, 28 Oct 2021 21:48:09
v5#[Out]# 0.9995375615368608
# Thu, 28 Oct 2021 21:48:10
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 21:48:10
Gaussian_table = pd.DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b059284f0>
# Thu, 28 Oct 2021 21:48:11
# Use function "normal" to generate an array X of M zero-mean Gaussian distributed random numbers of unit variance
# For unit variance, standard deviation is also 1
# Thu, 28 Oct 2021 21:48:12
# With M = 100
X = np.random.normal(0, 1, 100)# Thu, 28 Oct 2021 21:48:13
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100, hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Thu, 28 Oct 2021 21:48:13
# With M = 1000
X = np.random.normal(0, 1, 1000)# Thu, 28 Oct 2021 21:48:15
# For M = 1000, hits = h2

h2 = number_hits_interval(X, 0)
h2
#[Out]# 0
# Thu, 28 Oct 2021 21:48:16
# With M = 10000
X = np.random.normal(0, 1, 10000)# Thu, 28 Oct 2021 21:48:16
# For M = 10000, hits = h3

h3 = number_hits_interval(X, 0)
h3
#[Out]# 0
# Thu, 28 Oct 2021 21:48:16
# With M = 100000
X = np.random.normal(0, 1, 100000)# Thu, 28 Oct 2021 21:48:16
# For M = 100000, hits = h4

h4 = number_hits_interval(X, 0)
h4#[Out]# 0
# Thu, 28 Oct 2021 21:48:17
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 21:48:17
# For M = 100000, hits = h5

h5 = number_hits_interval(X, 0)
h5#[Out]# 0
# Thu, 28 Oct 2021 21:48:19
number_hits_interval??# Thu, 28 Oct 2021 21:48:19
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Thu, 28 Oct 2021 21:48:19
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b066d9d60>
# Thu, 28 Oct 2021 21:48:26
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 21:48:27
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Thu, 28 Oct 2021 21:48:27
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 21:48:29
F1#[Out]# 40159
# Thu, 28 Oct 2021 21:48:29
f1 = F1/M
f1#[Out]# 0.040159
# Thu, 28 Oct 2021 21:48:29
fx_0a = f1/delta_x
fx_0a#[Out]# 0.40159
# Thu, 28 Oct 2021 21:48:29
delta_x = 0.01

# For delta_x = 0.01

# F2 = absolute frquency

# f2 = relative frequency

# fx_0b = the value of the PDF at x = 0# Thu, 28 Oct 2021 21:48:29
F2 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 21:48:31
F2#[Out]# 4040
# Thu, 28 Oct 2021 21:48:31
f2 = F2/M
f2#[Out]# 0.00404
# Thu, 28 Oct 2021 21:48:31
fx_0b = f2/delta_x
fx_0b#[Out]# 0.404
# Thu, 28 Oct 2021 21:48:31
delta_x = 0.001

# For delta_x = 0.001

# F3 = absolute frquency

# f3 = relative frequency

# fx_0c = the value of the PDF at x = 0# Thu, 28 Oct 2021 21:48:31
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 21:48:34
F3#[Out]# 405
# Thu, 28 Oct 2021 21:48:34
f3 = F3/M
f3#[Out]# 0.000405
# Thu, 28 Oct 2021 21:48:34
fx_0c = f3/delta_x
fx_0c#[Out]# 0.40499999999999997
# Thu, 28 Oct 2021 21:48:34
delta_x = 0.0001

# For delta_x = 0.0001

# F4 = absolute frquency

# f4 = relative frequency

# fx_0d = the value of the PDF at x = 0# Thu, 28 Oct 2021 21:48:34
F4 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 21:48:36
F4#[Out]# 42
# Thu, 28 Oct 2021 21:48:36
f4 = F4/M
f4#[Out]# 4.2e-05
# Thu, 28 Oct 2021 21:48:36
fx_0d = f4/delta_x
fx_0d#[Out]# 0.41999999999999993
# Thu, 28 Oct 2021 21:48:36
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Thu, 28 Oct 2021 21:48:36
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b065f6430>
# Thu, 28 Oct 2021 21:48:36
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 21:48:36
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 21:48:36
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 21:48:36
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 21:48:36
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 21:48:36
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 21:48:36
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 21:48:37
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 21:48:38
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 21:48:38
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 21:48:38
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 21:48:39
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 21:48:41
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 21:48:41
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.12516388, 0.58258367, 0.33869421, ..., 0.67604542, 0.25682262,
#[Out]#        0.18554516])
# Thu, 28 Oct 2021 21:48:42
Y = X + b
Y#[Out]# array([2.62516388, 3.08258367, 2.83869421, ..., 3.17604542, 2.75682262,
#[Out]#        2.68554516])
# Thu, 28 Oct 2021 21:48:42
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 21:48:42
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 21:48:44
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 21:48:44
m_x#[Out]# 0.498983481268396
# Thu, 28 Oct 2021 21:48:45
mm_x#[Out]# 0.3322095792003213
# Thu, 28 Oct 2021 21:48:46
v_x#[Out]# 0.08322589688056244
# Thu, 28 Oct 2021 21:48:48
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y,mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 21:48:49
m_y#[Out]# 2.998983481268396
# Thu, 28 Oct 2021 21:48:49
mm_y#[Out]# 9.0771269855423
# Thu, 28 Oct 2021 21:48:49
v_y#[Out]# 0.08322589688056244
# Thu, 28 Oct 2021 21:48:50
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 21:48:50
table_addition = DataFrame(dict_add)
table_add.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b11bb6520>
# Thu, 28 Oct 2021 21:48:52
a = gen_a()
a#[Out]# 2.0
# Thu, 28 Oct 2021 21:48:53
# array of size M = 100000
X = normal(0, 1, 100000)
X#[Out]# array([ 0.27105273, -0.53278953,  1.5790464 , ...,  1.30157649,
#[Out]#         1.06228255,  0.54725985])
# Thu, 28 Oct 2021 21:48:53
Y = a * X
Y#[Out]# array([ 0.54210547, -1.06557906,  3.1580928 , ...,  2.60315298,
#[Out]#         2.1245651 ,  1.0945197 ])
# Thu, 28 Oct 2021 21:48:54
Z = X/a
Z#[Out]# array([ 0.13552637, -0.26639477,  0.7895232 , ...,  0.65078825,
#[Out]#         0.53114127,  0.27362993])
# Thu, 28 Oct 2021 21:48:54
x, fx = pdf(X, 100)# Thu, 28 Oct 2021 21:48:54
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 21:48:55
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 21:48:56
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-9.916634137373968,
#[Out]#  10.837715788041336,
#[Out]#  -0.039720492473266325,
#[Out]#  0.8341303419385926)
# Thu, 28 Oct 2021 21:48:58
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 21:48:59
Y = a * X# Thu, 28 Oct 2021 21:48:59
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 21:49:00
m_x#[Out]# 0.4999977862158755
# Thu, 28 Oct 2021 21:49:00
mm_x#[Out]# 0.3333365600051592
# Thu, 28 Oct 2021 21:49:00
v_x#[Out]# 0.08333960718045458
# Thu, 28 Oct 2021 21:49:00
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 21:49:01
m_y#[Out]# 0.999995572431751
# Thu, 28 Oct 2021 21:49:01
mm_y#[Out]# 1.3333462400206368
# Thu, 28 Oct 2021 21:49:02
v_y#[Out]# 0.3333584287218183
# Thu, 28 Oct 2021 21:49:03
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 21:49:04
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b116956d0>
# Thu, 28 Oct 2021 22:04:09
table_addition = DataFrame(dict_add)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b119f8ee0>
# Thu, 28 Oct 2021 22:04:18
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:04:18
table_addition = DataFrame(dict_add)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b11a6d250>
# Thu, 28 Oct 2021 22:04:49
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b11a6d550>
# Thu, 28 Oct 2021 22:06:12
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 22:06:13
m_y#[Out]# 0.999995572431751
# Thu, 28 Oct 2021 22:06:14
mm_y#[Out]# 1.3333462400206368
# Thu, 28 Oct 2021 22:06:15
v_y#[Out]# 0.3333584287218183
# Thu, 28 Oct 2021 22:06:16
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:06:17
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b11a5bfd0>
# Thu, 28 Oct 2021 22:07:18
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 22:07:18
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 22:07:18
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 22:07:19
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 22:07:19
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 22:07:19
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 22:07:20
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 22:07:21
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.454685  , 0.73842045, 0.30995524, ..., 0.67699972, 0.38572305,
#[Out]#        0.07215952])
# Thu, 28 Oct 2021 22:07:21
Y = X + b
Y#[Out]# array([2.954685  , 3.23842045, 2.80995524, ..., 3.17699972, 2.88572305,
#[Out]#        2.57215952])
# Thu, 28 Oct 2021 22:07:22
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 22:07:22
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 22:07:23
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 22:07:23
m_x#[Out]# 0.4991839179622217
# Thu, 28 Oct 2021 22:07:24
mm_x#[Out]# 0.3324680966951459
# Thu, 28 Oct 2021 22:07:25
v_x#[Out]# 0.08328434558648762
# Thu, 28 Oct 2021 22:07:26
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 22:07:26
m_y#[Out]# 2.9991839179622217
# Thu, 28 Oct 2021 22:07:27
mm_y#[Out]# 9.078387686506254
# Thu, 28 Oct 2021 22:07:27
v_y#[Out]# 0.08328434558648762
# Thu, 28 Oct 2021 22:07:28
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:07:28
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b119f4ac0>
# Thu, 28 Oct 2021 22:07:54
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Thu, 28 Oct 2021 22:07:55
P0, Pe = gen_probs()# Thu, 28 Oct 2021 22:07:55
Pe#[Out]# 0.019999999999999997
# Thu, 28 Oct 2021 22:07:55
P0#[Out]# 0.8
# Thu, 28 Oct 2021 22:07:56
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Thu, 28 Oct 2021 22:07:56
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Thu, 28 Oct 2021 22:07:56
M = 100# Thu, 28 Oct 2021 22:07:57
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0])
# Thu, 28 Oct 2021 22:07:57
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0])
# Thu, 28 Oct 2021 22:07:57
f0, f1 = rates(rx)# Thu, 28 Oct 2021 22:07:58
f1#[Out]# 0.21
# Thu, 28 Oct 2021 22:07:58
f0#[Out]# 0.79
# Thu, 28 Oct 2021 22:07:58
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Thu, 28 Oct 2021 22:07:58
rx_a = bsc(tx_a, Pe)
#rx_a# Thu, 28 Oct 2021 22:07:58
f0_a, f1_a = rates(rx_a)# Thu, 28 Oct 2021 22:07:59
f1_a#[Out]# 0.215
# Thu, 28 Oct 2021 22:07:59
f0_a#[Out]# 0.785
# Thu, 28 Oct 2021 22:07:59
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 1, 0, ..., 1, 0, 0])
# Thu, 28 Oct 2021 22:07:59
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 1, 0, ..., 1, 0, 0])
# Thu, 28 Oct 2021 22:07:59
f0_b, f1_b = rates(rx_b)# Thu, 28 Oct 2021 22:08:00
f1_b#[Out]# 0.2035
# Thu, 28 Oct 2021 22:08:00
f0_b#[Out]# 0.7965
# Thu, 28 Oct 2021 22:08:00
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([0, 1, 0, ..., 0, 1, 0])
# Thu, 28 Oct 2021 22:08:00
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([0, 1, 0, ..., 0, 1, 0])
# Thu, 28 Oct 2021 22:08:00
f0_c, f1_c = rates(rx_c)# Thu, 28 Oct 2021 22:08:01
f1_c#[Out]# 0.2097
# Thu, 28 Oct 2021 22:08:01
f0_c#[Out]# 0.7903
# Thu, 28 Oct 2021 22:08:01
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 22:08:02
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Thu, 28 Oct 2021 22:08:02
f0_d, f1_d = rates(rx_d)# Thu, 28 Oct 2021 22:08:02
f1_d#[Out]# 0.21087
# Thu, 28 Oct 2021 22:08:02
f0_d#[Out]# 0.78913
# Thu, 28 Oct 2021 22:08:03
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Thu, 28 Oct 2021 22:08:03
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13719f70>
# Thu, 28 Oct 2021 22:08:03
tx_u = random_binary(1000, P0)
#tx_u# Thu, 28 Oct 2021 22:08:04
rx_u = bsc(tx_u, Pe)
#rx_u# Thu, 28 Oct 2021 22:08:04
f0_u, f1_u = rates(rx_u)# Thu, 28 Oct 2021 22:08:04
f1_u#[Out]# 0.206
# Thu, 28 Oct 2021 22:08:04
f0_u#[Out]# 0.794
# Thu, 28 Oct 2021 22:08:05
tx_v = random_binary(1000, P0)
#tx_v# Thu, 28 Oct 2021 22:08:05
rx_v = bsc(tx_v, Pe)
#rx_v# Thu, 28 Oct 2021 22:08:05
f0_v, f1_v = rates(rx_v)# Thu, 28 Oct 2021 22:08:06
f1_v#[Out]# 0.236
# Thu, 28 Oct 2021 22:08:06
f0_v#[Out]# 0.764
# Thu, 28 Oct 2021 22:08:06
tx_w = random_binary(1000, P0)
#tx_w# Thu, 28 Oct 2021 22:08:06
rx_w = bsc(tx_w, Pe)
#rx_w# Thu, 28 Oct 2021 22:08:07
f0_w, f1_w = rates(rx_w)# Thu, 28 Oct 2021 22:08:07
f1_w#[Out]# 0.214
# Thu, 28 Oct 2021 22:08:07
f0_w#[Out]# 0.786
# Thu, 28 Oct 2021 22:08:07
tx_y = random_binary(1000, P0)
#tx_y# Thu, 28 Oct 2021 22:08:08
rx_y = bsc(tx_y, Pe)
#rx_y# Thu, 28 Oct 2021 22:08:08
f0_y, f1_y = rates(rx_y)# Thu, 28 Oct 2021 22:08:08
f1_y#[Out]# 0.215
# Thu, 28 Oct 2021 22:08:08
f0_y#[Out]# 0.785
# Thu, 28 Oct 2021 22:08:08
tx_z = random_binary(1000, P0)
#tx_z# Thu, 28 Oct 2021 22:08:09
rx_z = bsc(tx_z, Pe)
#rx_z# Thu, 28 Oct 2021 22:08:09
f0_z, f1_z = rates(rx_z)# Thu, 28 Oct 2021 22:08:09
f1_z#[Out]# 0.221
# Thu, 28 Oct 2021 22:08:10
f0_z#[Out]# 0.779
# Thu, 28 Oct 2021 22:08:10
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Thu, 28 Oct 2021 22:08:10
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13716790>
# Thu, 28 Oct 2021 22:08:11
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0])
# Thu, 28 Oct 2021 22:08:11
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0])
# Thu, 28 Oct 2021 22:08:11
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.95
# Thu, 28 Oct 2021 22:08:12
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Thu, 28 Oct 2021 22:08:12
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Thu, 28 Oct 2021 22:08:12
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9196428571428571
# Thu, 28 Oct 2021 22:08:12
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Thu, 28 Oct 2021 22:08:13
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Thu, 28 Oct 2021 22:08:13
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.923394495412844
# Thu, 28 Oct 2021 22:08:13
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Thu, 28 Oct 2021 22:08:13
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Thu, 28 Oct 2021 22:08:14
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9236268939393939
# Thu, 28 Oct 2021 22:08:14
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 1, 1, ..., 1, 0, 0])
# Thu, 28 Oct 2021 22:08:14
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 1, 1, ..., 1, 0, 0])
# Thu, 28 Oct 2021 22:08:14
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9249534055252789
# Thu, 28 Oct 2021 22:08:15
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Thu, 28 Oct 2021 22:08:15
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13707b50>
# Thu, 28 Oct 2021 22:08:16
sample_1 = rv1(10000)
sample_1#[Out]# array([-1.54347854, -0.87867246, -1.47386661, ...,  2.32336089,
#[Out]#         3.44665158, -0.40435258])
# Thu, 28 Oct 2021 22:08:16
sample_2 = rv2(10000)
sample_2#[Out]# array([5.5, 8.5, 6.5, ..., 6.5, 4.5, 6.5])
# Thu, 28 Oct 2021 22:08:17
sample_3 = rv3(10000)
sample_3#[Out]# array([0.6775043 , 0.64709204, 0.04037504, ..., 0.45208223, 0.68796673,
#[Out]#        0.83061109])
# Thu, 28 Oct 2021 22:08:17
plot_scatter(sample_1)# Thu, 28 Oct 2021 22:08:17
plot_scatter(sample_2)# Thu, 28 Oct 2021 22:08:18
plot_scatter(sample_3)# Thu, 28 Oct 2021 22:08:18
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Thu, 28 Oct 2021 22:08:18
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b1364a6a0>
# Thu, 28 Oct 2021 22:08:19
#With M = 100
X = np.random.uniform(0,1,100)
#X# Thu, 28 Oct 2021 22:08:19
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 22:08:20
m1#[Out]# 0.47917933702465104
# Thu, 28 Oct 2021 22:08:20
mm1#[Out]# 0.30301707504997166
# Thu, 28 Oct 2021 22:08:20
v1#[Out]# 0.07414569496827028
# Thu, 28 Oct 2021 22:08:20
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:20
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 22:08:21
m2#[Out]# 0.5000447176389444
# Thu, 28 Oct 2021 22:08:21
mm2#[Out]# 0.32984035655376365
# Thu, 28 Oct 2021 22:08:21
v2#[Out]# 0.07987551242757948
# Thu, 28 Oct 2021 22:08:21
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.77898009, 0.3381161 , 0.8762838 , ..., 0.26156952, 0.80223954,
#[Out]#        0.62458811])
# Thu, 28 Oct 2021 22:08:22
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 22:08:22
m3#[Out]# 0.49895241517682953
# Thu, 28 Oct 2021 22:08:22
mm3#[Out]# 0.331546582807451
# Thu, 28 Oct 2021 22:08:22
v3#[Out]# 0.08260133032969275
# Thu, 28 Oct 2021 22:08:23
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.59815713, 0.9376527 , 0.79030542, ..., 0.36856144, 0.68326092,
#[Out]#        0.74947441])
# Thu, 28 Oct 2021 22:08:23
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 22:08:23
m4#[Out]# 0.4996301992388377
# Thu, 28 Oct 2021 22:08:23
mm4#[Out]# 0.33371556711056016
# Thu, 28 Oct 2021 22:08:24
v4#[Out]# 0.08408607197983922
# Thu, 28 Oct 2021 22:08:24
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.98982735, 0.76630659, 0.88973308, ..., 0.18122206, 0.60709816,
#[Out]#        0.8148217 ])
# Thu, 28 Oct 2021 22:08:24
#With M = 1000000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 22:08:24
m5#[Out]# 0.49981379165897916
# Thu, 28 Oct 2021 22:08:24
mm5#[Out]# 0.333213025863173
# Thu, 28 Oct 2021 22:08:25
v5 #[Out]# 0.08339928292993008
# Thu, 28 Oct 2021 22:08:25
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 22:08:25
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13660520>
# Thu, 28 Oct 2021 22:08:26
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Thu, 28 Oct 2021 22:08:26
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b136609d0>
# Thu, 28 Oct 2021 22:08:28
#With M = 1000 for the first time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:28
# For the first time let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 22:08:28
m1#[Out]# 0.4968204866384908
# Thu, 28 Oct 2021 22:08:28
mm1#[Out]# 0.3309194419723162
# Thu, 28 Oct 2021 22:08:29
v1#[Out]# 0.08417301904765702
# Thu, 28 Oct 2021 22:08:29
#With M = 1000 for the second time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:30
# For the second time let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 22:08:30
m2#[Out]# 0.49320083354383737
# Thu, 28 Oct 2021 22:08:30
mm2#[Out]# 0.3276296525690567
# Thu, 28 Oct 2021 22:08:30
v2#[Out]# 0.08446705741813884
# Thu, 28 Oct 2021 22:08:31
#With M = 1000 for the third time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:31
# For the third time let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 22:08:31
m3#[Out]# 0.5129862773270482
# Thu, 28 Oct 2021 22:08:32
mm3#[Out]# 0.34846462840286496
# Thu, 28 Oct 2021 22:08:32
v3#[Out]# 0.08539510277978156
# Thu, 28 Oct 2021 22:08:32
#With M = 1000 for the fourth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:32
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 22:08:33
m4#[Out]# 0.5050026634284888
# Thu, 28 Oct 2021 22:08:33
mm4#[Out]# 0.34113776551799524
# Thu, 28 Oct 2021 22:08:33
v4#[Out]# 0.08619627171984764
# Thu, 28 Oct 2021 22:08:34
#With M = 1000 for the fifth time
X = np.random.uniform(0,1,1000)
#X# Thu, 28 Oct 2021 22:08:34
# For the fifth time let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 22:08:34
m5#[Out]# 0.5036132257316374
# Thu, 28 Oct 2021 22:08:34
mm5#[Out]# 0.3371537560324175
# Thu, 28 Oct 2021 22:08:35
v5#[Out]# 0.08361108598657896
# Thu, 28 Oct 2021 22:08:35
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}
# Thu, 28 Oct 2021 22:08:35
uniform_table_2 = pd.DataFrame(dict_uniform_2)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13707340>
# Thu, 28 Oct 2021 22:08:36
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Thu, 28 Oct 2021 22:08:37
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Thu, 28 Oct 2021 22:08:37
m1#[Out]# -0.02229198518994532
# Thu, 28 Oct 2021 22:08:37
mm1#[Out]# 1.070313035425755
# Thu, 28 Oct 2021 22:08:38
v1#[Out]# 1.0806223260828751
# Thu, 28 Oct 2021 22:08:38
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Thu, 28 Oct 2021 22:08:38
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Thu, 28 Oct 2021 22:08:38
m2#[Out]# -0.014115943971389253
# Thu, 28 Oct 2021 22:08:39
mm2#[Out]# 0.9929267519327037
# Thu, 28 Oct 2021 22:08:39
v2#[Out]# 0.9937212132717722
# Thu, 28 Oct 2021 22:08:39
# With M = 10000
X = np.random.normal(0, 1, 10000)
#X# Thu, 28 Oct 2021 22:08:40
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Thu, 28 Oct 2021 22:08:40
m3#[Out]# 0.006968107190669943
# Thu, 28 Oct 2021 22:08:40
mm3#[Out]# 1.004172072892654
# Thu, 28 Oct 2021 22:08:41
v3#[Out]# 1.0042239407689102
# Thu, 28 Oct 2021 22:08:41
# With M = 100000
X = np.random.normal(0, 1, 100000)
#X# Thu, 28 Oct 2021 22:08:41
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Thu, 28 Oct 2021 22:08:42
m4#[Out]# -0.007262552657952789
# Thu, 28 Oct 2021 22:08:42
mm4#[Out]# 0.9935803360549555
# Thu, 28 Oct 2021 22:08:42
v4#[Out]# 0.9935375267591134
# Thu, 28 Oct 2021 22:08:42
# With M = 1000000
X = np.random.normal(0, 1, 1000000)
#X# Thu, 28 Oct 2021 22:08:43
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Thu, 28 Oct 2021 22:08:43
m5#[Out]# -0.00041073597446008035
# Thu, 28 Oct 2021 22:08:43
mm5#[Out]# 0.997796362460843
# Thu, 28 Oct 2021 22:08:43
v5#[Out]# 0.997797191553994
# Thu, 28 Oct 2021 22:08:44
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Thu, 28 Oct 2021 22:08:44
Gaussian_table = pd.DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13660ee0>
# Thu, 28 Oct 2021 22:08:44
# Use function "normal" to generate an array X of M zero-mean Gaussian distributed random numbers of unit variance
# For unit variance, standard deviation is also 1
# Thu, 28 Oct 2021 22:08:45
# With M = 100
X = np.random.normal(0, 1, 100)# Thu, 28 Oct 2021 22:08:46
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100, hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Thu, 28 Oct 2021 22:08:46
# With M = 1000
X = np.random.normal(0, 1, 1000)# Thu, 28 Oct 2021 22:08:46
# For M = 1000, hits = h2

h2 = number_hits_interval(X, 0)
h2
#[Out]# 0
# Thu, 28 Oct 2021 22:08:47
# With M = 10000
X = np.random.normal(0, 1, 10000)# Thu, 28 Oct 2021 22:08:47
# For M = 10000, hits = h3

h3 = number_hits_interval(X, 0)
h3
#[Out]# 0
# Thu, 28 Oct 2021 22:08:47
# With M = 100000
X = np.random.normal(0, 1, 100000)# Thu, 28 Oct 2021 22:08:47
# For M = 100000, hits = h4

h4 = number_hits_interval(X, 0)
h4#[Out]# 0
# Thu, 28 Oct 2021 22:08:48
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Thu, 28 Oct 2021 22:08:48
# For M = 100000, hits = h5

h5 = number_hits_interval(X, 0)
h5#[Out]# 0
# Thu, 28 Oct 2021 22:08:50
number_hits_interval??# Thu, 28 Oct 2021 22:08:50
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Thu, 28 Oct 2021 22:08:50
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b136605e0>
# Thu, 28 Oct 2021 22:08:50
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 22:08:51
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Thu, 28 Oct 2021 22:08:51
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 22:09:09
M = 1000000
X = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 22:09:10
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Thu, 28 Oct 2021 22:09:10
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 22:09:12
F1#[Out]# 39784
# Thu, 28 Oct 2021 22:09:12
f1 = F1/M
f1#[Out]# 0.039784
# Thu, 28 Oct 2021 22:09:12
fx_0a = f1/delta_x
fx_0a#[Out]# 0.39783999999999997
# Thu, 28 Oct 2021 22:09:12
delta_x = 0.01

# For delta_x = 0.01

# F2 = absolute frquency

# f2 = relative frequency

# fx_0b = the value of the PDF at x = 0# Thu, 28 Oct 2021 22:09:13
F2 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 22:09:15
F2#[Out]# 3964
# Thu, 28 Oct 2021 22:09:15
f2 = F2/M
f2#[Out]# 0.003964
# Thu, 28 Oct 2021 22:09:15
fx_0b = f2/delta_x
fx_0b#[Out]# 0.3964
# Thu, 28 Oct 2021 22:09:15
delta_x = 0.001

# For delta_x = 0.001

# F3 = absolute frquency

# f3 = relative frequency

# fx_0c = the value of the PDF at x = 0# Thu, 28 Oct 2021 22:09:16
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 22:09:18
F3#[Out]# 413
# Thu, 28 Oct 2021 22:09:18
f3 = F3/M
f3#[Out]# 0.000413
# Thu, 28 Oct 2021 22:09:18
fx_0c = f3/delta_x
fx_0c#[Out]# 0.413
# Thu, 28 Oct 2021 22:09:18
delta_x = 0.0001

# For delta_x = 0.0001

# F4 = absolute frquency

# f4 = relative frequency

# fx_0d = the value of the PDF at x = 0# Thu, 28 Oct 2021 22:09:19
F4 = number_hits_interval(X, -delta_x/2, delta_x/2)# Thu, 28 Oct 2021 22:09:21
F4#[Out]# 42
# Thu, 28 Oct 2021 22:09:21
f4 = F4/M
f4#[Out]# 4.2e-05
# Thu, 28 Oct 2021 22:09:21
fx_0d = f4/delta_x
fx_0d#[Out]# 0.41999999999999993
# Thu, 28 Oct 2021 22:09:21
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Thu, 28 Oct 2021 22:09:21
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b13660d90>
# Thu, 28 Oct 2021 22:09:22
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 22:09:23
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 22:09:24
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Thu, 28 Oct 2021 22:09:26
X_n, f_n = pdf(X_normal, N)# Thu, 28 Oct 2021 22:09:27
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Thu, 28 Oct 2021 22:09:27
plot_pdf(X_n, f_n,  name ='Gausssian random variable (normal)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Gausssian random variable (normal)(x)$'>)
# Thu, 28 Oct 2021 22:09:28
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Thu, 28 Oct 2021 22:09:29
X_normal = np.random.normal(0, 1, M)# Thu, 28 Oct 2021 22:09:29
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Thu, 28 Oct 2021 22:09:29
X_n, f_n = cdf(X_normal)# Thu, 28 Oct 2021 22:09:30
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 22:09:30
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Thu, 28 Oct 2021 22:09:31
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 22:09:32
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.83628056, 0.5247056 , 0.69658787, ..., 0.46031852, 0.77339234,
#[Out]#        0.74640225])
# Thu, 28 Oct 2021 22:09:32
Y = X + b
Y#[Out]# array([3.33628056, 3.0247056 , 3.19658787, ..., 2.96031852, 3.27339234,
#[Out]#        3.24640225])
# Thu, 28 Oct 2021 22:09:33
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 22:09:33
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 22:09:34
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 22:09:35
m_x#[Out]# 0.5003636392231988
# Thu, 28 Oct 2021 22:09:35
mm_x#[Out]# 0.33387155262345763
# Thu, 28 Oct 2021 22:09:35
v_x#[Out]# 0.08350861625293668
# Thu, 28 Oct 2021 22:09:36
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 22:09:36
m_y#[Out]# 3.0003636392231985
# Thu, 28 Oct 2021 22:09:36
mm_y#[Out]# 9.085689748739453
# Thu, 28 Oct 2021 22:09:37
v_y#[Out]# 0.08350861625293668
# Thu, 28 Oct 2021 22:09:37
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:09:38
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e83d2e0>
# Thu, 28 Oct 2021 22:09:41
a = gen_a()
a#[Out]# 2.0
# Thu, 28 Oct 2021 22:09:41
# array of size M = 100000
X = normal(0, 1, 100000)
X#[Out]# array([-0.05814744,  1.20828518,  0.70677194, ..., -0.43115224,
#[Out]#         0.0722407 ,  0.78297059])
# Thu, 28 Oct 2021 22:09:41
Y = a * X
Y#[Out]# array([-0.11629488,  2.41657035,  1.41354388, ..., -0.86230449,
#[Out]#         0.14448139,  1.56594119])
# Thu, 28 Oct 2021 22:09:42
Z = X/a
Z#[Out]# array([-0.02907372,  0.60414259,  0.35338597, ..., -0.21557612,
#[Out]#         0.03612035,  0.3914853 ])
# Thu, 28 Oct 2021 22:09:42
x, fx = pdf(X, 100)# Thu, 28 Oct 2021 22:09:42
y, fy = pdf(Y, 100)# Thu, 28 Oct 2021 22:09:43
z, fz = pdf(Z, 100)# Thu, 28 Oct 2021 22:09:43
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-9.81929756948788,
#[Out]#  9.473538834280436,
#[Out]#  -0.040268449062692224,
#[Out]#  0.8456374303165364)
# Thu, 28 Oct 2021 22:09:45
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 22:09:45
Y = a * X# Thu, 28 Oct 2021 22:09:45
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 22:09:45
m_x#[Out]# 0.5000665721030135
# Thu, 28 Oct 2021 22:09:46
mm_x#[Out]# 0.3336675588939431
# Thu, 28 Oct 2021 22:09:46
v_x#[Out]# 0.0836018183772684
# Thu, 28 Oct 2021 22:09:46
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 22:09:47
m_y#[Out]# 1.000133144206027
# Thu, 28 Oct 2021 22:09:47
mm_y#[Out]# 1.3346702355757725
# Thu, 28 Oct 2021 22:09:47
v_y#[Out]# 0.3344072735090736
# Thu, 28 Oct 2021 22:09:48
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:09:48
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0593bb50>
# Thu, 28 Oct 2021 22:16:29
k = m_y - m_x
k#[Out]# 0.5000665721030135
# Thu, 28 Oct 2021 22:17:19
k = m_y - m_x
k#[Out]# 0.5000665721030135
# Thu, 28 Oct 2021 22:17:44
b = gen_b()
b#[Out]# 2.5
# Thu, 28 Oct 2021 22:17:44
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.05261168, 0.12007093, 0.2849196 , ..., 0.68678845, 0.2698532 ,
#[Out]#        0.71759992])
# Thu, 28 Oct 2021 22:17:45
Y = X + b
Y#[Out]# array([2.55261168, 2.62007093, 2.7849196 , ..., 3.18678845, 2.7698532 ,
#[Out]#        3.21759992])
# Thu, 28 Oct 2021 22:17:45
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Thu, 28 Oct 2021 22:17:45
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Thu, 28 Oct 2021 22:17:46
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 22:17:46
m_x#[Out]# 0.49953302965909496
# Thu, 28 Oct 2021 22:17:46
mm_x#[Out]# 0.33256566589318537
# Thu, 28 Oct 2021 22:17:47
v_x#[Out]# 0.08303324850527619
# Thu, 28 Oct 2021 22:17:47
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 22:17:47
m_y#[Out]# 2.9995330296590947
# Thu, 28 Oct 2021 22:17:48
mm_y#[Out]# 9.080230814188658
# Thu, 28 Oct 2021 22:17:48
v_y#[Out]# 0.08303324850527619
# Thu, 28 Oct 2021 22:17:50
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 22:17:50
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e7efb80>
# Thu, 28 Oct 2021 22:17:51
k = m_y - m_x
k#[Out]# 2.5
# Thu, 28 Oct 2021 23:26:27
C = m_y/m_x
C#[Out]# 6.00467406871197
# Thu, 28 Oct 2021 23:27:36
M = 100000
X = uniform(1, 0, M)# Thu, 28 Oct 2021 23:27:37
Y = a * X# Thu, 28 Oct 2021 23:27:37
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Thu, 28 Oct 2021 23:27:37
m_x#[Out]# 0.5005364106024383
# Thu, 28 Oct 2021 23:27:37
mm_x#[Out]# 0.33389195957248485
# Thu, 28 Oct 2021 23:27:38
v_x#[Out]# 0.08335609479466001
# Thu, 28 Oct 2021 23:27:38
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Thu, 28 Oct 2021 23:27:38
m_y#[Out]# 1.0010728212048765
# Thu, 28 Oct 2021 23:27:38
mm_y#[Out]# 1.3355678382899394
# Thu, 28 Oct 2021 23:27:38
v_y#[Out]# 0.33342437917864004
# Thu, 28 Oct 2021 23:27:39
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Thu, 28 Oct 2021 23:27:39
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0e8cf6a0>
# Thu, 28 Oct 2021 23:27:40
C = m_y/m_x
C#[Out]# 2.0
# Thu, 28 Oct 2021 23:43:54
# Lets compare the variance of random variable X and Y

C = v_y/v_x# Thu, 28 Oct 2021 23:44:01
# Lets compare the variance of random variable X and Y

C = v_y/v_x
C#[Out]# 4.0
# Thu, 28 Oct 2021 23:57:01
#We can say that C = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the VARIANCE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Thu, 28 Oct 2021 23:58:37
# We can say that C = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the VARIANCE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Fri, 29 Oct 2021 00:04:40
# Lets compare the mean square for both X and Y# Fri, 29 Oct 2021 00:04:53
# Lets compare the mean square of X and Y# Fri, 29 Oct 2021 00:07:20
# Lets compare the mean values of random variables X and Y

K1 = m_y/m_x
K1#[Out]# 2.0
# Fri, 29 Oct 2021 00:07:21
# Lets compare the VARIANCE of random variable X and Y

K2 = v_y/v_x
K2#[Out]# 4.0
# Fri, 29 Oct 2021 00:07:21
# We can say that K2 = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the VARIANCE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Fri, 29 Oct 2021 00:07:22
# Lets compare the mean square of X and Y# Fri, 29 Oct 2021 00:08:54
# Lets compare the mean square of X and Y

K3 = mm_y/mm_x
K3#[Out]# 4.0
# Fri, 29 Oct 2021 00:10:09
# Similarly, We can say that K3 = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the MEAN SQUARE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Fri, 29 Oct 2021 00:16:45
## a > 1:# Fri, 29 Oct 2021 00:17:52
### a < 1:# Fri, 29 Oct 2021 00:26:31
By compairing the PDF for random variable X to that of Y and Z, we can conclude that:# Fri, 29 Oct 2021 01:35:31
plot_pdf(X_n, f_n# Fri, 29 Oct 2021 01:36:44
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Fri, 29 Oct 2021 01:36:44
X_normal = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:36:44
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Fri, 29 Oct 2021 01:36:44
X_n, f_n = pdf(X_normal, N)# Fri, 29 Oct 2021 01:36:45
plot_pdf(X_u, f_u, name = 'Uniform random variable (Uniform)')#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_Uniform random variable (Uniform)(x)$'>)
# Fri, 29 Oct 2021 01:36:45
plot_pdf(X_n, f_n# Fri, 29 Oct 2021 01:36:46
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Fri, 29 Oct 2021 01:36:46
X_normal = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:36:46
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Fri, 29 Oct 2021 01:36:47
X_n, f_n = cdf(X_normal)# Fri, 29 Oct 2021 01:36:47
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Fri, 29 Oct 2021 01:36:47
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Fri, 29 Oct 2021 01:37:02
plot_pdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Fri, 29 Oct 2021 01:39:02
plot_pdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Fri, 29 Oct 2021 01:39:20
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Fri, 29 Oct 2021 01:39:21
P0, Pe = gen_probs()# Fri, 29 Oct 2021 01:39:21
Pe#[Out]# 0.019999999999999997
# Fri, 29 Oct 2021 01:39:21
P0#[Out]# 0.8
# Fri, 29 Oct 2021 01:39:21
PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Fri, 29 Oct 2021 01:39:22
# PS1_R1 = P(S1|R1)

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Fri, 29 Oct 2021 01:39:22
M = 100# Fri, 29 Oct 2021 01:39:22
tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0])
# Fri, 29 Oct 2021 01:39:23
rx = bsc(tx, Pe)
rx#[Out]# array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
#[Out]#        1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0])
# Fri, 29 Oct 2021 01:39:23
f0, f1 = rates(rx)# Fri, 29 Oct 2021 01:39:23
f1#[Out]# 0.22
# Fri, 29 Oct 2021 01:39:24
f0#[Out]# 0.78
# Fri, 29 Oct 2021 01:39:24
#For M = 1000:
tx_a = random_binary(1000, P0)
#tx_a# Fri, 29 Oct 2021 01:39:24
rx_a = bsc(tx_a, Pe)
#rx_a# Fri, 29 Oct 2021 01:39:24
f0_a, f1_a = rates(rx_a)# Fri, 29 Oct 2021 01:39:25
f1_a#[Out]# 0.212
# Fri, 29 Oct 2021 01:39:25
f0_a#[Out]# 0.788
# Fri, 29 Oct 2021 01:39:25
#For M = 10000:
tx_b = random_binary(10000, P0)
tx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Fri, 29 Oct 2021 01:39:25
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Fri, 29 Oct 2021 01:39:26
f0_b, f1_b = rates(rx_b)# Fri, 29 Oct 2021 01:39:26
f1_b#[Out]# 0.2185
# Fri, 29 Oct 2021 01:39:26
f0_b#[Out]# 0.7815
# Fri, 29 Oct 2021 01:39:26
#For M = 100000
tx_c = random_binary(10000, P0)
tx_c#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Fri, 29 Oct 2021 01:39:27
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Fri, 29 Oct 2021 01:39:27
f0_c, f1_c = rates(rx_c)# Fri, 29 Oct 2021 01:39:27
f1_c#[Out]# 0.2114
# Fri, 29 Oct 2021 01:39:27
f0_c#[Out]# 0.7886
# Fri, 29 Oct 2021 01:39:28
#For M = 1000000
tx_d = random_binary(100000, P0)
tx_d#[Out]# array([0, 0, 0, ..., 0, 1, 0])
# Fri, 29 Oct 2021 01:39:28
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 0, 0, ..., 1, 1, 0])
# Fri, 29 Oct 2021 01:39:28
f0_d, f1_d = rates(rx_d)# Fri, 29 Oct 2021 01:39:28
f1_d#[Out]# 0.21204
# Fri, 29 Oct 2021 01:39:28
f0_d#[Out]# 0.78796
# Fri, 29 Oct 2021 01:39:29
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Fri, 29 Oct 2021 01:39:29
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b157474f0>
# Fri, 29 Oct 2021 01:39:29
tx_u = random_binary(1000, P0)
#tx_u# Fri, 29 Oct 2021 01:39:30
rx_u = bsc(tx_u, Pe)
#rx_u# Fri, 29 Oct 2021 01:39:30
f0_u, f1_u = rates(rx_u)# Fri, 29 Oct 2021 01:39:30
f1_u#[Out]# 0.219
# Fri, 29 Oct 2021 01:39:30
f0_u#[Out]# 0.781
# Fri, 29 Oct 2021 01:39:31
tx_v = random_binary(1000, P0)
#tx_v# Fri, 29 Oct 2021 01:39:31
rx_v = bsc(tx_v, Pe)
#rx_v# Fri, 29 Oct 2021 01:39:31
f0_v, f1_v = rates(rx_v)# Fri, 29 Oct 2021 01:39:32
f1_v#[Out]# 0.214
# Fri, 29 Oct 2021 01:39:32
f0_v#[Out]# 0.786
# Fri, 29 Oct 2021 01:39:32
tx_w = random_binary(1000, P0)
#tx_w# Fri, 29 Oct 2021 01:39:32
rx_w = bsc(tx_w, Pe)
#rx_w# Fri, 29 Oct 2021 01:39:33
f0_w, f1_w = rates(rx_w)# Fri, 29 Oct 2021 01:39:33
f1_w#[Out]# 0.219
# Fri, 29 Oct 2021 01:39:33
f0_w#[Out]# 0.781
# Fri, 29 Oct 2021 01:39:33
tx_y = random_binary(1000, P0)
#tx_y# Fri, 29 Oct 2021 01:39:33
rx_y = bsc(tx_y, Pe)
#rx_y# Fri, 29 Oct 2021 01:39:34
f0_y, f1_y = rates(rx_y)# Fri, 29 Oct 2021 01:39:34
f1_y#[Out]# 0.209
# Fri, 29 Oct 2021 01:39:34
f0_y#[Out]# 0.791
# Fri, 29 Oct 2021 01:39:35
tx_z = random_binary(1000, P0)
#tx_z# Fri, 29 Oct 2021 01:39:35
rx_z = bsc(tx_z, Pe)
#rx_z# Fri, 29 Oct 2021 01:39:35
f0_z, f1_z = rates(rx_z)# Fri, 29 Oct 2021 01:39:35
f1_z#[Out]# 0.21
# Fri, 29 Oct 2021 01:39:36
f0_z#[Out]# 0.79
# Fri, 29 Oct 2021 01:39:36
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Fri, 29 Oct 2021 01:39:36
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b1578be20>
# Fri, 29 Oct 2021 01:39:37
#For M = 100
tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0])
# Fri, 29 Oct 2021 01:39:37
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0])
# Fri, 29 Oct 2021 01:39:37
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 1.0
# Fri, 29 Oct 2021 01:39:37
#For M = 1000
tx_m2 = random_binary(1000, P0)
#tx_m2# Fri, 29 Oct 2021 01:39:38
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Fri, 29 Oct 2021 01:39:38
# P_m2 = P(S1|R1) for M = 1000
P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9345794392523364
# Fri, 29 Oct 2021 01:39:38
#For M = 10000
tx_m3 = random_binary(10000, P0)
#tx_m3# Fri, 29 Oct 2021 01:39:38
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Fri, 29 Oct 2021 01:39:39
# P_m3 = P(S1|R1) for M = 10000
P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9207089552238806
# Fri, 29 Oct 2021 01:39:39
#For M = 100000
tx_m4 = random_binary(100000, P0)
#tx_m4# Fri, 29 Oct 2021 01:39:39
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Fri, 29 Oct 2021 01:39:39
# P_m4 = P(S1|R1) for M = 100000
P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9243329725659969
# Fri, 29 Oct 2021 01:39:39
#For M = 1000000
tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([1, 0, 1, ..., 0, 0, 0])
# Fri, 29 Oct 2021 01:39:40
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([1, 0, 1, ..., 0, 1, 0])
# Fri, 29 Oct 2021 01:39:40
# P_m5 = P(S1|R1) for M = 1000000
P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9241432367503174
# Fri, 29 Oct 2021 01:39:40
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Fri, 29 Oct 2021 01:39:41
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b1576df40>
# Fri, 29 Oct 2021 01:39:41
sample_1 = rv1(10000)
sample_1#[Out]# array([ 1.39848392,  0.49117166, -0.26786829, ...,  0.45037455,
#[Out]#         1.36121577,  0.0032756 ])
# Fri, 29 Oct 2021 01:39:42
sample_2 = rv2(10000)
sample_2#[Out]# array([2.5, 5.5, 8.5, ..., 4.5, 5.5, 2.5])
# Fri, 29 Oct 2021 01:39:42
sample_3 = rv3(10000)
sample_3#[Out]# array([0.92312443, 0.69079245, 0.89268711, ..., 0.16709293, 0.34794092,
#[Out]#        0.235219  ])
# Fri, 29 Oct 2021 01:39:42
plot_scatter(sample_1)# Fri, 29 Oct 2021 01:39:42
plot_scatter(sample_2)# Fri, 29 Oct 2021 01:39:42
plot_scatter(sample_3)# Fri, 29 Oct 2021 01:39:43
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Fri, 29 Oct 2021 01:39:43
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b16293a60>
# Fri, 29 Oct 2021 01:39:44
#With M = 100
X = np.random.uniform(0,1,100)
#X# Fri, 29 Oct 2021 01:39:44
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Fri, 29 Oct 2021 01:39:45
m1#[Out]# 0.5072554105419664
# Fri, 29 Oct 2021 01:39:45
mm1#[Out]# 0.33876695565526044
# Fri, 29 Oct 2021 01:39:46
v1#[Out]# 0.0822817213446076
# Fri, 29 Oct 2021 01:39:46
#With M = 1000
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:39:46
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Fri, 29 Oct 2021 01:39:47
m2#[Out]# 0.4879919639117444
# Fri, 29 Oct 2021 01:39:47
mm2#[Out]# 0.3230531491245994
# Fri, 29 Oct 2021 01:39:47
v2#[Out]# 0.08500199427643462
# Fri, 29 Oct 2021 01:39:47
#With M = 10000
X = np.random.uniform(0,1,10000)
X#[Out]# array([0.31356227, 0.7957059 , 0.21138257, ..., 0.86757799, 0.17937685,
#[Out]#        0.62032131])
# Fri, 29 Oct 2021 01:39:48
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Fri, 29 Oct 2021 01:39:48
m3#[Out]# 0.4946309244155694
# Fri, 29 Oct 2021 01:39:48
mm3#[Out]# 0.32891325746453115
# Fri, 29 Oct 2021 01:39:49
v3#[Out]# 0.08426193226955735
# Fri, 29 Oct 2021 01:39:49
#With M = 100000
X = np.random.uniform(0,1,100000)
X#[Out]# array([0.74414415, 0.43565706, 0.32624846, ..., 0.19607618, 0.11362661,
#[Out]#        0.07027655])
# Fri, 29 Oct 2021 01:39:49
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Fri, 29 Oct 2021 01:39:49
m4#[Out]# 0.4985769375469735
# Fri, 29 Oct 2021 01:39:50
mm4#[Out]# 0.3319461934889274
# Fri, 29 Oct 2021 01:39:50
v4#[Out]# 0.08336806451585388
# Fri, 29 Oct 2021 01:39:50
#With M = 1000000
X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.33137582, 0.2673053 , 0.41856719, ..., 0.141351  , 0.46229247,
#[Out]#        0.49013746])
# Fri, 29 Oct 2021 01:39:50
#With M = 1000000, let m4 = mean, mm4 = mean square and v4 = variance
m5, mm5, v5 = expected_values(X)# Fri, 29 Oct 2021 01:39:51
m5#[Out]# 0.49970441649428343
# Fri, 29 Oct 2021 01:39:51
mm5#[Out]# 0.33302140228805216
# Fri, 29 Oct 2021 01:39:51
v5 #[Out]# 0.08331698174114158
# Fri, 29 Oct 2021 01:39:52
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Fri, 29 Oct 2021 01:39:52
uniform_table_1 = pd.DataFrame(dict_uniform_1)
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b1625cd00>
# Fri, 29 Oct 2021 01:39:52
# To investigate the relationship, lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' with values corresponding to:
# TEST_VARIANCE = (Mean Square - (Mean)**2)# Fri, 29 Oct 2021 01:39:53
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b162b67c0>
# Fri, 29 Oct 2021 01:39:54
#With M = 1000 for the first time
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:39:54
# For the first time let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Fri, 29 Oct 2021 01:39:54
m1#[Out]# 0.4926805842681722
# Fri, 29 Oct 2021 01:39:55
mm1#[Out]# 0.32497395508412535
# Fri, 29 Oct 2021 01:39:55
v1#[Out]# 0.08232211908838627
# Fri, 29 Oct 2021 01:39:55
#With M = 1000 for the second time
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:39:55
# For the second time let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Fri, 29 Oct 2021 01:39:56
m2#[Out]# 0.5056472783230866
# Fri, 29 Oct 2021 01:39:56
mm2#[Out]# 0.3399223527847448
# Fri, 29 Oct 2021 01:39:56
v2#[Out]# 0.08432751021941927
# Fri, 29 Oct 2021 01:39:57
#With M = 1000 for the third time
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:39:57
# For the third time let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Fri, 29 Oct 2021 01:39:57
m3#[Out]# 0.5039024488748998
# Fri, 29 Oct 2021 01:39:57
mm3#[Out]# 0.3361453621362752
# Fri, 29 Oct 2021 01:39:58
v3#[Out]# 0.08230999414830253
# Fri, 29 Oct 2021 01:39:58
#With M = 1000 for the fourth time
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:39:58
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Fri, 29 Oct 2021 01:39:59
m4#[Out]# 0.5034204234061754
# Fri, 29 Oct 2021 01:39:59
mm4#[Out]# 0.33431248250557916
# Fri, 29 Oct 2021 01:39:59
v4#[Out]# 0.08096132112425049
# Fri, 29 Oct 2021 01:39:59
#With M = 1000 for the fifth time
X = np.random.uniform(0,1,1000)
#X# Fri, 29 Oct 2021 01:40:00
# For the fifth time let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Fri, 29 Oct 2021 01:40:00
m5#[Out]# 0.5093935245445977
# Fri, 29 Oct 2021 01:40:00
mm5#[Out]# 0.3429339601239859
# Fri, 29 Oct 2021 01:40:01
v5#[Out]# 0.0835357330090273
# Fri, 29 Oct 2021 01:40:01
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}
# Fri, 29 Oct 2021 01:40:01
uniform_table_2 = pd.DataFrame(dict_uniform_2)
uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b162afe80>
# Fri, 29 Oct 2021 01:40:02
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Fri, 29 Oct 2021 01:40:02
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance
m1, mm1, v1 = expected_values(X)# Fri, 29 Oct 2021 01:40:03
m1#[Out]# 0.14114339257964337
# Fri, 29 Oct 2021 01:40:03
mm1#[Out]# 1.1098066968671196
# Fri, 29 Oct 2021 01:40:03
v1#[Out]# 1.1008941814123518
# Fri, 29 Oct 2021 01:40:04
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Fri, 29 Oct 2021 01:40:04
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance
m2, mm2, v2 = expected_values(X)# Fri, 29 Oct 2021 01:40:04
m2#[Out]# 5.969367017272198e-05
# Fri, 29 Oct 2021 01:40:05
mm2#[Out]# 1.0203255078171145
# Fri, 29 Oct 2021 01:40:05
v2#[Out]# 1.021346851104885
# Fri, 29 Oct 2021 01:40:05
# With M = 10000
X = np.random.normal(0, 1, 10000)
#X# Fri, 29 Oct 2021 01:40:06
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance
m3, mm3, v3 = expected_values(X)# Fri, 29 Oct 2021 01:40:06
m3#[Out]# -0.0037744452032340975
# Fri, 29 Oct 2021 01:40:06
mm3#[Out]# 0.9865165192228164
# Fri, 29 Oct 2021 01:40:06
v3#[Out]# 0.986600932879512
# Fri, 29 Oct 2021 01:40:07
# With M = 100000
X = np.random.normal(0, 1, 100000)
#X# Fri, 29 Oct 2021 01:40:07
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance
m4, mm4, v4 = expected_values(X)# Fri, 29 Oct 2021 01:40:07
m4#[Out]# 0.0055919621176971235
# Fri, 29 Oct 2021 01:40:08
mm4#[Out]# 1.0058886720563534
# Fri, 29 Oct 2021 01:40:08
v4#[Out]# 1.0058674606906348
# Fri, 29 Oct 2021 01:40:08
# With M = 1000000
X = np.random.normal(0, 1, 1000000)
#X# Fri, 29 Oct 2021 01:40:09
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance
m5, mm5, v5 = expected_values(X)# Fri, 29 Oct 2021 01:40:09
m5#[Out]# -0.0018910017988010709
# Fri, 29 Oct 2021 01:40:09
mm5#[Out]# 1.000964007870024
# Fri, 29 Oct 2021 01:40:10
v5#[Out]# 1.0009614329436545
# Fri, 29 Oct 2021 01:40:10
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Fri, 29 Oct 2021 01:40:11
Gaussian_table = pd.DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b162b6130>
# Fri, 29 Oct 2021 01:40:11
# Use function "normal" to generate an array X of M zero-mean Gaussian distributed random numbers of unit variance
# For unit variance, standard deviation is also 1
# Fri, 29 Oct 2021 01:40:12
# With M = 100
X = np.random.normal(0, 1, 100)# Fri, 29 Oct 2021 01:40:12
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100, hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Fri, 29 Oct 2021 01:40:12
# With M = 1000
X = np.random.normal(0, 1, 1000)# Fri, 29 Oct 2021 01:40:13
# For M = 1000, hits = h2

h2 = number_hits_interval(X, 0)
h2
#[Out]# 0
# Fri, 29 Oct 2021 01:40:13
# With M = 10000
X = np.random.normal(0, 1, 10000)# Fri, 29 Oct 2021 01:40:13
# For M = 10000, hits = h3

h3 = number_hits_interval(X, 0)
h3
#[Out]# 0
# Fri, 29 Oct 2021 01:40:14
# With M = 100000
X = np.random.normal(0, 1, 100000)# Fri, 29 Oct 2021 01:40:14
# For M = 100000, hits = h4

h4 = number_hits_interval(X, 0)
h4#[Out]# 0
# Fri, 29 Oct 2021 01:40:14
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Fri, 29 Oct 2021 01:40:15
# For M = 100000, hits = h5

h5 = number_hits_interval(X, 0)
h5#[Out]# 0
# Fri, 29 Oct 2021 01:40:17
number_hits_interval??# Fri, 29 Oct 2021 01:40:17
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Fri, 29 Oct 2021 01:40:17
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b162ba760>
# Fri, 29 Oct 2021 01:40:18
M = 1000000
X = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:40:32
M = 1000000
X = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:40:34
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Fri, 29 Oct 2021 01:41:09
number_hits_interval??# Fri, 29 Oct 2021 01:41:09
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Fri, 29 Oct 2021 01:41:23
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Fri, 29 Oct 2021 01:41:23
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b162b6760>
# Fri, 29 Oct 2021 01:41:24
M = 1000000
X = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:41:24
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Fri, 29 Oct 2021 01:41:25
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Fri, 29 Oct 2021 01:41:27
F1#[Out]# 40086
# Fri, 29 Oct 2021 01:41:27
f1 = F1/M
f1#[Out]# 0.040086
# Fri, 29 Oct 2021 01:41:27
fx_0a = f1/delta_x
fx_0a#[Out]# 0.40085999999999994
# Fri, 29 Oct 2021 01:41:27
delta_x = 0.01

# For delta_x = 0.01

# F2 = absolute frquency

# f2 = relative frequency

# fx_0b = the value of the PDF at x = 0# Fri, 29 Oct 2021 01:41:27
F2 = number_hits_interval(X, -delta_x/2, delta_x/2)# Fri, 29 Oct 2021 01:41:30
F2#[Out]# 3843
# Fri, 29 Oct 2021 01:41:30
f2 = F2/M
f2#[Out]# 0.003843
# Fri, 29 Oct 2021 01:41:30
fx_0b = f2/delta_x
fx_0b#[Out]# 0.3843
# Fri, 29 Oct 2021 01:41:30
delta_x = 0.001

# For delta_x = 0.001

# F3 = absolute frquency

# f3 = relative frequency

# fx_0c = the value of the PDF at x = 0# Fri, 29 Oct 2021 01:41:30
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Fri, 29 Oct 2021 01:41:32
F3#[Out]# 393
# Fri, 29 Oct 2021 01:41:32
f3 = F3/M
f3#[Out]# 0.000393
# Fri, 29 Oct 2021 01:41:32
fx_0c = f3/delta_x
fx_0c#[Out]# 0.393
# Fri, 29 Oct 2021 01:41:32
delta_x = 0.0001

# For delta_x = 0.0001

# F4 = absolute frquency

# f4 = relative frequency

# fx_0d = the value of the PDF at x = 0# Fri, 29 Oct 2021 01:41:32
F4 = number_hits_interval(X, -delta_x/2, delta_x/2)# Fri, 29 Oct 2021 01:41:34
F4#[Out]# 38
# Fri, 29 Oct 2021 01:41:34
f4 = F4/M
f4#[Out]# 3.8e-05
# Fri, 29 Oct 2021 01:41:34
fx_0d = f4/delta_x
fx_0d#[Out]# 0.38
# Fri, 29 Oct 2021 01:41:34
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Fri, 29 Oct 2021 01:41:35
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b157e8ca0>
# Fri, 29 Oct 2021 01:41:35
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Fri, 29 Oct 2021 01:41:36
X_normal = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:41:36
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Fri, 29 Oct 2021 01:41:37
X_n, f_n = pdf(X_normal, N)# Fri, 29 Oct 2021 01:41:37
plot_pdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Fri, 29 Oct 2021 01:41:38
plot_pdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Fri, 29 Oct 2021 01:41:39
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Fri, 29 Oct 2021 01:41:46
X_normal = np.random.normal(0, 1, M)# Fri, 29 Oct 2021 01:41:46
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Fri, 29 Oct 2021 01:41:47
X_n, f_n = cdf(X_normal)# Fri, 29 Oct 2021 01:41:47
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Fri, 29 Oct 2021 01:41:47
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Fri, 29 Oct 2021 01:41:54
b = gen_b()
b#[Out]# 2.5
# Fri, 29 Oct 2021 01:41:54
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.57570651, 0.56812479, 0.9746252 , ..., 0.86220402, 0.71129882,
#[Out]#        0.88943512])
# Fri, 29 Oct 2021 01:41:55
Y = X + b
Y#[Out]# array([3.07570651, 3.06812479, 3.4746252 , ..., 3.36220402, 3.21129882,
#[Out]#        3.38943512])
# Fri, 29 Oct 2021 01:41:55
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Fri, 29 Oct 2021 01:41:55
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Fri, 29 Oct 2021 01:41:56
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Fri, 29 Oct 2021 01:41:56
m_x#[Out]# 0.5008811924214621
# Fri, 29 Oct 2021 01:41:57
mm_x#[Out]# 0.33422679781306985
# Fri, 29 Oct 2021 01:41:57
v_x#[Out]# 0.08334566234814775
# Fri, 29 Oct 2021 01:41:59
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Fri, 29 Oct 2021 01:41:59
m_y#[Out]# 3.000881192421462
# Fri, 29 Oct 2021 01:42:00
mm_y#[Out]# 9.08863275992038
# Fri, 29 Oct 2021 01:42:00
v_y#[Out]# 0.08334566234814775
# Fri, 29 Oct 2021 01:42:01
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Fri, 29 Oct 2021 01:42:01
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b187012b0>
# Fri, 29 Oct 2021 01:42:02
# Get the difference between the mean of Y and the mean of X
k = m_y - m_x 
k#[Out]# 2.5
# Fri, 29 Oct 2021 01:42:03
a = gen_a()
a#[Out]# 2.0
# Fri, 29 Oct 2021 01:42:04
# array of size M = 100000
X = normal(0, 1, 100000)
X#[Out]# array([ 0.68877415, -0.41356073, -0.28057168, ...,  1.51908064,
#[Out]#        -0.11531191,  0.18109561])
# Fri, 29 Oct 2021 01:42:04
Y = a * X
Y#[Out]# array([ 1.37754829, -0.82712147, -0.56114337, ...,  3.03816128,
#[Out]#        -0.23062383,  0.36219121])
# Fri, 29 Oct 2021 01:42:05
Z = X/a
Z#[Out]# array([ 0.34438707, -0.20678037, -0.14028584, ...,  0.75954032,
#[Out]#        -0.05765596,  0.0905478 ])
# Fri, 29 Oct 2021 01:42:05
x, fx = pdf(X, 100)# Fri, 29 Oct 2021 01:42:05
y, fy = pdf(Y, 100)# Fri, 29 Oct 2021 01:42:06
z, fz = pdf(Z, 100)# Fri, 29 Oct 2021 01:42:06
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-10.41613346410472,
#[Out]#  9.353549607970082,
#[Out]#  -0.04054207632352703,
#[Out]#  0.8513836027940676)
# Fri, 29 Oct 2021 01:42:12
M = 100000
X = uniform(1, 0, M)# Fri, 29 Oct 2021 01:42:12
Y = a * X# Fri, 29 Oct 2021 01:42:12
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance
m_x, mm_x, v_x = expected_values(X)# Fri, 29 Oct 2021 01:42:13
m_x#[Out]# 0.49921989871318956
# Fri, 29 Oct 2021 01:42:13
mm_x#[Out]# 0.33275084399320987
# Fri, 29 Oct 2021 01:42:13
v_x#[Out]# 0.08353117203372296
# Fri, 29 Oct 2021 01:42:14
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance
m_y, mm_y, v_y = expected_values(Y)# Fri, 29 Oct 2021 01:42:14
m_y#[Out]# 0.9984397974263791
# Fri, 29 Oct 2021 01:42:15
mm_y#[Out]# 1.3310033759728395
# Fri, 29 Oct 2021 01:42:15
v_y#[Out]# 0.3341246881348918
# Fri, 29 Oct 2021 01:42:16
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Fri, 29 Oct 2021 01:42:16
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b198aabb0>
# Fri, 29 Oct 2021 01:42:17
# Lets compare the mean values of random variables X and Y

K1 = m_y/m_x
K1#[Out]# 2.0
# Fri, 29 Oct 2021 01:42:18
# Lets compare the VARIANCE of random variable X and Y

K2 = v_y/v_x
K2#[Out]# 4.0
# Fri, 29 Oct 2021 01:42:18
# We can say that K2 = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the VARIANCE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Fri, 29 Oct 2021 01:42:19
# Lets compare the mean square of X and Y

K3 = mm_y/mm_x
K3#[Out]# 4.0
# Fri, 29 Oct 2021 01:42:20
# Similarly, We can say that K3 = a**2 = 4 . Hence multiplying a random variable with a constant factor 'a' will cause 
# the MEAN SQUARE of the random variable to be scaled by the constant factor raised to the power 2 ('a**2')# Sat, 30 Oct 2021 00:17:55
#PR1 = Probability of receiving a 1

PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Sat, 30 Oct 2021 00:24:49
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Sat, 30 Oct 2021 00:24:50
# P0 = P(S0) = a priori probability (i.e Probability that the source generates a "0")
# Pe = error probability

P0, Pe = gen_probs()# Sat, 30 Oct 2021 00:24:50
Pe#[Out]# 0.019999999999999997
# Sat, 30 Oct 2021 00:26:37
# PS1_R1 = P(S1|R1) = the probability that a "1“ was transmitted if a "1" has been received

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Sat, 30 Oct 2021 00:33:20
# tx = array tx of size M for the transmitted symbols

tx = random_binary(M, P0)
tx#[Out]# array([0, 0, 0, ..., 0, 0, 0])
# Sat, 30 Oct 2021 00:36:14
?rates# Sat, 30 Oct 2021 00:37:02
rates??# Sat, 30 Oct 2021 01:52:52
from dsplab.lab1 import *
import pandas as pd
from pandas import DataFrame
from numpy.random import uniform, normal# Sat, 30 Oct 2021 01:52:53
# P0 = P(S0) = Probability that the source generates a "0"
# Pe = error probability

P0, Pe = gen_probs()# Sat, 30 Oct 2021 01:52:53
Pe#[Out]# 0.019999999999999997
# Sat, 30 Oct 2021 01:52:53
P0#[Out]# 0.8
# Sat, 30 Oct 2021 01:52:53
#PR1 = Probability of receiving a 1

PR1 = (Pe*P0) + (1-Pe)*(1-P0)
PR1#[Out]# 0.21199999999999994
# Sat, 30 Oct 2021 01:52:54
# PS1_R1 = P(S1|R1) = the probability that a "1“ was transmitted if a "1" has been received

PS1_R1 = ((1-Pe)*(1-P0))/((1-Pe)*(1-P0)+(Pe*P0))
PS1_R1#[Out]# 0.9245283018867925
# Sat, 30 Oct 2021 01:52:54
M = 100# Sat, 30 Oct 2021 01:52:55
# tx = array tx of size M for the transmitted symbols

tx = random_binary(M, P0)
tx#[Out]# array([1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
# Sat, 30 Oct 2021 01:52:55
# rx = an array for the received symbols

rx = bsc(tx, Pe)
rx#[Out]# array([1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
# Sat, 30 Oct 2021 01:52:56
# f0 = Relative frequency of zeros in the given input array
# f1 = Relative frequency of ones in the given input array

f0, f1 = rates(rx)# Sat, 30 Oct 2021 01:52:56
f1#[Out]# 0.18
# Sat, 30 Oct 2021 01:52:56
f0#[Out]# 0.82
# Sat, 30 Oct 2021 01:52:57
# For M = 1000:
# tx_a = array tx of size M for the transmitted symbols
# rx_a = an array for the received symbols

tx_a = random_binary(1000, P0)
#tx_a# Sat, 30 Oct 2021 01:52:57
rx_a = bsc(tx_a, Pe)
#rx_a# Sat, 30 Oct 2021 01:52:57
# f0_a = Relative frequency of zeros in the given input array
# f1_a = Relative frequency of ones in the given input array

f0_a, f1_a = rates(rx_a)# Sat, 30 Oct 2021 01:52:58
f1_a#[Out]# 0.215
# Sat, 30 Oct 2021 01:52:58
f0_a#[Out]# 0.785
# Sat, 30 Oct 2021 01:52:58
#For M = 10000:
# tx_b = array tx of size M for the transmitted symbols
# rx_b = an array for the received symbols

tx_b = random_binary(10000, P0)
tx_b#[Out]# array([1, 0, 0, ..., 1, 1, 0])
# Sat, 30 Oct 2021 01:52:58
rx_b = bsc(tx_b, Pe)
rx_b#[Out]# array([1, 0, 0, ..., 1, 1, 0])
# Sat, 30 Oct 2021 01:52:59
# f0_b = Relative frequency of zeros in the given input array
# f1_b = Relative frequency of ones in the given input array

f0_b, f1_b = rates(rx_b)# Sat, 30 Oct 2021 01:52:59
f1_b#[Out]# 0.2133
# Sat, 30 Oct 2021 01:52:59
f0_b#[Out]# 0.7867
# Sat, 30 Oct 2021 01:52:59
#For M = 100000
# tx_c = array tx of size M for the transmitted symbols
# rx_c = an array for the received symbols

tx_c = random_binary(100000, P0)
tx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:00
rx_c = bsc(tx_c, Pe)
rx_c#[Out]# array([1, 0, 0, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:00
# f0_c = Relative frequency of zeros in the given input array
# f1_c = Relative frequency of ones in the given input array

f0_c, f1_c = rates(rx_c)# Sat, 30 Oct 2021 01:53:00
f1_c#[Out]# 0.21281
# Sat, 30 Oct 2021 01:53:00
f0_c#[Out]# 0.78719
# Sat, 30 Oct 2021 01:53:01
#For M = 1000000
# tx_d = array tx of size M for the transmitted symbols
# rx_d = an array for the received symbols

tx_d = random_binary(1000000, P0)
tx_d#[Out]# array([0, 1, 1, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:01
rx_d = bsc(tx_d, Pe)
rx_d#[Out]# array([0, 1, 1, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:01
# f0_d = Relative frequency of zeros in the given input array
# f1_d = Relative frequency of ones in the given input array

f0_d, f1_d = rates(rx_d)# Sat, 30 Oct 2021 01:53:02
f1_d#[Out]# 0.212091
# Sat, 30 Oct 2021 01:53:02
f0_d#[Out]# 0.787909
# Sat, 30 Oct 2021 01:53:02
dict_table_1 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0, f1],
    1000:[f0_a, f1_a],
    10000:[f0_b, f1_b],
    100000:[f0_c, f1_c],
    1000000:[f0_d, f1_d]
}
# Sat, 30 Oct 2021 01:53:03
prob_table_1 = pd.DataFrame(dict_table_1)
prob_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b198b6970>
# Sat, 30 Oct 2021 01:53:03
# tx_u = array tx of size M for the transmitted symbols
# rx_u = an array for the received symbols

tx_u = random_binary(1000, P0)
#tx_u# Sat, 30 Oct 2021 01:53:03
rx_u = bsc(tx_u, Pe)
#rx_u# Sat, 30 Oct 2021 01:53:04
# f0_u = Relative frequency of zeros in the given input array
# f1_u = Relative frequency of ones in the given input array

f0_u, f1_u = rates(rx_u)# Sat, 30 Oct 2021 01:53:04
f1_u#[Out]# 0.216
# Sat, 30 Oct 2021 01:53:04
f0_u#[Out]# 0.784
# Sat, 30 Oct 2021 01:53:05
# tx_v = array tx of size M for the transmitted symbols
# rx_v = an array for the received symbols

tx_v = random_binary(1000, P0)
#tx_v# Sat, 30 Oct 2021 01:53:05
rx_v = bsc(tx_v, Pe)
#rx_v# Sat, 30 Oct 2021 01:53:05
# f0_v = Relative frequency of zeros in the given input array
# f1_v = Relative frequency of ones in the given input array

f0_v, f1_v = rates(rx_v)# Sat, 30 Oct 2021 01:53:05
f1_v#[Out]# 0.227
# Sat, 30 Oct 2021 01:53:06
f0_v#[Out]# 0.773
# Sat, 30 Oct 2021 01:53:06
# tx_w = array tx of size M for the transmitted symbols
# rx_w = an array for the received symbols

tx_w = random_binary(1000, P0)
#tx_w# Sat, 30 Oct 2021 01:53:06
rx_w = bsc(tx_w, Pe)
#rx_w# Sat, 30 Oct 2021 01:53:07
# f0_w = Relative frequency of zeros in the given input array
# f1_w = Relative frequency of ones in the given input array

f0_w, f1_w = rates(rx_w)# Sat, 30 Oct 2021 01:53:07
f1_w#[Out]# 0.227
# Sat, 30 Oct 2021 01:53:07
f0_w#[Out]# 0.773
# Sat, 30 Oct 2021 01:53:07
# tx_y array tx of size M for the transmitted symbols
# rx_y = an array for the received symbols

tx_y = random_binary(1000, P0)
#tx_y# Sat, 30 Oct 2021 01:53:08
rx_y = bsc(tx_y, Pe)
#rx_y# Sat, 30 Oct 2021 01:53:08
# f0_y = Relative frequency of zeros in the given input array
# f1_y = Relative frequency of ones in the given input array

f0_y, f1_y = rates(rx_y)# Sat, 30 Oct 2021 01:53:08
f1_y#[Out]# 0.216
# Sat, 30 Oct 2021 01:53:08
f0_y#[Out]# 0.784
# Sat, 30 Oct 2021 01:53:09
# tx_z = array tx of size M for the transmitted symbols
# rx_z = an array for the received symbols

tx_z = random_binary(1000, P0)
#tx_z# Sat, 30 Oct 2021 01:53:09
rx_z = bsc(tx_z, Pe)
#rx_z# Sat, 30 Oct 2021 01:53:09
# f0_z = Relative frequency of zeros in the given input array
# f1_z = Relative frequency of ones in the given input array

f0_z, f1_z = rates(rx_z)# Sat, 30 Oct 2021 01:53:10
f1_z#[Out]# 0.21
# Sat, 30 Oct 2021 01:53:10
f0_z#[Out]# 0.79
# Sat, 30 Oct 2021 01:53:10
dict_table_2 = {
    'M':['P(R0)', 'P(R1)'],
    100:[f0_u, f1_u],
    1000:[f0_v, f1_v],
    10000:[f0_w, f1_w],
    100000:[f0_y, f1_y],
    1000000:[f0_z, f1_z]
    
}# Sat, 30 Oct 2021 01:53:10
prob_table_2 = pd.DataFrame(dict_table_2)
prob_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b198b6cd0>
# Sat, 30 Oct 2021 01:53:11
#For M = 100
# tx_m1 = array tx of size M for the transmitted symbols
# rx_m1 = an array for the received symbols

tx_m1 = random_binary(100, P0)
tx_m1#[Out]# array([1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0])
# Sat, 30 Oct 2021 01:53:11
rx_m1 = bsc(tx_m1, Pe)
rx_m1#[Out]# array([1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
#[Out]#        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
#[Out]#        0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#[Out]#        0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
#[Out]#        1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0])
# Sat, 30 Oct 2021 01:53:11
# P_m1 = P(S1|R1) for M = 100

P_m1 = tx_cond_rx(tx_m1, rx_m1, 1, 1)
P_m1#[Out]# 0.9259259259259259
# Sat, 30 Oct 2021 01:53:12
#For M = 1000
# tx_m2 = array tx of size M for the transmitted symbols
# rx_m2 = an array for the received symbols

tx_m2 = random_binary(1000, P0)
#tx_m2# Sat, 30 Oct 2021 01:53:12
rx_m2 = bsc(tx_m2, Pe)
#rx_m2# Sat, 30 Oct 2021 01:53:12
# P_m2 = P(S1|R1) for M = 1000

P_m2 = tx_cond_rx(tx_m2, rx_m2, 1, 1)
P_m2#[Out]# 0.9260869565217391
# Sat, 30 Oct 2021 01:53:13
#For M = 10000
# tx_m3 = array tx of size M for the transmitted symbols
# rx_m3 = an array for the received symbols

tx_m3 = random_binary(10000, P0)
#tx_m3# Sat, 30 Oct 2021 01:53:13
rx_m3 = bsc(tx_m3, Pe)
#rx_m3# Sat, 30 Oct 2021 01:53:13
# P_m3 = P(S1|R1) for M = 10000

P_m3 = tx_cond_rx(tx_m3, rx_m3, 1, 1)
P_m3#[Out]# 0.9227941176470589
# Sat, 30 Oct 2021 01:53:14
#For M = 100000
# tx_m4 = array tx of size M for the transmitted symbols
# rx_m4 = an array for the received symbols

tx_m4 = random_binary(100000, P0)
#tx_m4# Sat, 30 Oct 2021 01:53:14
rx_m4 = bsc(tx_m4, Pe)
#rx_m4# Sat, 30 Oct 2021 01:53:14
# P_m4 = P(S1|R1) for M = 100000

P_m4 = tx_cond_rx(tx_m4, rx_m4, 1, 1)
P_m4#[Out]# 0.9217411988582302
# Sat, 30 Oct 2021 01:53:14
#For M = 1000000
# tx_m5 = array tx of size M for the transmitted symbols
# rx_m5 = an array for the received symbols

tx_m5 = random_binary(1000000, P0)
tx_m5#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:15
rx_m5 = bsc(tx_m5, Pe)
rx_m5#[Out]# array([0, 1, 0, ..., 0, 0, 0])
# Sat, 30 Oct 2021 01:53:15
# P_m5 = P(S1|R1) for M = 1000000

P_m5 = tx_cond_rx(tx_m5, rx_m5, 1, 1)
P_m5#[Out]# 0.9242427098452433
# Sat, 30 Oct 2021 01:53:16
dict_table_3 = {
    'M':['P(S1|R1)'],
    100:[P_m1],
    1000:[P_m2],
    10000:[P_m3],
    100000:[P_m4],
    1000000:[P_m5]
}# Sat, 30 Oct 2021 01:53:16
prob_table_3 = DataFrame(dict_table_3)
prob_table_3.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b18701d30>
# Sat, 30 Oct 2021 01:53:17
sample_1 = rv1(10000)
sample_1#[Out]# array([-0.78289316,  1.03196776, -0.41251617, ..., -0.79963652,
#[Out]#        -0.69326284, -2.79998359])
# Sat, 30 Oct 2021 01:53:17
sample_2 = rv2(10000)
sample_2#[Out]# array([5.5, 7.5, 3.5, ..., 7.5, 7.5, 5.5])
# Sat, 30 Oct 2021 01:53:17
sample_3 = rv3(10000)
sample_3#[Out]# array([0.88265179, 0.04535104, 0.78228961, ..., 0.39533362, 0.06716008,
#[Out]#        0.14523435])
# Sat, 30 Oct 2021 01:53:18
plot_scatter(sample_1)# Sat, 30 Oct 2021 01:53:19
plot_scatter(sample_2)# Sat, 30 Oct 2021 01:53:19
plot_scatter(sample_3)# Sat, 30 Oct 2021 01:53:20
dict_scatterTable = {
    'Distribution':['Random Variable'],
    'Uniform':['rv3'],
    'Guassian':['rv1'],
    'Discrete':['rv2']
}# Sat, 30 Oct 2021 01:53:21
scatter_table = pd.DataFrame(dict_scatterTable)
scatter_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b1a98b880>
# Sat, 30 Oct 2021 01:53:22
#With M = 100

X = np.random.uniform(0,1,100)
#X# Sat, 30 Oct 2021 01:53:22
#With M = 100, let m1 = mean, mm1 = mean square and v1 = variance

m1, mm1, v1 = expected_values(X)# Sat, 30 Oct 2021 01:53:22
m1#[Out]# 0.4691989658967455
# Sat, 30 Oct 2021 01:53:23
mm1#[Out]# 0.30671476797397973
# Sat, 30 Oct 2021 01:53:23
v1#[Out]# 0.08744151351050945
# Sat, 30 Oct 2021 01:53:23
#With M = 1000

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:24
#With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance

m2, mm2, v2 = expected_values(X)# Sat, 30 Oct 2021 01:53:24
m2#[Out]# 0.49187579033947765
# Sat, 30 Oct 2021 01:53:24
mm2#[Out]# 0.32351464013326064
# Sat, 30 Oct 2021 01:53:25
v2#[Out]# 0.0816545015126875
# Sat, 30 Oct 2021 01:53:25
#With M = 10000

X = np.random.uniform(0,1,10000)
X#[Out]# array([0.30008621, 0.23818039, 0.99816367, ..., 0.67981013, 0.91783317,
#[Out]#        0.56350488])
# Sat, 30 Oct 2021 01:53:25
#With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance

m3, mm3, v3 = expected_values(X)# Sat, 30 Oct 2021 01:53:25
m3#[Out]# 0.5009981062005263
# Sat, 30 Oct 2021 01:53:26
mm3#[Out]# 0.33570576775110256
# Sat, 30 Oct 2021 01:53:26
v3#[Out]# 0.08471513684827355
# Sat, 30 Oct 2021 01:53:26
#With M = 100000

X = np.random.uniform(0,1,100000)
X#[Out]# array([0.64077736, 0.99326617, 0.40509116, ..., 0.80049468, 0.99701979,
#[Out]#        0.21494807])
# Sat, 30 Oct 2021 01:53:27
#With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance

m4, mm4, v4 = expected_values(X)# Sat, 30 Oct 2021 01:53:27
m4#[Out]# 0.5006714114685653
# Sat, 30 Oct 2021 01:53:27
mm4#[Out]# 0.3341591576904057
# Sat, 30 Oct 2021 01:53:28
v4#[Out]# 0.08348813030978348
# Sat, 30 Oct 2021 01:53:28
#With M = 1000000

X = np.random.uniform(0,1,1000000)
X#[Out]# array([0.60246486, 0.95044606, 0.08656877, ..., 0.89081341, 0.32425487,
#[Out]#        0.53553879])
# Sat, 30 Oct 2021 01:53:28
#With M = 1000000, let m4 = mean, mm4 = mean square and v4 = variance

m5, mm5, v5 = expected_values(X)# Sat, 30 Oct 2021 01:53:29
m5#[Out]# 0.49988975575096456
# Sat, 30 Oct 2021 01:53:29
mm5#[Out]# 0.33320320790120045
# Sat, 30 Oct 2021 01:53:29
v5 #[Out]# 0.08331352330996467
# Sat, 30 Oct 2021 01:53:30
dict_uniform_1 = {
    'M':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}
# Sat, 30 Oct 2021 01:53:30
uniform_table_1 = pd.DataFrame(dict_uniform_1)

uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b114c98e0>
# Sat, 30 Oct 2021 01:53:31
# To investigate the relationship defined by equation (4.23), lets create a fourth row 'TEST_VARIANCE' in 'uniform_table_1' 
# with values corresponding to:   TEST_VARIANCE = (Mean Square - (Mean)**2)# Sat, 30 Oct 2021 01:53:31
uniform_table_1.loc[3] = ['TEST_VARIANCE', (mm1 - m1**2), (mm2 - m2**2), (mm3 - m3**2), (mm4 - m4**2), (mm5 - m5**2)]
uniform_table_1.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b11ad71c0>
# Sat, 30 Oct 2021 01:53:32
#With M = 1000 for the first time

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:32
# For the first time let m1 = mean, mm1 = mean square and v1 = variance

m1, mm1, v1 = expected_values(X)# Sat, 30 Oct 2021 01:53:33
m1#[Out]# 0.49484237645881435
# Sat, 30 Oct 2021 01:53:33
mm1#[Out]# 0.3245806155621706
# Sat, 30 Oct 2021 01:53:33
v1#[Out]# 0.07979142945221587
# Sat, 30 Oct 2021 01:53:34
#With M = 1000 for the second time

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:34
# For the second time let m2 = mean, mm2 = mean square and v2 = variance

m2, mm2, v2 = expected_values(X)# Sat, 30 Oct 2021 01:53:34
m2#[Out]# 0.5108120689407651
# Sat, 30 Oct 2021 01:53:35
mm2#[Out]# 0.3450314768152506
# Sat, 30 Oct 2021 01:53:35
v2#[Out]# 0.08418669373343898
# Sat, 30 Oct 2021 01:53:35
#With M = 1000 for the third time

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:35
# For the third time let m3 = mean, mm3 = mean square and v3 = variance

m3, mm3, v3 = expected_values(X)# Sat, 30 Oct 2021 01:53:36
m3#[Out]# 0.5026224560216183
# Sat, 30 Oct 2021 01:53:36
mm3#[Out]# 0.3387765734783425
# Sat, 30 Oct 2021 01:53:36
v3#[Out]# 0.08623347365479375
# Sat, 30 Oct 2021 01:53:37
#With M = 1000 for the fourth time

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:37
# For the fourth time let m4 = mean, mm4 = mean square and v4 = variance

m4, mm4, v4 = expected_values(X)# Sat, 30 Oct 2021 01:53:37
m4#[Out]# 0.5052779923694487
# Sat, 30 Oct 2021 01:53:38
mm4#[Out]# 0.3412168995882909
# Sat, 30 Oct 2021 01:53:38
v4#[Out]# 0.08599704706245269
# Sat, 30 Oct 2021 01:53:38
#With M = 1000 for the fifth time

X = np.random.uniform(0,1,1000)
#X# Sat, 30 Oct 2021 01:53:39
# For the fifth time let m5 = mean, mm5 = mean square and v5 = variance

m5, mm5, v5 = expected_values(X)# Sat, 30 Oct 2021 01:53:39
m5#[Out]# 0.4973034609347585
# Sat, 30 Oct 2021 01:53:39
mm5#[Out]# 0.328393879549001
# Sat, 30 Oct 2021 01:53:40
v5#[Out]# 0.08116431160291505
# Sat, 30 Oct 2021 01:53:40
dict_uniform_2 = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    1:[m1,v1,mm1],
    2:[m2,v2,mm2],
    3:[m3,v3,mm3],
    4:[m4,v4,mm4],
    5:[m5,v5,mm5]
}
# Sat, 30 Oct 2021 01:53:41
uniform_table_2 = pd.DataFrame(dict_uniform_2)

uniform_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b136054f0>
# Sat, 30 Oct 2021 01:53:41
# We are to use the function "normal" from numpy.random to generate an array X of M normally distributed random numbers
# with zero mean and variance 1 (that is the standard deviation is also 1)

# With M = 100
X = np.random.normal(0, 1, 100)
#X# Sat, 30 Oct 2021 01:53:42
# With M = 100, let m1 = mean, mm1 = mean square and v1 = variance

m1, mm1, v1 = expected_values(X)# Sat, 30 Oct 2021 01:53:42
m1#[Out]# -0.33223964642038384
# Sat, 30 Oct 2021 01:53:42
mm1#[Out]# 0.963655056500806
# Sat, 30 Oct 2021 01:53:43
v1#[Out]# 0.8618907816639034
# Sat, 30 Oct 2021 01:53:43
# With M = 1000
X = np.random.normal(0, 1, 1000)
#X# Sat, 30 Oct 2021 01:53:43
# With M = 1000, let m2 = mean, mm2 = mean square and v2 = variance

m2, mm2, v2 = expected_values(X)# Sat, 30 Oct 2021 01:53:43
m2#[Out]# -0.04982488802883778
# Sat, 30 Oct 2021 01:53:44
mm2#[Out]# 0.9358455731733247
# Sat, 30 Oct 2021 01:53:44
v2#[Out]# 0.9342973510572958
# Sat, 30 Oct 2021 01:53:44
# With M = 10000

X = np.random.normal(0, 1, 10000)
#X# Sat, 30 Oct 2021 01:53:45
# With M = 10000, let m3 = mean, mm3 = mean square and v3 = variance

m3, mm3, v3 = expected_values(X)# Sat, 30 Oct 2021 01:53:45
m3#[Out]# 0.010268277263272818
# Sat, 30 Oct 2021 01:53:45
mm3#[Out]# 1.003357658520014
# Sat, 30 Oct 2021 01:53:46
v3#[Out]# 1.0033525562576842
# Sat, 30 Oct 2021 01:53:46
# With M = 100000

X = np.random.normal(0, 1, 100000)
#X# Sat, 30 Oct 2021 01:53:46
# With M = 100000, let m4 = mean, mm4 = mean square and v4 = variance

m4, mm4, v4 = expected_values(X)# Sat, 30 Oct 2021 01:53:46
m4#[Out]# -0.0035788993466945767
# Sat, 30 Oct 2021 01:53:47
mm4#[Out]# 1.0013137817292963
# Sat, 30 Oct 2021 01:53:47
v4#[Out]# 1.0013109863186256
# Sat, 30 Oct 2021 01:53:47
# With M = 1000000

X = np.random.normal(0, 1, 1000000)
#X# Sat, 30 Oct 2021 01:53:48
# With M = 1000000, let m5 = mean, mm5 = mean square and v5 = variance

m5, mm5, v5 = expected_values(X)# Sat, 30 Oct 2021 01:53:48
m5#[Out]# 0.0005369904608031143
# Sat, 30 Oct 2021 01:53:48
mm5#[Out]# 1.0000577793961132
# Sat, 30 Oct 2021 01:53:49
v5#[Out]# 1.0000584910958494
# Sat, 30 Oct 2021 01:53:49
dict_Gaussian = {
    'No.':['Mean', 'Variance', 'Mean Square'],
    100:[m1,v1,mm1],
    1000:[m2,v2,mm2],
    10000:[m3,v3,mm3],
    100000:[m4,v4,mm4],
    1000000:[m5,v5,mm5]
}# Sat, 30 Oct 2021 01:53:49
Gaussian_table = pd.DataFrame(dict_Gaussian)
Gaussian_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b136059d0>
# Sat, 30 Oct 2021 01:53:50
# Use function "normal" to generate an array X of M zero-mean Gaussian distributed random numbers of unit variance
# For unit variance, standard deviation is also 1
# Sat, 30 Oct 2021 01:53:50
# With M = 100

X = np.random.normal(0, 1, 100)# Sat, 30 Oct 2021 01:53:51
# To examine how many times the mean value is TAKEN ON EXACTLY in M trials, we use "hits=number_hits_interval(X, lower_bound)"
# For M = 100, hits = h1

h1 = number_hits_interval(X, 0)
h1
#[Out]# 0
# Sat, 30 Oct 2021 01:53:51
# With M = 1000

X = np.random.normal(0, 1, 1000)# Sat, 30 Oct 2021 01:53:51
# For M = 1000, hits = h2

h2 = number_hits_interval(X, 0)
h2
#[Out]# 0
# Sat, 30 Oct 2021 01:53:52
# With M = 10000
X = np.random.normal(0, 1, 10000)# Sat, 30 Oct 2021 01:53:52
# For M = 10000, hits = h3

h3 = number_hits_interval(X, 0)
h3
#[Out]# 0
# Sat, 30 Oct 2021 01:53:52
# With M = 100000

X = np.random.normal(0, 1, 100000)# Sat, 30 Oct 2021 01:53:52
# For M = 100000, hits = h4

h4 = number_hits_interval(X, 0)
h4#[Out]# 0
# Sat, 30 Oct 2021 01:53:53
# With M = 1000000
X = np.random.normal(0, 1, 1000000)# Sat, 30 Oct 2021 01:53:53
# For M = 1000000, hits = h5

h5 = number_hits_interval(X, 0)
h5#[Out]# 0
# Sat, 30 Oct 2021 01:53:55
dict_pdf = {
    'M':['abs. frequency F'],
    100:[h1],
    1000:[h2],
    10000:[h3],
    100000:[h4],
    1000000:[h5]
}# Sat, 30 Oct 2021 01:53:56
pdf_table = pd.DataFrame(dict_pdf)
pdf_table.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b136056a0>
# Sat, 30 Oct 2021 01:53:59
M = 1000000
X = np.random.normal(0, 1, M)# Sat, 30 Oct 2021 01:53:59
delta_x = 0.1

# For delta_x = 0.1

# F1 = absolute frquency

# f1 = relative frequency

# fx_0a = the value of the PDF at x = 0# Sat, 30 Oct 2021 01:54:00
F1 = number_hits_interval(X, -delta_x/2, delta_x/2)# Sat, 30 Oct 2021 01:54:02
F1#[Out]# 39754
# Sat, 30 Oct 2021 01:54:02
f1 = F1/M
f1#[Out]# 0.039754
# Sat, 30 Oct 2021 01:54:02
fx_0a = f1/delta_x
fx_0a#[Out]# 0.39753999999999995
# Sat, 30 Oct 2021 01:54:02
delta_x = 0.01

# For delta_x = 0.01

# F2 = absolute frquency

# f2 = relative frequency

# fx_0b = the value of the PDF at x = 0# Sat, 30 Oct 2021 01:54:02
F2 = number_hits_interval(X, -delta_x/2, delta_x/2)# Sat, 30 Oct 2021 01:54:05
F2#[Out]# 4012
# Sat, 30 Oct 2021 01:54:05
f2 = F2/M
f2#[Out]# 0.004012
# Sat, 30 Oct 2021 01:54:05
fx_0b = f2/delta_x
fx_0b#[Out]# 0.4012
# Sat, 30 Oct 2021 01:54:05
delta_x = 0.001

# For delta_x = 0.001

# F3 = absolute frquency

# f3 = relative frequency

# fx_0c = the value of the PDF at x = 0# Sat, 30 Oct 2021 01:54:05
F3 = number_hits_interval(X, -delta_x/2, delta_x/2)# Sat, 30 Oct 2021 01:54:07
F3#[Out]# 400
# Sat, 30 Oct 2021 01:54:07
f3 = F3/M
f3#[Out]# 0.0004
# Sat, 30 Oct 2021 01:54:07
fx_0c = f3/delta_x
fx_0c#[Out]# 0.4
# Sat, 30 Oct 2021 01:54:07
delta_x = 0.0001

# For delta_x = 0.0001

# F4 = absolute frquency

# f4 = relative frequency

# fx_0d = the value of the PDF at x = 0# Sat, 30 Oct 2021 01:54:07
F4 = number_hits_interval(X, -delta_x/2, delta_x/2)# Sat, 30 Oct 2021 01:54:09
F4#[Out]# 37
# Sat, 30 Oct 2021 01:54:09
f4 = F4/M
f4#[Out]# 3.7e-05
# Sat, 30 Oct 2021 01:54:09
fx_0d = f4/delta_x
fx_0d#[Out]# 0.36999999999999994
# Sat, 30 Oct 2021 01:54:09
dict_pdf_2 = {
    '∆x':['absolute frequency F', 'relative frequency f', 'fx(0)'],
    0.1:[F1, f1, fx_0a],
    0.01:[F2, f2, fx_0b],
    0.001:[F3, f3, fx_0c],
    0.0001:[F4, f4, fx_0d]
}# Sat, 30 Oct 2021 01:54:09
pdf_table_2 = pd.DataFrame(dict_pdf_2)
pdf_table_2.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0ef9cbb0>
# Sat, 30 Oct 2021 01:54:09
M = 100000 #size of both arrays
N = 100 # number of bins for the histogram

X_uniform =  np.random.uniform(0, 1, M)# Sat, 30 Oct 2021 01:54:10
X_normal = np.random.normal(0, 1, M)# Sat, 30 Oct 2021 01:54:10
# X_u: bin centers 
# f_u : value of the estimated PDF

X_u, f_u = pdf(X_uniform, N) # Sat, 30 Oct 2021 01:54:10
X_n, f_n = pdf(X_normal, N)# Sat, 30 Oct 2021 01:54:11
plot_pdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Sat, 30 Oct 2021 01:54:11
plot_pdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Sat, 30 Oct 2021 01:54:12
M = 100000 #size of both arrays

X_uniform =  np.random.uniform(0, 1, M)# Sat, 30 Oct 2021 01:54:13
X_normal = np.random.normal(0, 1, M)# Sat, 30 Oct 2021 01:54:13
# X_u:  the locations of the values of the estimated CDF
# f_u : the values of the estimated CDF

X_u, f_u = cdf(X_uniform) # Sat, 30 Oct 2021 01:54:14
X_n, f_n = cdf(X_normal)# Sat, 30 Oct 2021 01:54:14
plot_cdf(X_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Sat, 30 Oct 2021 01:54:15
plot_cdf(X_n, f_n)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$F_X(x)$'>)
# Sat, 30 Oct 2021 01:54:17
b = gen_b()
b#[Out]# 2.5
# Sat, 30 Oct 2021 01:54:17
#set histogram bn size N = 100
# set array size M = 100000

X = uniform(0, 1, 100000)
X#[Out]# array([0.82467987, 0.56334345, 0.83670432, ..., 0.66426117, 0.03433078,
#[Out]#        0.11538455])
# Sat, 30 Oct 2021 01:54:18
Y = X + b
Y#[Out]# array([3.32467987, 3.06334345, 3.33670432, ..., 3.16426117, 2.53433078,
#[Out]#        2.61538455])
# Sat, 30 Oct 2021 01:54:19
# Y_u: bin centers 
# f_u : value of the estimated PDF

Y_u, f_u = pdf(Y, 100)# Sat, 30 Oct 2021 01:54:20
plot_pdf(Y_u, f_u)#[Out]# (<Figure size 432x288 with 1 Axes>,
#[Out]#  <AxesSubplot:xlabel='$x$', ylabel='$f_X(x)$'>)
# Sat, 30 Oct 2021 01:54:21
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance

m_x, mm_x, v_x = expected_values(X)# Sat, 30 Oct 2021 01:54:22
m_x#[Out]# 0.4986853957323768
# Sat, 30 Oct 2021 01:54:22
mm_x#[Out]# 0.33256633697713456
# Sat, 30 Oct 2021 01:54:23
v_x#[Out]# 0.08388005186089581
# Sat, 30 Oct 2021 01:54:23
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance

m_y, mm_y, v_y = expected_values(Y)# Sat, 30 Oct 2021 01:54:23
m_y#[Out]# 2.9986853957323767
# Sat, 30 Oct 2021 01:54:24
mm_y#[Out]# 9.07599331563902
# Sat, 30 Oct 2021 01:54:24
v_y#[Out]# 0.08388005186089581
# Sat, 30 Oct 2021 01:54:25
dict_addition = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Sat, 30 Oct 2021 01:54:25
table_addition = DataFrame(dict_addition)
table_addition.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b198a56a0>
# Sat, 30 Oct 2021 01:54:26
# Get the difference between the mean of Y and the mean of X

k = m_y - m_x 
k#[Out]# 2.5
# Sat, 30 Oct 2021 01:54:28
a = gen_a()
a#[Out]# 2.0
# Sat, 30 Oct 2021 01:54:29
# array of size M = 100000

X = normal(0, 1, 100000)
X#[Out]# array([ 0.03082781,  0.89482304,  0.50007016, ...,  0.84262043,
#[Out]#        -1.15440136,  1.84421807])
# Sat, 30 Oct 2021 01:54:30
Y = a * X
Y#[Out]# array([ 0.06165561,  1.78964608,  1.00014031, ...,  1.68524087,
#[Out]#        -2.30880271,  3.68843614])
# Sat, 30 Oct 2021 01:54:30
Z = X/a
Z#[Out]# array([ 0.0154139 ,  0.44741152,  0.25003508, ...,  0.42131022,
#[Out]#        -0.57720068,  0.92210904])
# Sat, 30 Oct 2021 01:54:31
x, fx = pdf(X, 100)# Sat, 30 Oct 2021 01:54:31
y, fy = pdf(Y, 100)# Sat, 30 Oct 2021 01:54:32
z, fz = pdf(Z, 100)# Sat, 30 Oct 2021 01:54:32
fig, ax = plot_pdf(x, fx)
plot_pdf(y, fy, figure=fig, axes=ax, color="r")
plot_pdf(z, fz, figure=fig, axes=ax, color="g")
ax.axis('auto')

#[Out]# (-9.631701484801063,
#[Out]#  9.247298850939274,
#[Out]#  -0.04000902519028343,
#[Out]#  0.840189528995952)
# Sat, 30 Oct 2021 01:54:35
M = 100000
X = uniform(1, 0, M)# Sat, 30 Oct 2021 01:54:35
Y = a * X# Sat, 30 Oct 2021 01:54:36
# For random variable X, let m_x = mean, mm_x = mean square and v_x = variance

m_x, mm_x, v_x = expected_values(X)# Sat, 30 Oct 2021 01:54:36
m_x#[Out]# 0.5006251688405791
# Sat, 30 Oct 2021 01:54:36
mm_x#[Out]# 0.33400137777826955
# Sat, 30 Oct 2021 01:54:37
v_x#[Out]# 0.08337665186813
# Sat, 30 Oct 2021 01:54:37
# For random variable Y, let m_y = mean, mm_y = mean square and v_y = variance

m_y, mm_y, v_y = expected_values(Y)# Sat, 30 Oct 2021 01:54:38
m_y#[Out]# 1.0012503376811581
# Sat, 30 Oct 2021 01:54:38
mm_y#[Out]# 1.3360055111130782
# Sat, 30 Oct 2021 01:54:39
v_y#[Out]# 0.33350660747252
# Sat, 30 Oct 2021 01:54:39
dict_multiplication = {
    'Random Variable':['Mean', 'Variance', 'Mean square'],
    'X':[m_x, v_x, mm_x],
    'Y':[m_y, v_y, mm_y]
}# Sat, 30 Oct 2021 01:54:40
table_multiplication = DataFrame(dict_multiplication)
table_multiplication.style.hide_index()#[Out]# <pandas.io.formats.style.Styler at 0x19b0526a760>
# Sat, 30 Oct 2021 01:54:41
# Lets compare the mean values of random variables X and Y

K1 = m_y/m_x
K1#[Out]# 2.0
# Sat, 30 Oct 2021 01:54:42
# Lets compare the VARIANCE of random variable X and Y

K2 = v_y/v_x
K2#[Out]# 4.0
# Sat, 30 Oct 2021 01:54:44
# Lets compare the mean square of X and Y

K3 = mm_y/mm_x
K3#[Out]# 4.0
# Sat, 30 Oct 2021 02:02:20
# finish homework
dsp_lab1_finish()Finishing Lab 1: Probability and Random Variables for matriculation number 11144732
Lab 1: Probability and Random Variables  finished at: 2021-10-30 02:03:00.273157
Finished after: 1 day, 15:48:52.253700
Info:  2562463468
